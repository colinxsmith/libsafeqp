/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#ifdef _JAVASOFT_JNI_H_
#include "optimise.h"
template <typename T> DLLEXPORT void dumpvector(size_t n,const char* name,T* A,std::ofstream &file)
{
	file<<name<<std::endl;
	file.precision(17);
	if(A&&(n>0))
	{
		while(n--)
		{
			if(n)
				file<<*A++<<" ";
			else
				file<<*A++;
		}
	}
	file<<std::endl;
}

extern "C" void patternmin(unsigned long n,double *x,double *step,
	double *f,double scale,short iprint,short icon,
	unsigned long maxit,double *w,pUtility calcfx,void*info);

void lineprintv(FILE* I,const char* name,size_t n,vector data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%-.8e ",data[i]);
	fprintf(I,"\n");
}
void lineprinti(FILE* I,const char* name,size_t n,int* data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%d ",data[i]);
	fprintf(I,"\n");
}
void lineprintl(FILE* I,const char* name,size_t n,dimen* data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%d ",data[i]);
	fprintf(I,"\n");
}
void lineprintn(FILE* I,const char* name,size_t n,char** data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%s ",data[i]);
	fprintf(I,"\n");
}
short FrontierCVPFlog(dimen npoints,vector risk,
									vector arisk,vector rreturn,vector areturn,
									dimen n,long nfac,char** stocknames,vector w,dimen m,
									vector A,vector L,vector U,vector alpha,
									vector benchmark,vector Q,vector initial,
									real delta,vector buy,vector sell,real kappa,dimen basket,
									dimen trades,dimen revise,int costs,real min_holding,real min_trade,
									int m_LS,int Fully_Invested,real Rmin,real Rmax,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									dimen ncomp,vector Comp,real LSValue,
									dimen npiece,vector hpiece,vector pgrad,
									vector FC,vector FL,vector SV,vector mask,int DoByRisks)
{
	FILE* OOO=fopen("s:\\Frontier.log","w");
	fprintf(OOO,"npoints\n%d\n",npoints);
	lineprintv(OOO,(char*)"risk",n*npoints,risk);
	lineprintv(OOO,(char*)"arisk",n*npoints,arisk);
	lineprintv(OOO,(char*)"rreturn",n*npoints,rreturn);
	lineprintv(OOO,(char*)"areturn",n*npoints,areturn);
	fprintf(OOO,"n\n%d\n",n);
	fprintf(OOO,"nfac\n%d\n",nfac);
	lineprintn(OOO,"stocknames",n,stocknames);
	lineprintv(OOO,(char*)"w",n*npoints,w);
	fprintf(OOO,"m\n%d\n",m);
	lineprintv(OOO,(char*)"A",n*m,A);
	lineprintv(OOO,(char*)"L",n+m,L);
	lineprintv(OOO,(char*)"U",n+m,U);
	lineprintv(OOO,(char*)"alpha",n,alpha);
	lineprintv(OOO,(char*)"benchmark",n,benchmark);
	if(nfac==-1)
		lineprintv(OOO,(char*)"Q",(n-ncomp)*(n-ncomp+1)/2,Q);
	else
		lineprintv(OOO,(char*)"Q",(n-ncomp)*(nfac+1),Q);
	lineprintv(OOO,(char*)"initial",n,initial);
	fprintf(OOO,"delta\n%-.e\n",delta);
	lineprintv(OOO,(char*)"buy",n,buy);
	lineprintv(OOO,(char*)"sell",n,sell);
	fprintf(OOO,"kappa\n%-.e\n",kappa);
	fprintf(OOO,"basket\n%d\n",basket);
	fprintf(OOO,"trades\n%d\n",trades);
	fprintf(OOO,"revise\n%d\n",revise);
	fprintf(OOO,"costs\n%d\n",costs);
	fprintf(OOO,"min_holding\n%-.e\n",min_holding);
	fprintf(OOO,"min_trade\n%-.e\n",min_trade);
	fprintf(OOO,"m_LS\n%d\n",m_LS);
	fprintf(OOO,"Fully_Invested\n%d\n",Fully_Invested);
	fprintf(OOO,"Rmin\n%-.e\n",Rmin);
	fprintf(OOO,"Rmax\n%-.e\n",Rmax);
	fprintf(OOO,"m_Round\n%d\n",m_Round);
	lineprintv(OOO,(char*)"min_lot",n,min_lot);
	lineprintv(OOO,(char*)"size_lot",n,size_lot);
	lineprinti(OOO,"shake",n*npoints,shake);
	fprintf(OOO,"ncomp\n%d\n",ncomp);
	lineprintv(OOO,(char*)"Comp",(n-ncomp)*ncomp,Comp);
	fprintf(OOO,"LSValue\n%-.8e\n",LSValue);
	fprintf(OOO,"npiece\n%d\n",npiece);
	lineprintv(OOO,(char*)"hpiece",n*npiece,hpiece);
	lineprintv(OOO,(char*)"pgrad",n*npiece,pgrad);
	if(nfac!=-1)
	{
		lineprintv(OOO,(char*)"FC",(nfac+1)*nfac/2,FC);
		lineprintv(OOO,(char*)"SV",(n-ncomp),SV);
		lineprintv(OOO,(char*)"FL",(n-ncomp)*nfac,FL);
	}
	else
	{
		lineprintv(OOO,(char*)"FC",0,FC);
		lineprintv(OOO,(char*)"SV",0,SV);
		lineprintv(OOO,(char*)"FL",0,FL);
	}
	lineprintv(OOO,(char*)"mask",n,mask);
	fprintf(OOO,"DoByRisks\n%d\n",DoByRisks);
	fclose(OOO);
	return 0;
}
typedef struct
{
	JNIEnv *jenv;
	jobject jd;
	char*	functionName;
}	JavaInfo;
static void CallHmul(size_t n,size_t n1,size_t n2,size_t n3,double* H,double *x,double *y,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;

	jdoubleArray xx = jenv->NewDoubleArray(n);
	if(!xx) printf("JNI can't allocate xx\n");
	jdoubleArray yy = jenv->NewDoubleArray(n);
	if(!yy) printf("JNI can't allocate yy\n");
	jdoubleArray HH = jenv->NewDoubleArray(n*(n+1)/2);
	if(!HH) printf("JNI can't allocate HH\n");

	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(JJJJ[D[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}


	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(yy,0,n,y);
	jenv->SetDoubleArrayRegion(HH,0,n*(n+1)/2,H);


	jenv->CallVoidMethod(jd,mid,(jlong)n,(jlong)n1,(jlong)n2,(jlong)n3,HH,xx,yy);
	jenv->GetDoubleArrayRegion(yy,0,n,y);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(yy);
	jenv->DeleteLocalRef(HH);
}	
static double CallUtil(size_t n,double *x,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	char*	name=info->functionName;
	jobject jd=info->jd;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(J[D)D");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return 1e10;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);

	jenv->SetDoubleArrayRegion(xx,0,n,x);

	jdouble ret =0;
	ret= jenv->CallDoubleMethod(jd,mid,(jlong)n,xx);


	jenv->DeleteLocalRef(xx);
	return ret;
}	
static void CallModC(size_t n,double *x,double *c,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(J[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);
	jdoubleArray cc = jenv->NewDoubleArray(n);

	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(cc,0,n,c);

	jenv->CallVoidMethod(jd,mid,(jlong)n,xx,cc);
	jenv->GetDoubleArrayRegion(cc,0,n,c);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(cc);
}	
static void CallModQ(size_t n,double *x,double *Hmod,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(J[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);
	jdoubleArray cc = jenv->NewDoubleArray(n*(n+1)/2);

	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(cc,0,n*(n+1)/2,Hmod);

	jenv->CallVoidMethod(jd,mid,(jlong)n,xx,cc);
	jenv->GetDoubleArrayRegion(cc,0,n*(n+1)/2,Hmod);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(cc);
}	
static void CallModAb(size_t n,size_t m,double *x,double *y,double *J,double *H,double*g,void* f)
{
	size_t nm=n*m,nn=n*(n+1)>>1;
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(JJ[D[D[D[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);
	jdoubleArray JJ;
	
	if(J) JJ = jenv->NewDoubleArray(nm);
	else JJ = jenv->NewDoubleArray(0);
	
	jdoubleArray yy = jenv->NewDoubleArray(m);
	jdoubleArray HH;
	
	if(H) HH = jenv->NewDoubleArray(nn);
	else HH = jenv->NewDoubleArray(0);
	
	jdoubleArray gg = jenv->NewDoubleArray(m);

	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(yy,0,m,y);
	if(J) jenv->SetDoubleArrayRegion(JJ,0,nm,J);
	jenv->SetDoubleArrayRegion(gg,0,m,g);
	if(H) jenv->SetDoubleArrayRegion(HH,0,nn,H);

	jenv->CallVoidMethod(jd,mid,(jlong)n,(jlong)m,xx,yy,JJ,HH,gg);
	if(J) jenv->GetDoubleArrayRegion(JJ,0,nm,J);
	if(H) jenv->GetDoubleArrayRegion(HH,0,nn,H);
	jenv->GetDoubleArrayRegion(gg,0,m,g);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(yy);
	jenv->DeleteLocalRef(JJ);
	jenv->DeleteLocalRef(HH);
	jenv->DeleteLocalRef(gg);
}	
static double Call1D(double x,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	char*	name=info->functionName;
	jobject jd=info->jd;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(D)D");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return 1e10;
	}
	jdouble dd=0;
	dd=jenv->CallDoubleMethod(jd,mid,x);
	return dd;
}	
#ifdef __cplusplus
extern "C"
{
#endif
#ifdef __cplusplus
}
#endif
#else
//		#ifndef _JAVASOFT_JNI_H_
#include "optimise.h"
typedef void (*ppModC)_PROTO((dimen nvab,vector x,vector c)); 
typedef void (*ppModQ)_PROTO((dimen n1,vector x,dimen n2,vector h)); 
template <typename T> DLLEXPORT void dumpvector(size_t n,const char* name,T* A,std::ofstream &file)
{
	file<<name<<std::endl;
	file.precision(17);
	if(A&&(n>0))
	{
		while(n--)
		{
			if(n)
				file<<*A++<<" ";
			else
				file<<*A++;
		}
	}
	file<<std::endl;
}
extern "C" void patternmin(unsigned long n,double *x,double *step,
	double *f,double scale,short iprint,short icon,
	unsigned long maxit,double *w,pUtility calcfx,void*info);
#endif
#ifdef H_PERL

static void CallModQ(size_t n,double *x,double *c,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svx,*svc;
	AV *tempavx=newAV(),*tempavc=newAV();
	double back;
	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
	}
	for(i=0;i<n*(n+1)/2;++i)
	{
		av_push(tempavc,newSVnv(c[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svc = sv_2mortal(newRV((SV*)tempavc));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svx);
	XPUSHs(svc);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0){croak ("call_Inc: expected 0 values CallModQ, got %d\n",count);}
	for(i=0;i<n*(n+1)/2;++i)
	{
		c[i]=SvNV(*(av_fetch((AV*)SvRV(svc),i,0)));
//		printf("%d %e\n",i+1,c[i]);
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavx);
	av_undef(tempavc);
}
static void CallModAb(size_t n,size_t m,double *x,double*y,double *J,double*H,double*g,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svm,*svx,*svJ,*svg,*svy,*svH;
	AV *tempavx=newAV(),*tempavy=newAV(),*tempavJ=newAV(),*tempavH=newAV(),*tempavg=newAV();

	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
	}
	for(i=0;i<m;++i)
	{
		av_push(tempavy,newSVnv(y[i]));
	}
	if(J)
	{
		for(i=0;i<n*m;++i)
		{
			av_push(tempavJ,newSVnv(J[i]));
		}
	}
	if(H)
	{
		for(i=0;i<n*(n+1)>>1;++i)
		{
			av_push(tempavH,newSVnv(H[i]));
		}
	}
	for(i=0;i<m;++i)
	{
		av_push(tempavg,newSVnv(g[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svm = sv_2mortal(newSViv(m));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svy = sv_2mortal(newRV((SV*)tempavy));
	svJ = sv_2mortal(newRV((SV*)tempavJ));
	svH = sv_2mortal(newRV((SV*)tempavH));
	svg = sv_2mortal(newRV((SV*)tempavg));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svm);
	XPUSHs(svx);
	XPUSHs(svy);
	XPUSHs(svJ);
	XPUSHs(svH);
	XPUSHs(svg);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0){croak ("call_Inc: expected 0 values CallModQ, got %d\n",count);}
	if(J)
	{
		for(i=0;i<n*m;++i)
		{
			J[i]=SvNV(*(av_fetch((AV*)SvRV(svJ),i,0)));
		}
	}
	if(H)
	{
		for(i=0;i<n*(n+1)>>1;++i)
		{
			H[i]=SvNV(*(av_fetch((AV*)SvRV(svH),i,0)));
		}
	}
	for(i=0;i<m;++i)
	{
		g[i]=SvNV(*(av_fetch((AV*)SvRV(svg),i,0)));
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavx);
	av_undef(tempavy);
	av_undef(tempavJ);
	av_undef(tempavH);
	av_undef(tempavg);
}
static void CallModC(size_t n,double *x,double *c,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svx,*svc;
	AV *tempavx=newAV(),*tempavc=newAV();
	double back;
	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
		av_push(tempavc,newSVnv(c[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svc = sv_2mortal(newRV((SV*)tempavc));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svx);
	XPUSHs(svc);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0)
		croak ("call_Inc: expected 0 values CallModC, got %d\n",count) ;
	for(i=0;i<n;++i)
	{
		c[i]=SvNV(*(av_fetch((AV*)SvRV(svc),i,0)));
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavx);
	av_undef(tempavc);
}
static void CallHmul(size_t n,size_t n1,size_t n2,size_t n3,double* H,double *x,double *y,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svn1,*svn2,*svn3,*svH,*svx,*svy;
	AV *tempavH=newAV(),*tempavx=newAV(),*tempavy=newAV();
	double back;
	for(i=0;i<n*(n+1)/2;++i)
	{
		av_push(tempavH,newSVnv(H[i]));
	}
	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
		av_push(tempavy,newSVnv(y[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svn1 = sv_2mortal(newSViv(n1));
	svn2 = sv_2mortal(newSViv(n2));
	svn3 = sv_2mortal(newSViv(n3));
	svH = sv_2mortal(newRV((SV*)tempavH));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svy = sv_2mortal(newRV((SV*)tempavy));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svn1);
	XPUSHs(svn2);
	XPUSHs(svn3);
	XPUSHs(svH);
	XPUSHs(svx);
	XPUSHs(svy);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0)
		croak ("call_Inc: expected 0 values CallHmul, got %d\n",count) ;
	for(i=0;i<n;++i)
	{
		y[i]=SvNV(*(av_fetch((AV*)SvRV(svy),i,0)));
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavH);
	av_undef(tempavx);
	av_undef(tempavy);
}
static double CallUtil(size_t n,double*x,void*f)
{
	size_t count,i;
	dSP;
	SV * sva,*svb ;
	AV *tempav=newAV();
	double back;
	for(i=0;i<n;++i)
	{
		av_push(tempav,newSVnv(x[i]));
	}
	ENTER;
	SAVETMPS;
	sva = sv_2mortal(newSViv(n));
	svb = sv_2mortal(newRV((SV*)tempav));
	PUSHMARK(SP);
	XPUSHs(sva);
	XPUSHs(svb);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_SCALAR);
    SPAGAIN ;
	if (count != 1)
		croak ("call_Inc: expected 1 values CallUtil, got %d\n",count) ;
    back=POPn ;
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempav);
	return back;
}
static double Call1D(double x,void* f)
{
	double back;
    dSP;
    int count;
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);
    XPUSHs(sv_2mortal(newSVnv(x)));
    PUTBACK;
    count = perl_call_sv((SV*)f, G_SCALAR);
    SPAGAIN ;
    if (count != 1)
         croak("Call1D: wanted return value, Call1D got %d\n",count) ;
	back=POPn;
    PUTBACK;
    FREETMPS;
    LEAVE;
	return back;
}	
#endif
#ifdef Py_PYTHON_H
#if PY_VERSION_HEX >= 0x03000000
#define PyString_Check(x) PyUnicode_Check(x)
#define USE_STRDUP 0
#else
#define USE_STRDUP 1
#endif

//________________________Here they are________________________________________________
void CMS_get_fromvec(PyObject* &obj,Py_ssize_t n,char*name,vector w)
{
	PyObject*matcher=PyObject_GetAttrString(obj,name);
	if(PyList_Check(matcher))
	{
		Py_ssize_t i,size=PyList_Size(matcher);
		if(n!=size)
		{
			Py_XDECREF(matcher);
			matcher=PyList_New(n);
		}
		if(w)
		{
			for(i=0;i<n;++i)
			{
				PyList_SetItem(matcher,i,PyFloat_FromDouble(w[i]));
			}
		}
		else
		{
			printf("Just set 0\n");
			for(i=0;i<n;++i)
			{
				PyList_SetItem(matcher,i,PyFloat_FromDouble(0.0));
			}
		}
		if(n!=size)
		{
			PyObject_SetAttrString(obj,name,matcher);
			Py_XDECREF(matcher);
		}
	}
}
void CMS_set_asvec(PyObject*obj,Py_ssize_t n,char*name,vector &w)
{
	if(PyObject_HasAttrString(obj,name))
	{
		PyObject*matcher=PyObject_GetAttrString(obj,name);
		if(PyList_Check(matcher))
		{
			Py_ssize_t i,size=PyList_Size(matcher);
			if(!w)
			{
				w=new double[n];
			}
			if(size)
			{
				for(i=0;i<size;++i)
				{
					PyObject*o=PyList_GetItem(matcher,i);//Borrowed ref
					if(PyFloat_Check(o))
						w[i]=PyFloat_AsDouble(o);
					else if(PyLong_Check(o))
						w[i]=PyLong_AsDouble(o);
					else if(PyInt_Check(o))
						w[i]=(double)PyInt_AsLong(o);
				}
				Py_XDECREF(matcher);
			}
			else
				dzerovec(n,w);
		}
	}
	else
	{
		char*err1=(char*)"No member has name                                                                                                ";
		sprintf(err1,"No member of object has name %s",name);
		printf("%s\n",err1);
		PyErr_SetString(PyExc_TypeError,err1);return;
	}
}
static double AccUtil(void*info)
{
	OptParamAccum*OP=(OptParamAccum*)info;
	OptPassAccum*Opt=(OptPassAccum*)(OP->MoreInfo);
	PyObject*obj=(PyObject*)(Opt->caller),*matcher;
	
	char* name1=Opt->Utilname;
	CMS_get_fromvec(obj,Opt->n,(char*)"w",Opt->w);

	if(PyObject_HasAttrString(obj,name1))
	{
		matcher=PyObject_CallMethod(obj,name1,0);
	}
	double ret;
	if(matcher)
	{
		ret=(double)PyFloat_AsDouble(matcher);
		Py_XDECREF(matcher);
	}
	return ret;
}

static void AccGUtil(void*info)
{
	OptParamAccum*OP=(OptParamAccum*)info;
	OptPassAccum*Opt=(OptPassAccum*)(OP->MoreInfo);
	PyObject*obj=(PyObject*)(Opt->caller),*matcher;
	
	char* name1=Opt->GUtilname;
	CMS_get_fromvec(obj,Opt->n,(char*)"w",Opt->w);
	if(PyObject_HasAttrString(obj,name1))
	{
		matcher=PyObject_CallMethod(obj,name1,0);
	}
	if(matcher&&PyList_Check(matcher))
	{
		Py_ssize_t i,size=PyList_Size(matcher);
		for(i=0;i<size;++i)
		{
			PyObject*o=PyList_GetItem(matcher,i);//Borrowed ref
			if(PyFloat_Check(o))
				OP->grad[i]=PyFloat_AsDouble(o);
			else if(PyLong_Check(o))
				OP->grad[i]=PyLong_AsDouble(o);
			else if(PyInt_Check(o))
				OP->grad[i]=(double)PyInt_AsLong(o);
		}
		Py_XDECREF(matcher);
	}
}

static short AccOpt(void*info)
{
	OptParamAccum*OP=(OptParamAccum*)info;
	OptPassAccum*Opt=(OptPassAccum*)(OP->MoreInfo);
	PyObject*obj=(PyObject*)(Opt->caller),*matcher,*o;
	
	matcher=PyInt_FromLong((long)Opt->m);
	PyObject_SetAttrString(obj,"m",matcher);
	Py_XDECREF(matcher);
	
	CMS_get_fromvec(obj,(Py_ssize_t)(Opt->n+Opt->m),(char*)"L",Opt->L);
	CMS_get_fromvec(obj,(Py_ssize_t)(Opt->n+Opt->m),(char*)"U",Opt->U);
	CMS_get_fromvec(obj,(Py_ssize_t)(Opt->n*Opt->m),(char*)"A",Opt->A);
	
	if(PyObject_HasAttrString(obj,Opt->Optname))
	{
		o=PyObject_CallMethod(obj,Opt->Optname,(char*)"()",0);
	}
	short ret=-1000;
	if(o)
	{
		ret=(short)PyInt_AsLong(o);
		Py_XDECREF(o);
	}
	else
	{
		printf("Nothing returned from function call\n");
		PyErr_SetString(PyExc_TypeError,(char*)"Nothing returned from function call");
	}
	
	CMS_set_asvec(obj,(Py_ssize_t)Opt->n,(char*)"w",Opt->w);
	Opt->back=ret;//Opt object expects back member to be set correctly as well as w
	
	return ret;
}
	
	

static void CallHmul(size_t n,size_t n1,size_t n2,size_t n3,double* H,double *x,double *y,void* f)
{
	PyObject *Hlist=PyList_New(n*(n+1)/2);
	PyObject *list1=PyList_New(n);
	PyObject *list2=PyList_New(n);
	double *yp=y;
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n*(n+1)/2;++i)
	{
		PyList_SetItem(Hlist,i,PyFloat_FromDouble(*H++));
	}
	for(i=0;i<n;++i)
	{
		PyList_SetItem(list1,i,PyFloat_FromDouble(*x++));
		PyList_SetItem(list2,i,PyFloat_FromDouble(*yp++));
	}
	arglist = Py_BuildValue("(llllOOO)",n,n1,n2,n3,Hlist,list1,list2);
	result = PyObject_CallObject(func,arglist);
	yp=y;
	for(i=0;i<n;++i)
	{
		*yp++ = PyFloat_AsDouble(PyList_GetItem(list2,i));
	}
	Py_DECREF(Hlist);
	Py_DECREF(list1);
	Py_DECREF(list2);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static double CallUtil(size_t n,double *x,void* f)
{
	PyObject *xlist=PyList_New(n);
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	double dresult=0;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
	}
	arglist = Py_BuildValue("(lO)",n,xlist);
	result = PyObject_CallObject(func,arglist);
	Py_DECREF(xlist);
	Py_CLEAR(xlist);
	Py_DECREF(arglist);
	if(result)
	{
		dresult=PyFloat_AsDouble(result);
		Py_CLEAR(result);
	}
	return dresult;
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static void CallModC(size_t n,double *x,double *c,void* f)
{
	PyObject *xlist=PyList_New(n);
	PyObject *clist=PyList_New(n);
	double *cp=c;
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
		PyList_SetItem(clist,i,PyFloat_FromDouble(*cp++));
	}
	arglist = Py_BuildValue("(lOO)",n,xlist,clist);
	result = PyObject_CallObject(func,arglist);
	cp=c;
	for(i=0;i<n;++i)
	{
		*cp++ = PyFloat_AsDouble(PyList_GetItem(clist,i));
	}
	Py_DECREF(xlist);
	Py_DECREF(clist);
	Py_CLEAR(xlist);
	Py_CLEAR(clist);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static void CallModQ(size_t n,double *x,double *Hmod,void* f)
{
	PyObject *xlist=PyList_New(n);
	PyObject *clist=PyList_New(n*(n+1)/2);
	double *cp=Hmod;
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
	}
	for(i=0;i<n*(n+1)/2;++i)
	{
		PyList_SetItem(clist,i,PyFloat_FromDouble(*cp++));
	}
	arglist = Py_BuildValue("(lOO)",n,xlist,clist);
	result = PyObject_CallObject(func,arglist);
	cp=Hmod;
	for(i=0;i<n*(n+1)/2;++i)
	{
		*cp++ = PyFloat_AsDouble(PyList_GetItem(clist,i));
	}
	Py_DECREF(xlist);
	Py_DECREF(clist);
	Py_CLEAR(xlist);
	Py_CLEAR(clist);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	
//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static void CallModAb(size_t n,size_t m,double *x,double*y,double *J,double*H,double*g,void* f)// Get the Jacobian and first derivatives of constraints f(x)=0
{
	PyObject *xlist=PyList_New(n);
	PyObject *ylist=PyList_New(m);
	PyObject *Jlist,*Hlist;
	PyObject *glist=PyList_New(m);
	double *cp=J;
	size_t i,nn=n*(n+1)>>1,nm=n*m;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
	}
	for(i=0;i<m;++i)
	{
		PyList_SetItem(ylist,i,PyFloat_FromDouble(*y++));
	}
	cp=g;
	for(i=0;i<m;++i)
	{
		PyList_SetItem(glist,i,PyFloat_FromDouble(*cp++));
	}
	if(J)
	{
		cp=J;
		Jlist=PyList_New(nm);
		for(i=0;i<nm;++i)
		{
			PyList_SetItem(Jlist,i,PyFloat_FromDouble(*cp++));
		}
	}
	else
		Jlist=PyList_New(0);
	if(H)
	{
		cp=H;
		Hlist=PyList_New(nn);
		for(i=0;i<nn;++i)
		{
			PyList_SetItem(Hlist,i,PyFloat_FromDouble(*cp++));
		}
	}
	else
		Hlist=PyList_New(0);
	arglist = Py_BuildValue("(llOOOOO)",n,m,xlist,ylist,Jlist,Hlist,glist);
	result = PyObject_CallObject(func,arglist);
	if(J)
	{
		cp=J;
		for(i=0;i<nm;++i)
		{
			*cp++ = PyFloat_AsDouble(PyList_GetItem(Jlist,i));
		}
	}
	if(H)
	{
		cp=H;
		for(i=0;i<nn;++i)
		{
			*cp++ = PyFloat_AsDouble(PyList_GetItem(Hlist,i));
		}
	}
	cp=g;
	for(i=0;i<m;++i)
	{
		*cp++ = PyFloat_AsDouble(PyList_GetItem(glist,i));
	}
	Py_DECREF(xlist);
	Py_DECREF(ylist);
	Py_DECREF(Jlist);
	Py_DECREF(Hlist);
	Py_DECREF(glist);
	Py_CLEAR(xlist);
	Py_CLEAR(ylist);
	Py_CLEAR(Jlist);
	Py_CLEAR(Hlist);
	Py_CLEAR(glist);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static double Call1D(double x,void* f)
{
	PyObject* func = (PyObject*) f;
	double back;
	PyObject* arglist = Py_BuildValue("(d)",x);
	PyObject* result = PyObject_CallObject(func,arglist);
	Py_DECREF(arglist);
	if(result)
	{
		back = PyFloat_AsDouble(result);
		Py_CLEAR(result);
	}
	return back;
}	

//_____________________________________________________________________________________
static PyObject* l_output_helper(PyObject* target, PyObject* o)
{//We're trying to add o to list target even if there is no target
//I don't think there is any point to this
    PyObject*   o2;
    if(!target)
	{                   
        target = o;printf("target was 0\n");
    }
	else if(target == Py_None)
	{  
        Py_DECREF(Py_None);
        target = o;printf("target was Py_None\n");
    }
	else
	{                         
        if(!PyList_Check(target))
		{
            o2 = target;printf("target wasn't a list\n");
            target = PyList_New(0);
            PyList_Append(target,o2);
		    Py_XDECREF(o2);
        }
        PyList_Append(target,o);
		Py_XDECREF(o);
    }
    return target;
}
#endif
#ifdef SWIGCSHARP
#if defined( WIN32 ) || defined( __SYSNT__ )
#define MYSTDCALL __stdcall
#else
#define MYSTDCALL
#endif
static double Call1D(double x,void* f)
{
	double (MYSTDCALL *func)(double)  =(double (MYSTDCALL *)(double ))f;
	return func(x);
}	
static void CallHmul(dimen n,dimen n1,dimen n2,dimen n3,double* H,double *x,double *y,void* f)
{
	void (MYSTDCALL *func)(dimen,dimen,dimen,dimen,vector,vector,vector)  =(void (MYSTDCALL *)(dimen,dimen ,dimen,dimen,vector,vector ,vector))f;
	func(n,n*(n+1)/2,n2,n3,H,x,y);
}
static double CallUtil(dimen n,double *x,void* f)
{
	double (MYSTDCALL *func)(dimen,vector)  =(double (MYSTDCALL *)(dimen ,vector ))f;
	return func(n,x);
}
static void CallModC(dimen n,double *x,double *c,void* f)
{
	void (MYSTDCALL *func)(dimen,vector,vector)  =(void (MYSTDCALL *)(dimen ,vector ,vector))f;
	func(n,x,c);
}
static void CallModQ(dimen n,double *x,double *q,void* f)
{
	void (MYSTDCALL *func)(dimen,vector,dimen,vector)  =(void (MYSTDCALL *)(dimen ,vector ,dimen,vector))f;
	func(n,x,n*(n+1)/2,q);
}
static void CallModAb(dimen n,dimen m,double *x,double *y,double *J,double *H,double*g,void* f)
{
	void (MYSTDCALL *func)(dimen,dimen,vector,vector,dimen,vector,dimen,vector,vector)  =(void (MYSTDCALL *)(dimen,dimen,vector,vector,dimen,vector,dimen,vector,vector))f;
	if(J&&!H)func(n,m,x,y,n*m,J,0,H,g);
	else if(!J&&H)func(n,m,x,y,0,J,n*(n+1)/2,H,g);
	else if(!J&&!H)func(n,m,x,y,0,J,0,H,g);
	func(n,m,x,y,n*m,J,n*(n+1)/2,H,g);
}
#endif


typedef double real;
typedef double* vector;
typedef double* matrix;
#if defined(__SYSNT__) ||defined(MSDOSS)||defined(_LP64)
typedef unsigned long dimen;
typedef long short_scl;
typedef long Integer;
#else
typedef unsigned int dimen;
typedef int short_scl;
typedef int Integer;
#endif



    extern "C" void MCAR(unsigned long n,unsigned long nf,vector w,vector alpha,vector FL,vector SV,vector FC,vector MC)
    {
        vector Q=0,MCTR=new double[n],MCRR=new double[n],FMCRR=0,FMCTR=0,FX=0,RFX=0,bbeta=new double[n+1];
        double risk=0,arisk=0,Rrisk=0,rreturn=0,areturn=0,Rreturn=0;
        PropertiesC(n,nf,0,w,alpha,0,Q,&risk,&arisk,&Rrisk,
									&rreturn,
                                    &areturn,&Rreturn,
                                    MC,MCTR,MCRR,FMCRR,
                                    FMCTR,bbeta,FX,RFX,
                                    FL,FC,SV,0,0);
        delete[] MCTR;
        delete[] MCRR;
        delete[] bbeta;
    }
    extern "C" void FX_get(unsigned long n,unsigned long nf,vector w,vector FL,vector SV,vector FC,vector FX)
    {
        vector Q=0,MCAR=new double[n],MCTR=new double[n],MCRR=new double[n],FMCRR=0,FMCTR=new double[n+nf],alpha=0,RFX=0,bbeta=new double[n+1];
        double risk=0,arisk=0,Rrisk=0,rreturn=0,areturn=0,Rreturn=0;
        PropertiesC(n,nf,0,w,alpha,0,Q,&risk,&arisk,&Rrisk,
									&rreturn,
                                    &areturn,&Rreturn,
                                    MCAR,MCTR,MCRR,FMCRR,
                                    FMCTR,bbeta,FX,RFX,
                                    FL,FC,SV,0,0);
        delete[] MCAR;
        delete[] MCTR;
        delete[] MCRR;
        delete[] bbeta;
        delete[] FMCTR;
    }
    extern "C" short SimpleOpt(unsigned long n,long nfac,int ls,int full,vector SV,vector FL,vector FC,
    vector w, unsigned long m, vector L, vector U, vector A,vector alpha,double gamma, double*ogamma,double minRisk,double maxRisk,
    double five, double ten, double forty, char** names)
    {
        int log = 2;
        char* logfile = (char*)"JSlog";
        gamma=gamma>=1.0?gamma-1e-15:gamma;
        short back = Optimise_internalCVPAFblSaMSoftQ(n,nfac,names,w,m,
									A,L,U,alpha,
									0,0,gamma,0,
									-1.0,0,0,-1.0,n,
									-1,0,0,-1.0,
									-1.0,
									ls,full,-1.0,-1.0,
									0,0,0,0,
									0,0,1.0,
									0,0,0,
									0,0,0,0,0,
									FC,FL,SV,minRisk,maxRisk,
									ogamma,0,log,logfile,
									0,1,
									-1,-1,
									-1,-1,1,1,
									1,0.0,0,0,
									1,0,0,0,0,
									0,0,0,0,0,five,ten,forty,0);   
        return back;    
    }
    extern "C" void testchars(int n,char** in,char** out)
    {
        int i,l1,l2,j;
        for(i=0;i<n;++i){
            l1=strlen(in[i]);
            l2=strlen(out[i]);
            printf("%s\n",in[i]);
            printf("Before %s\n",out[i]);
            for(j=0;j<l2;++j)
            {
               if(j<l1)out[i][j]=in[i][j];
            }
            printf("Changed %s\n",out[i]);
        }
    }

extern "C" void test2dlist(size_t n,size_t m,double*TWOD)
{
	size_t i,j;
	printf("n=%zd m=%zd\n",n,m);
	for(i=0;i<n;++i)
	{
		for(j=0;j<m;++j)
		{
			printf("i=%zd,j=%zd\t%f\n",i,j,TWOD[i+j*n]);
			TWOD[i+j*n]*=2;
		}
	}
}
extern "C" void Sym_multT(size_t n, vector S, vector x, vector w_opt)
{
	dsmxmulvT(n, S, x, w_opt);
}
extern "C" void Sym_mult(size_t n, vector S, vector x, vector w_opt)
{
	dsmxmulv(n, S, x, w_opt);
}
extern "C" double ddot(size_t n1,vector a1,size_t ia,vector x1,size_t ix,size_t astart=0,size_t xstart=0)
{
	return BITA_ddot(n1,a1+astart,ia,x1+xstart,ix);
}
extern "C" void GetOrder(size_t n,double* a,size_t* bb1,int abs=0,unsigned char*bad=0)
{
	std::valarray<unsigned char> dropbad;
	if(!bad)
	{
		dropbad.resize(n);
		dropbad=(unsigned char)0;
		bad=&dropbad[0];
	}
	if(abs)
		getorder(n,a,bb1,bad);
	else
		getordereig(n,a,bb1,bad);
/*	for(size_t i = 0;i<n;++i)
	{
		std::cout << bb1[i] << std::endl;
	}*/
}

extern "C" void PatternMin(unsigned long n,double *w_opt,double *step,
	double *ynewlow,double scale,pUtility calcfx,void*info,short iprint=1,unsigned long maxit=20,short icon=2)
{
	std::valarray<double> w(n*(n+4));
	patternmin(n,w_opt,step,ynewlow,scale,iprint,icon,maxit,&w[0],calcfx,info);
}
extern "C" void dumpvec(size_t n,const char* name,double* A,const char* file)
{
	std::ofstream outFile;
	outFile.open(file,std::ios_base::app);
	if(outFile.fail())
	{
		std::cout<<"Cannot open "<<file<<std::endl;
		return;
	}
	dumpvector(n,name,A,outFile);
	outFile.close();
	outFile.clear();
}
extern "C" void dumpsvec(size_t n,const char* name,char** A,const char* file)
{
	std::ofstream outFile;
	outFile.open(file,std::ios_base::app);
	if(outFile.fail())
	{
		std::cout<<"Cannot open "<<file<<std::endl;
		return;
	}
	dumpvector(n,name,A,outFile);
	outFile.close();
	outFile.clear();
}

extern "C" void ReorderS(size_t n, size_t* order,vector QFIX);
extern "C" void ReorderSquare(size_t n,size_t* order,vector QFIX);
extern "C" void Reorder(size_t n, size_t* order,vector QFIX);
extern "C" void Reorder_mult(size_t n, size_t* order,vector QFIX,size_t m);
extern "C" void getBIMcov(char* factorfile,char* covfile,size_t *BIMnf,char** factors,vector QFIX);
extern "C" void procBIMcov(char* factorfile,char* covfile,char* outfile);
extern "C" void procBIMmod(char* modelfile,char* facretfile,char* expfile,char* svfile,char* outfile);
extern "C"  void digitise(size_t n,vector w,vector initial,vector minlot,vector sizelot,vector digit);
extern "C" size_t roundcount(size_t n,vector w,vector initial,vector minl,vector sizl,double *trw,vector naive);
extern "C" int	fix_covariancem(dimen n,vector QFIX);
extern "C" short InvQ_d(dimen n,vector Q,vector d,vector Qm1d);
extern "C" short ConstrRegress(dimen n,dimen m,vector Q,vector d,vector w_opt,vector L,vector U,vector AAA);
extern "C" int	pickout(dimen nstocks,char **stocklist,dimen M_nstocks,char** M_stocklist,vector QFIX,size_t*Order=0);
extern "C" int	pickoutstrings(dimen nstocks,char **stocklist,dimen M_nstocks,char** M_stocklist,char** Q,size_t*Order=0);
extern "C" char*	Return_Message(int ifail);
extern "C" char*	MultiStageMessage(int ifail);
extern "C" char*	SOCPlstestMessage(int ifail);
extern "C" short eigendecomp(dimen n, vector eigvec, vector eigval, dimen itmax);
extern "C" void dldlfactNULL(dimen n, vector S);
extern "C" char* expire_date(char*asetup);
extern "C" char* version(char*asetup);
extern "C" char* cversion(char*asetup);
extern "C" char* component_key(char*asetup);
extern "C" int	days_left(char **aversion);
extern "C" void Extract_Factor_Information(dimen nstocks,dimen numfac,dimen Mnstocks,
								vector FLOAD,vector SSV,char** stocklist,
								vector MFLOAD,vector MSV,char** Mstocklist);
extern "C" void CurrencyProcessFL(size_t nf,size_t n,vector FL,vector psi,vector FLn);


extern "C" void winsorise(unsigned long noOfPts, double *values, int winsorOption, double scaling, 
			   double *returnArray);
extern "C"  double percentile(unsigned long noOfPts, double *values, int num);
extern "C"  double average(unsigned long s, double *xx);
extern "C"  double stddev(unsigned long s, double *xx);
extern "C"  double covariance1(double *xx, double *y, double *w, unsigned long s);
extern "C"  void mAve(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mSum(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mProd(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mCovar(unsigned long noOfPts, double *values1, double *values2, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mCorrel(unsigned long noOfPts, double *values1, double *values2, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mVar(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mStddev(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cAve(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cSum(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cProd(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cCovar(unsigned long noOfPts, double *values1, double *values2, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cCorrel(unsigned long noOfPts, double *values1, double *values2, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cVar(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void fake_ETL_data(dimen n, dimen tlen, vector w, vector DATA, vector fakeDATA,int plus);
extern "C" void VARproperties(dimen n, dimen number_included, dimen tlen, vector w, vector DATA, double*ETL,
	double*VAR, vector ETLbreakdown, vector etl_per_asset, vector VARbreakdown,vector var_per_asset);
extern "C"  void cStddev(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void prodArrays(unsigned long noOfPts, double *values1, double *values2, double *returnArray);
extern "C"  double wAve(unsigned long noOfPts, double *values, double *weights);
extern "C"  double wAveProd(unsigned long noOfPts, double *values1, double *values2, double *weights);
extern "C"  double wCovar(unsigned long noOfPts, double *values1, double *values2, double *weights);

extern "C" double BITA_ddot(dimen n1,vector a1,long m1,vector b1,long m2);
extern "C" double ddotvec(dimen n,vector a,vector b);
extern "C" void genmult(size_t nl,size_t ng,vector YY,vector SSS,vector YS);
extern "C" void getFSF(size_t n,size_t m,vector S,vector YS,vector FSF);
extern "C" double DOT(size_t n,vector a,vector b);
extern "C" void combineS(size_t n,vector q,vector g,vector U);
extern "C" void	symm_inverse_x(size_t n,vector Q,vector x,vector Qm1x);
extern "C" void vec2symm(size_t n,vector vec,vector symm);
extern "C" void symmsymm(size_t n,vector S1,vector S2,vector S1S2);
extern "C" void Sinv_X(size_t n,vector S,vector X,vector SiX);
extern "C" double A1MA2(size_t n,vector A1,vector A2,vector M);
extern "C" void square2symm(size_t n,vector S);
extern "C" void square2sqsymm(size_t n,vector S);
extern "C" void gensymm(size_t n,vector M,vector S,vector MS);
extern "C" void Sinv_M(size_t n,vector S,vector M);
extern "C" double AdotSiAX(size_t n,vector Ai,vector S,vector Aj,vector X);
extern "C" double AdotSi(size_t n,vector A,vector S);
extern "C" void SiAX(size_t n,vector S,vector A,vector X,vector SAX);
extern "C" void Sisymm(size_t n,vector S,vector Si);
extern "C" short OptSemi(size_t n,size_t m,vector w_opt,vector g,vector Q,vector AAA,vector B);
extern "C" short OptSemiGen(size_t N,size_t M,vector X,vector C,vector AA,vector BB,size_t top=100);
extern "C" void vecvec2symmat(size_t n,vector b,vector a,vector AA);
extern "C" void Amake(size_t n,vector base,vector a,double b,vector AA,double B=10.0);
extern "C" short OptFundClass(size_t nf,size_t nc,vector target,double value,
							  double outvalue,vector wW,double factor=0.25,int log=0);
extern "C" void Factor2Cov(size_t n,size_t nfac,vector FFC,vector FLOAD,vector SSV,vector QFIX);
extern "C" void Factor2Var(size_t n,size_t nfac,vector FFC,vector FLOAD,vector SSV,vector Variance);
extern "C" int opt_fix(dimen n,vector QFIX,vector mask,int print=0,double tol=0);
extern "C" int eig_fix(dimen n,vector QFIX);
extern "C" int quad_fix(dimen n,vector QFIX,vector mask);
extern "C" void basic_factor_global_local_attribution(size_t n,size_t nl,size_t ng,vector FLOAD,vector w,
											 vector Y,vector G,vector S,vector YS,
											 vector FFC,vector SSV,
											 vector XMCTR,vector FFMCTR,vector SMCTR,
											 vector IsFVar,vector IsXVar,
											 vector IsFVarpg,vector GFX,vector FMCTRpg,vector IsXVarga,
											 vector FFX,double*facrisk,int print=0,vector FCgl=0);

extern "C" void basic_factor_global_local_attribution1(size_t n,size_t nl,size_t ng,
																 vector FLOAD,vector w,
																 vector Y,vector G,vector S,vector YS,
																 vector XMCTR,vector FFMCTR,
																vector IsFVar,vector IsXVar,
																vector IsFVarpg,vector GFX,
																vector FMCTRpg,vector IsXVarga,
																 vector FFX,double*facrisk,int print);
extern "C" double xCx(size_t n,vector Q,vector w);
extern "C" double gausspdf(double mean=0,double st=1,size_t reseed=0);
extern "C" void resampfront
(dimen n,long nfac,char** names,dimen m,
 vector AAA,vector L,vector U,vector alpha,
 vector benchmark,vector Q,vector Iinitial,
 real delta,int revise,vector FFC,vector FLOAD,vector SSV,dimen ncomp,vector Comp,
 int logg,char* logfile,double gamma,size_t nsamp,vector randrisk,vector randreturn,
 size_t npoints=0,vector risks=0,vector rreturns=0,vector mask=0);
extern "C" void manyVars(size_t n,vector Q,vector x,vector AssetVars,
									 size_t nmask=0,size_t* masks=0,vector MaskVars=0);
extern "C" void ManyVarsD(size_t n,vector SV,vector x,vector AssetVars,size_t nmask=0,size_t* masks=0,vector MaskVars=0);
extern "C" void manyVarsX(size_t n,size_t nf,vector Q,vector x,vector AssetVars,
									 size_t nmask=0,size_t* masks=0,vector MaskVars=0);
extern "C" void dmxtmulv(dimen n, dimen m, vector G, vector F, vector GFX);
extern "C" void dmxmulv(dimen n, dimen m, vector G, vector F, vector GFX);
extern "C" void dmxtmultv(dimen n, dimen m, vector G, vector F, vector GFX);
extern "C" void BITA_dgemv(char *trans, size_t m, size_t n, double alpha, double *a, size_t lda, double *x, size_t incx, double beta, double *y, size_t incy);
extern "C" void SriskAttribution(size_t n,vector SSV,vector x,size_t nsect,
										   size_t* sectdef,vector Rctr,vector TRctr);
extern "C" void SvarianceAttribution(size_t n,vector SSV,vector x,size_t nsect,
										   size_t* sectdef,vector Rctr,vector TRctr);
extern "C" void FriskAttribution(size_t n,size_t nl,vector FFC,vector FLOAD,vector x,
										   size_t nsect,
										   size_t* sectdef,size_t ng,vector G,vector YS,
										   size_t nfgroup,size_t* fgroupdef,
										   size_t nggroup,size_t* ggroupdef,
										   vector TotalRisks,vector GlobalRisks,vector LocalRisks,
										   vector TotalBreak,vector GlobalBreak,vector LocalBreak);
extern "C" size_t FvarianceAttribution(size_t n,size_t nl,vector FFC,vector FLOAD,vector x,
										   size_t nsect,
										   size_t* sectdef,size_t ng,vector G,vector YS,
										   size_t nfgroup,size_t* fgroupdef,
										   size_t nggroup,size_t* ggroupdef,
										   vector TotalRisks,vector GlobalRisks,vector LocalRisks,
										   vector TotalBreak,vector GlobalBreak,vector LocalBreak,
										   int stdev=0,double*Mineg=0);

extern "C" void FexposureAttribution(size_t n,size_t nl,vector FLOAD,vector x,
											   size_t nsect,size_t* sectdef,size_t nfgroup,
											   size_t* fgroupdef,vector TotalExp,
											   vector TotalBreak);
extern "C" void MCTR_Beta(char** Modelnames,size_t mn,char** names,size_t n,size_t nf,
									vector FFC,vector FLOAD,vector SSV,vector w,vector benchmark,
									vector MMCTR,vector Bbeta);
extern "C" int SOCPopt1(size_t n,size_t m,size_t *md,vector c,vector A,vector b,vector w,
								 double delt=1e-2,double nu=10);
extern "C" int SOCPopt(size_t n,size_t m,size_t *md,vector c,vector A,vector b,vector w_opt,
double delt=1e-2,double nu=1.1,size_t maxiter=1000,double RR=2,double gapconv=1e-8,int log=0);
extern "C" int SOCPgenopt(size_t n,size_t m,size_t *md,vector c,vector A,vector b,
									vector w,size_t nb,vector z,double delt=1e-2,double nu=10,
									size_t maxiter=1000,double gapconv=1e-8,int log=0);
extern "C" void testSOCPinf();
extern "C" void SOCPinfeasHomogtDUMP(size_t n,size_t m,int *ncone,vector c,vector A,
										 vector b,vector x,vector y,vector s,double *tau,
										 double *kappa,size_t maxit,double beta,double delta,double ccomp=1e-6,
										 double cgap=1e-6,int signtest=0,double changeratio=4,
										 double rhoconv=1e-8,int log=0,char*outfile=0,char*SOCPdump=0);
extern "C" short SOCPinfeasHomogt(size_t n,size_t m,int *ncone,vector c,vector A,
										 vector b,vector x,vector y,vector s,double *tau,
										 double *kappa,size_t maxit=100,double beta=1e-8,double delta=.5,
										 double ccomp=1e-8,double cgap=1e-8,int signtest=0,
										 double changeratio=4.0,double rhoconv=1e-8,int log=0,
										 char*outfile=0,char*SOCPdump=0);
extern "C" void RootProcessQ(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" void RootQ(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" void RootQgram(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" void RootQold(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" int fixA(size_t n,vector A,short_scl*p,int overite=0);
extern "C" void DroppingOut(size_t N,size_t n,vector Q,vector initial,double *modVar,
									  vector centre_shift);

extern "C" short SOCPlstest(size_t n,size_t m,vector w_opt,vector AAA,vector Q,
									 vector alpha,int full,double rmin,double rmax,
									 vector L,vector U,double val,double TopRisk,
									 vector dalpha,double MaxDalpha,size_t nabs,vector Abs_A,
									 vector Uabs,vector bench=0,vector initial=0);
extern "C" short SOCPRobust(size_t n,size_t m,vector w_opt,vector AAA,vector L,vector U,
									  long nf,vector SSV,vector FLOAD,vector FFC,vector alpha,
									  vector meanFE,vector covFE,double maxmeanFE,
									  double maxstderrorFE,double gamma,double maxRisk=-1,
									  vector bench=0,vector initial=0,int mFE=1,int rFE=1,
									  vector sectors=0);
extern "C" short SOCPlsRobust(size_t n,size_t m,vector w_opt,vector AAA,
										long nf,vector SSV,vector FLOAD,vector FFC,
									 vector alpha,int full,double rmin,double rmax,
									 vector L,vector U,double val,double TopRisk,
									 vector dalpha,double MaxDalpha,vector covalpha,double MaxValpha,
									 size_t nabs,vector Abs_A,
									 vector Uabs,vector bench,vector initialm,
									 vector initials,int signtest=0,int fast=0);
extern "C" short SOCPlsRobustl(size_t n,size_t m,vector w_opt,vector AAA,
										long nf,vector SSV,vector FLOAD,vector FFC,
										vector alpha,int full,double rmin,double rmax,
										vector L,vector U,double val,double TopRisk,
										vector dalpha,double MaxDalpha,vector covalpha,double MaxValpha,
										size_t nabs,vector Abs_A,vector Labs,
										vector Uabs,
										vector bench,vector initialm,vector initials,
										int signtest,int fast=0,int maxrobust=0,char*SOCPdump=0);
extern "C" short SOCPlsRobustlC(size_t n,size_t m,vector w_opt,vector AAA,
										long nf,vector SSV,vector FLOAD,vector FFC,
										vector alpha,int full,double rmin,double rmax,
										vector L,vector U,double val,double TopRisk,
										vector dalpha,double MaxDalpha,
										size_t nabs,vector Abs_A,vector Labs,
										vector Uabs,
										vector bench,vector initial,
										int signtest,int fast=0,int maxrobust=0,
										char*SOCPdump=0,size_t ncomp=0,vector Composites=0,
										double mintrade=-1);
extern "C" void Projection(size_t n,size_t m,vector A,vector x,vector s,vector M);
extern "C" void CovarianceInverter(size_t n,vector C,vector QFIX,vector y=0,vector Qm1d=0);
extern "C" void RankingConstraints(size_t n,vector Q,vector rank,vector A,long nf=-1,vector FL=0,
									vector SV=0);
extern "C" short SOCPRanked(size_t n,size_t m,vector w_opt,vector A,vector L,
									vector U,long nf,vector SV,vector FL,vector FC,
									vector alpha,double maxRisk,
									vector bench=0,int justalpha=0);
extern "C" int dsptrf(char *uplo, size_t n, double *ap, short_scl*
	ipiv);
extern "C" int dsptrs(char *uplo, size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" int applyA(char *uplo, size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" int applyrootA(size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" int applyinverserootA(size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" void ReorderNames(size_t n, size_t* order,char** stocklist);
extern "C" short LPinterior(size_t n,size_t m,vector x,vector y,vector s,vector c,
			vector AAA,vector b,int*sign=0,int homo=1,vector L=0,double eps=1e-8,
			size_t nn=0,size_t mm=0,size_t ncnc=0,size_t nce=0,size_t nsns=0,
			size_t*cmap=0,size_t*ccmap=0,size_t*wmap=0,size_t*wwmap=0,
			pHmul Qxmul=0,void *Hinfo=0,vector Q=0,vector A=0);
extern "C" short QPopt(size_t n,size_t m,vector w_opt,vector c,vector AAA,
							  vector L,vector U,vector Q,pHmul Qwmul,void *Hinfo=0,
							  double eps=1e-8,double toobig=1e10,short homog=1);
extern "C" short LPopt(size_t n,size_t m,vector w_opt,vector c,vector AAA,
							  vector L,vector U,double eps=1e-8,double toobig=1e10,short homog=1);
extern "C" short QPbySeqLP(size_t n,size_t m,vector w_opt,vector c,vector AAA,
							  vector L,vector U,vector Q,pHmul Qwmul,void *Hinfo=0,
							  double lpeps=1e-8,double toobig=1e10,double qpeps=1e-5,short homog=1);
extern "C" short QPinterior(size_t n,size_t m,vector x,vector y,vector s,vector c,
			vector AAA,vector b,int*sign=0,int homo=1,vector L=0,double eps=1e-8,
			size_t nn=0,size_t mm=0,size_t ncnc=0,size_t nce=0,size_t nsns=0,
			size_t*cmap=0,size_t*ccmap=0,size_t*wmap=0,size_t*wwmap=0,
			pHmul Qxmul=0,void *Hinfo=0,vector Q=0,vector A=0);
extern "C" void	facmul(size_t n,size_t nf,double *H,vector x,vector w_opt);
extern "C" void	facmuli(size_t n,size_t nf,double *H,vector x,vector w_opt);
extern "C" void FastInverseFactorModelProcess(size_t n,size_t nf,vector FLOAD,vector FFC,vector SSV,vector QMATRIX);
extern "C" void MakeUU(size_t n,vector M,vector UU);
extern "C" void fastInverse(size_t n,vector M,vector DIAG,vector x,vector y);
extern "C" short OmegaOpt(size_t n,size_t tlen,double*DATA,char** stocknames,vector w_opt,
			double C,double R,double Low=0,double*Gain=0,double*Loss=0,int log=0);
extern "C" double FindR(size_t n,size_t tlen,double*DATA,char** stocknames,
								 double Low);
extern "C" short RobustOpt(size_t n,size_t m,vector w_opt,vector alpha,vector A,
				vector L,vector U,
				int full,double rmin,double rmax,double val,
				size_t nabs,vector Aabs,vector Labs,vector Uabs,
				int signtest,size_t nquad,int*qtype,vector cov,vector Uq,
				vector centres,size_t ncomp=0,vector Composites=0,int fillin=1);
extern "C" short RobustOptU(size_t n,size_t m,vector w_opt,vector alpha,vector A,
				vector L,vector U,
				int full,double rmin,double rmax,double val,
				size_t nabs,vector Aabs,vector Labs,vector Uabs,
				int signtest,size_t nquad,int*qtype,vector cov,vector Uq,
				vector centres,size_t ncomp=0,vector Composites=0,int fillin=1,vector Ualpha=0);
extern "C" void QuadCVals(size_t n,vector w,vector alpha,double*areturn,size_t nquad,int*qtype,vector cov,vector Uq,
									 vector centres,vector U,
									 size_t ncomp=0,vector Composites=0,int fillin=1);
extern "C" void IncreaseL(size_t n,size_t m,size_t ncomp,vector L,vector Composites);
extern "C" short OmegaSVOpt(size_t n,size_t tlen,double*DATA,char** stocknames,vector w_opt,
									double C,double R,double Low,double*Gain,double*SVar,int log);
extern "C" short OmegaGeneral(size_t n,size_t tlen,size_t m,double*Omega_DATA,char** stocknames,vector w_opt,
									double C,double R,vector L,vector U,vector AAA,double*Top,double*Bot,
									double*Prob,int log=0,
									int useSV=0,char*outfile=0,double gpower=1.0,double lpower=1.0);
extern "C" short OmegaGeneralP(size_t n,size_t tlen,size_t m,double*Omega_DATA,char** stocknames,vector w_opt,
									double C,double p,vector L,vector U,vector AAA,
									double*Top,double*Bot,double* Prob,double*Rbase,
									int log=0,int useSV=0,char*outfile=0);
extern "C" void OmegaGeneralPDump(size_t n,size_t tlen,size_t m,double*Omega_DATA,char** stocknames,vector w_opt,
									double C,double p,vector L,vector U,vector AAA,
									double*Top,double*Bot,double* Prob,double*Rbase,
									int log=0,int useSV=0,char*outfile=0);
extern "C" void OmegaProps(size_t n,size_t tlen,vector Omega_DATA,
									 vector w,double R,double* Prob,
									 double* Top,double* Bot,vector gains,
									 vector losses,vector isolated_gains=0,vector isolated_losses=0);
extern "C" short QPbySOCP(size_t n,size_t m,vector w_opt,vector A,vector L,vector U,
						  vector alpha,vector Q,vector S,double tRad);
extern "C" void OmegaH(size_t n,size_t tlen,vector DATA,vector w,double R,double*Omega,vector Grad,vector H);
extern "C" void clean_w(size_t n,vector w);
extern "C" double trace(size_t n,vector Q);
extern "C" short anneal(size_t n,vector w_opt,vector L,vector U,vector step,
								  pUtility calcfx,void*info,double t=5.0,double rt=.5,int ns=20);
extern "C" void ThetaMulti(size_t n,long nfac,size_t m,char**stocknames,size_t T,vector alpha,vector benchmark,
vector Initial,vector gamma,vector delta,vector L,vector U,vector A,vector FC,vector FL,vector SV,vector d,vector Th);
extern "C" void Lsmooth(size_t n,size_t  m,vector w_opt,vector a,vector A,vector b,double gamma=1,double eps=1e-6,int*sign=0,vector L=0,vector Q=0,size_t nfac=0,vector FL=0,vector FC=0,vector SV=0);
extern "C" void SemiVar(size_t n,size_t tlen,vector Omega_DATA,
									 vector w,double R,double* Prob,
									 double* Top,double* areturn,double* Bot);
extern "C" short GeneralLongOpt(size_t n,size_t m,char**stocknames,vector w_opt,vector AAA,vector L,vector U,
	pUtility f_val,pModC g_val,pModQ h_val,void *fvinfo,void *gvinfo,void *hvinfo,int log=0);
extern "C" short LPhelper(size_t n,size_t m,vector w_opt,vector AAA,vector c,vector L,vector U,int log=1,char*logfile=0);
extern "C" short LPgeneral(size_t n,size_t m,vector w_opt,vector AAA,vector c,vector L,vector U,size_t nabs,
									 vector Aabs,vector Labs,vector Uabs,vector initial,vector buy,vector sell,
									 double delta,double LVU=-1,double LVL=-1,double rmin=-1,double rmax=-1,int log=1,char*logfile=0,
									 double rmin_base=-1,double rmax_base=-1);
extern "C" void RobustOptDump(size_t n,size_t m,vector w,vector alpha,vector A,
									 vector L,vector U,
									 int full,double rmin,double rmax,double val,
									 size_t nabs,vector Aabs,vector Labs,vector Uabs,
									 int signtest,size_t nquad,int*qtype,vector cov,vector Uq,
									 vector centres,size_t ncomp,vector Comps,int fillin,char*outfile);
extern "C" short LPFullNewton(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector b,double xci=1,double tau=0.125,double eps=0);
extern "C" short LPbySOCPp(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector b);
extern "C" short LPbySOCP(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector L,vector U);
extern "C" short LPstraight(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector L,vector U);
extern "C" short GainLossOpt(size_t n,size_t tlen,double*DATA,double*R,double C,double llambda,vector w_opt,size_t m,double*L,double*U,vector AAA,double gpower=1,double lpower=1,
									char**stocknames=0,double*alpha=0,long nf=-1,double*SV=0,double*FC=0,double*FL=0);
extern "C" short GainLossOptGen(size_t n,size_t tlen,double*DATA,double*R,double C,double llambda,vector w_opt,size_t m,double*L,double*U,vector AAA,double gpower=1,double lpower=1,
									char**stocknames=0,double*alpha=0,long nf=-1,double*SV=0,double*FC=0,double*FL=0);
extern "C" short  GLOptimise(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double C,double lambda,
				  double gpower,double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									real min_holding,real min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L);
extern "C" short  GLOptimiseR(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double C,double lambda,
				  double gpower,double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double*gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" short  GLOptimiseRC(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double C,double lambda,
				  double gpower,double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,int costs,double kappa,vector buy,vector sell,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double*gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" void GLProp(dimen n,char** stocknames,size_t tlen,double*DATA,double*R,
								 double gpower,double lpower,double*prob,double*Gain,double*Loss,vector w,vector MargGain,vector MargLoss);
extern "C" short_scl bunchf(short_scl n,double*C,short_scl*piv);
extern "C" short  MVLOptimise(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									real min_holding,real min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L);
extern "C" short  MVLOptimiseg(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									real min_holding,real min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double* gammaback);
extern "C" short  MVLOptimiseR(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double* gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" short  MVLOptimiseRC(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,int costs,double kappa,vector buy,vector sell,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double* gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" void GLO_internal_model(size_t n,size_t tlen,double*DATA,vector QBACK,vector alphaback);
extern "C" short CvarOptimise(size_t n,size_t tlen,double*DATA,size_t number_included,double CVar_averse,double getRisk,
				   char** stocknames,vector w_opt,size_t m,vector AAA,vector L,vector U,vector alpha,vector benchmark,
		vector Q,double gamma,vector initial,double delta,long basket,long trades,int revise,
		vector min_holding,vector min_trade,int m_LS,int Fully_Invested,double Rmin,double Rmax,int round,vector min_lot,vector size_lot,int*shake,
		double LSValue,size_t nabs,vector Abs_A,size_t mabs,dimen* I_A,
		vector Abs_U,double*ogamma,vector mask,int log,
		char* logfile,long longbasket,long shortbasket,double LSValuel,vector Abs_L);
extern "C" short CvarOptimiseCR(size_t n,size_t tlen,double*DATA,size_t number_included,double CVar_averse,double getRisk,
				   char** stocknames,vector w_opt,size_t m,vector AAA,vector L,vector U,vector alpha,vector benchmark,
		vector Q,double gamma,vector initial,double delta,long basket,long trades,int revise,
		vector min_holding,vector min_trade,int m_LS,int Fully_Invested,double Rmin,double Rmax,int round,vector min_lot,vector size_lot,int*shake,
		double LSValue,size_t nabs,vector Abs_A,size_t mabs,dimen* I_A,
		vector Abs_U,double*ogamma,vector mask,int log,
		char* logfile,long longbasket,long shortbasket,double LSValuel,vector Abs_L,int costs,vector buy,vector sell,int CVar_constraint,
		double CVarMin,double CVarMax,unsigned char relCvar);
extern "C" short CvarOptimiseC(size_t n,size_t tlen,double*DATA,size_t number_included,double CVar_averse,double getRisk,
				   char** stocknames,vector w_opt,size_t m,vector AAA,vector L,vector U,vector alpha,vector benchmark,
		vector Q,double gamma,vector initial,double delta,long basket,long trades,int revise,
		vector min_holding,vector min_trade,int m_LS,int Fully_Invested,double Rmin,double Rmax,int round,vector min_lot,vector size_lot,int*shake,
		double LSValue,size_t nabs,vector Abs_A,size_t mabs,dimen* I_A,
		vector Abs_U,double*ogamma,vector mask,int log,
		char* logfile,long longbasket,long shortbasket,double LSValuel,vector Abs_L,int costs,vector buy,vector sell,int CVar_constraint,
		double CVarMin,double CVarMax);
extern "C" double SemiVariance(size_t n,size_t tlen,double*DATA,vector w,vector benchmark=0);
extern "C" void GradSemiVariance(size_t n,size_t tlen,double*DATA,vector w,vector benchmark,vector gback);
extern "C" void HessSemiVariance(size_t n,size_t tlen,double*DATA,vector w,vector benchmark,vector QBACK);
extern "C" short  SemiVarOptimise(dimen n,char** stocknames,size_t tlen,double*DATA,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,
									int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minSV=-1,double maxSV=-1,
									double* gammaback=0,double five=-1,double ten=-1,double forty=-1,
									int*issues=0);
extern "C" short  SemiVarOptimiseT(dimen n,char** stocknames,size_t tlen,double*DATA,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,
									int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minSV=-1,double maxSV=-1,
									double* gammaback=0,double five=-1,double ten=-1,double forty=-1,
									int*issues=0);
extern "C" double CVarValue(size_t n,size_t tlen,double*DATA,size_t number_included,vector w);
extern "C" void  CVarGrad(size_t n,size_t tlen,double*DATA,size_t number_included,vector w,vector grad);
extern "C" double CVarValueO(size_t n,size_t tlen,double*DATA,size_t number_included,vector w);
extern "C" double CVarValuen(size_t n,size_t tlen,double*DATA,size_t number_included,vector w);
extern "C" short OptCVar(dimen nstocks,dimen m,dimen t,double beta,vector w_opt,vector DATA,vector lower,vector upper,vector A,int log=0,double*CVaR=0,double*VaR=0);
extern "C" short OptGL(dimen nstocks,dimen m,dimen t,vector R,vector w_opt,vector DATA,vector lower,vector upper,vector A,double C,int log=0,double*Gain=0,double *Loss=0);
extern "C" int AQAmake(size_t n,size_t m,vector A,vector Q,vector X,vector S,vector MAT);
extern  "C" int FixedAtEnd(size_t n,vector L,vector U,size_t *order);
extern "C" short SOCPportfolio(size_t n,size_t m,vector w_opt,vector L,vector U,vector AAA,vector alpha,
		vector benchmark=0,vector initial=0,vector buy=0,vector sell=0,int costs=0,double delta=-1,
		double psum=-1,double psumL=-1,double nsum=1,double nsumU=-1,double rmax=-1,double rmin=-1,
		size_t mabs=0,vector A_abs=0,vector L_abs=0,
		vector U_abs=0,vector FC=0,long nfac=-1,vector FL=0,vector SV=0,double maxrisk=-1,double maxarisk=-1,
		int meanstd=0,double meanstdl=0,double*lambda1=0,double* lambda2=0,double* lambda3=0,double*optvalue=0,
		char*inputData=0,int log=1,char*logfile=0,vector min_trade=0,vector min_hold=0,long basket=-1,long trades=-1,
		vector minlot=0,vector sizelot=0,double five=-1,double ten=-1,double forty=-1,int* issues=0);
extern "C" void getmacaddress(char *nnn=(char*)"eth0");
//extern "C" int remtime();
extern "C" short  Optimise_Entropy(dimen n,long nfac,char** stocknames,vector w_opt,dimen m,
									vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector QMATRIX,real gamma,real kappa,vector initial,
									real delta,long basket,
									long trades,int revise,vector min_holding,
									vector min_trade,
									int m_LS,int Fully_Invested,real Rmin,real Rmax,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									dimen ncomp,vector Composite,real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,vector Abs_U,
									vector FFC,vector FLOAD,vector SSV,double minRisk,double maxRisk,
									double* ogamma,vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									long tradebuy,long tradesell,
									double LSValuel,vector Abs_L);
extern "C" void	EntropyUtility(dimen n,long nfac,char** stocknames,vector w,
									  vector benchmark,vector initial,
									  vector Q,real gamma,real kappa,
									  vector alpha,real *tcost,real *utility,
									  vector gradutility,
									  dimen ncomp,
									  vector Composite);
extern "C" short  Optimise_EntropyU(dimen n,long nfac,char** stocknames,vector w_opt,dimen m,
									vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector QMATRIX,real MVlambda,real entropy_gamma,vector initial,
									real delta,long basket,
									long trades,int revise,vector min_holding,
									vector min_trade,
									int m_LS,int Fully_Invested,real Rmin,real Rmax,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									dimen ncomp,vector Composite,real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,vector Abs_U,
									vector FFC,vector FLOAD,vector SSV,double MVUmin,double MVUmax,
									double* ogamma,vector mask,int lg,char* logfile,
									long longbasket,long shortbasket,
									long tradebuy,long tradesell,
									double LSValuel,vector Abs_L);
extern "C" short OptimiseCrossEntropy(dimen n,long nfac,char** stocknames,vector w_out,dimen m,
									vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector QMATRIX,real MVlambda,real entropy_gamma,vector initial,
									real delta,long basket,
									long trades,int revise,vector min_holding,
									vector min_trade,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									vector FFC,vector FLOAD,vector SSV,double MVUmin,double MVUmax,
									double* ogamma,vector mask,int lg,char* logfile);
extern "C" void SDPsvec(size_t n,vector S,vector v);
extern "C" void SDPsMat(size_t n,vector v,vector S);
extern "C" int nullA(size_t m,size_t n,double *A,double*Z);
extern "C" short LPQN(size_t n,size_t m, vector w_opt,vector A,vector b,vector c);
extern "C" short GAUSS_NEWTON_Optimiser(size_t ncone,size_t*cone,size_t*typecone,size_t m,vector x,vector s,vector y,vector A,vector b,vector c);
extern "C" void packed2symm(Integer n,double*a);
extern "C" void symm2packed(Integer n,double*a);
extern "C" short Conic_General(size_t ncone,int*cone,int*typecone,size_t m,vector x,vector s,vector y,vector A,vector b,vector c,vector tau,vector kappa,double comptoll=1e-8,double gaptoll=1e-8,double stepmax=2e-2,int straight=0,int fastbreak=1,int log=0,char*outfile=0,int method=0);
extern "C" void get_w(size_t n,vector s,vector x,vector w);
extern "C" void WtransSDP(size_t n,vector A,vector w,vector WA,bool inv=false,bool squared=false);
extern "C" void applyXSDP(size_t n,vector x,vector a,vector xa);
extern "C" void applyXm1SDP(size_t n,vector x,vector a,vector xa);
extern "C" void SDPsymm2MCAR(size_t n,size_t nc,vector Q,vector A);
extern "C" void factor_model_process_inverse(dimen n,dimen nfac,vector Q,vector QMATRIX);
extern "C" void facmul_and_inv(dimen n,dimen nfac,vector Q,vector x,vector w_opt,int inv=0);
extern "C" double small_round(double eps);
extern "C" void make_indexM(Integer n,double*a,Integer*ia,Integer*ja,Integer*zerorank=0);
extern "C" int pull_BITA(Integer *n,double *dn,Integer *iju,Integer *ju,Integer *iu,double *un,Integer *il,Integer *jl,double *x,double *tolpiv,Integer *flag__,double *sign,Integer*pivot_nzp,Integer*pivot_nju);
extern "C" int sns_BITA(Integer *n,Integer *p,double *d__,Integer *iju,Integer *ju,Integer *iu,double *u,double *z__,double *b,double *tmp,Integer*pivot_nzp,Integer*pivot_nju);
extern "C" int ssf_BITA(Integer *mua,Integer *n,Integer *p,Integer *ip,Integer *ia,Integer *ja,
			Integer *iju,Integer *ju,Integer *iu,Integer *jumax,Integer *q,Integer *jl,
			Integer *flag__,Integer *lenju,Integer *lenu);
extern "C"	void A2U(Integer n,Integer*iu,Integer*ju,Integer*iju,double*a,double*U,Integer*p);
extern "C" void UseSparseCh(Integer n,double* M,double*b);
extern "C" short Conic_VeryGeneral(size_t ncone,int*cone,int*typecone,size_t m,vector x,vector s,vector y,vector A,vector b,
										 vector c,vector tau,vector kappa,double comptoll,double gaptoll,double stepmax,int straight,int fastbreak,
										 int log,char*outfile,int method,int homog,long nf,vector SV,vector FL,vector FC,size_t fcone);
extern "C" void	lowrank_facmul_and_inv(dimen n,dimen nfac,vector LL,vector A,vector x,vector y,int inv=0,short_scl*Apiv=0);
extern "C" void process_lowrank_plus_symm_inverse(dimen n,dimen nfac,vector LL,vector A,vector LLm1,short_scl*Apiv);
extern "C" void W2trans(size_t ncone,vector A,vector w,vector W2A);
extern "C" void Wtrans(size_t ncone,vector A,vector w,vector WA);
extern "C" void SDPwsymm2MCAR(size_t n,size_t nc,double wc,vector Q,vector A);
extern "C" void SDPvec2MCAR(size_t n,size_t nc,vector Qnci,vector A);
extern "C" short RiskParityOpt(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,double*conc,double*lambda,int longonly=0,
										 int*rank=0,int do_parity=1,int fastbreak=0,int link_extra=0,int alpha_extra=0,double*sos_check=0,double budget=1);
extern "C" short RiskParitySolveF(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,vector first=0,size_t nasme=0,double*conc=0,int BFGS=0,int DiffGrad=0);
extern "C" short RiskParitySolve(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,double*conc,int BFGS=0,int DiffGrad=0);
extern "C" short RiskParitySolve2(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,double*conc,int BFGS=0,int DiffGrad=0,int seq=0,double lower=0.0,double gamma=0.0);
extern "C" short SharpOpt(dimen n,dimen m,long nfac,vector w_opt,vector benchmark,vector alpha,vector L,vector U,
											vector A,vector FC,vector SV,vector FL,int no_opt=0,int BFGS=0,int DiffGrad=0,int log=0);
extern "C" short OptimiseGeneral(dimen n,vector w_opt,dimen m,vector AAA,vector L,vector U,vector c,vector H,pUtility Gen_U=0,pModC Gen_Grad=0,pModQ Gen_Hess=0,
	void *Gen_U_Info=0,void *Gen_Grad_info=0,void *Gen_Hess_info=0);
extern "C" int CanCastAsInteger(double *d, double xmin, double xmax);
extern "C" int dgetrf_BITA(Integer *m, Integer *n, double *a, Integer *
	lda, Integer *ipiv, Integer *info);
extern "C"  int dgetri_BITA(Integer *n, double *a, Integer *lda, Integer 
	*ipiv, double *work, Integer *lwork, Integer *info);
extern "C" int dgetrs_BITA(char *trans, Integer *n, Integer *nrhs, 
	double *a, Integer *lda, Integer *ipiv, double *b, Integer *
	ldb, Integer *info);
extern "C" short Accumulation5_10_40(void*ACCinfo,dimen basket,dimen trades,int way);
extern "C" double EndRound(double a);
extern "C" short OptimiseGeneralBarrier(dimen n,vector x,vector y,vector z,dimen m,vector A,vector b,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double nu=1000,double mudec=.5,double beta=.9,double e0=.001,int*iter=0);
extern "C" short OptimiseNLC(dimen n,vector x,vector y,vector z,dimen m,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double tol=1e-11,double nu=100,double mudec=.96,double Mc=1000.0,double mexp=1.267,double shape=0,int*iter=0,int iprint=0,int conventional=0);
extern "C" short OptimiseNLC1(dimen n,vector x,vector y,vector z,dimen m,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double tol=1e-11,int*iter=0,int iprint=0,double rho=0.9,double theta=10.0,double nu=1.0,double stepmin=0.2);
extern "C" short OptimiseNLC_Seq(dimen n,vector x,vector y,vector z,dimen m,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double tol=1e-11,int*iter=0,int iprint=0,double nu=1.0,vector lower=0,vector upper=0);
extern "C" short gramS(dimen n,vector Q,vector basevectors,vector basevalues,bool* sparse=0);
extern "C" void inverseT(dimen n,vector e,vector basevectors);
extern "C" void solveT(dimen n,vector e,vector x);
extern "C" void solveTt(dimen n,vector e,vector x);
extern "C" void multT(dimen n,vector e,vector x);
extern "C" void multTt(dimen n,vector e,vector x);
extern "C" bool FixGram(dimen n,vector QFIX);
extern "C" size_t Arnoldi(dimen n,vector A,vector q,vector H=0,int transpose=0);
extern "C" void pattern6(size_t n, vector w_opt, double *f, 
	vector g, vector hess, pUtility calcfx, void*info,vector w, double 
	dfn, vector xm, double hh, double eps, unsigned long mode, 
	unsigned long maxfn, unsigned long iprint, int*iexit,int repeat);
extern "C" void setunitHess(size_t n,vector H);
extern "C" size_t findzero(size_t n,vector w);
extern "C" bool parity_check(size_t n,long nfac,vector w,vector alpha,vector Q,vector FL,vector FC,vector SV,size_t nsect=0,vector sectors=0);
extern "C" short OptimiseNLCAL(dimen n,vector w,dimen m,vector A,dimen mAL,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,vector L=0,vector U=0);



#include <string.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_safejavaJNI_MCAR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  unsigned long arg1 ;
  unsigned long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  arg2 = (unsigned long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  MCAR(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  unsigned long arg1 ;
  unsigned long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  arg2 = (unsigned long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  FX_get(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SimpleOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jlong jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdouble jarg16, jdouble jarg17, jdouble jarg18, jdouble jarg19, jdouble jarg20, jobjectArray jarg21) {
  jshort jresult = 0 ;
  unsigned long arg1 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  unsigned long arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  double arg14 ;
  double *arg15 = (double *) 0 ;
  double arg16 ;
  double arg17 ;
  double arg18 ;
  double arg19 ;
  double arg20 ;
  char **arg21 = (char **) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (unsigned long)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (double)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (double)jarg20; 
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(jarg21)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      arg21=0;
      if(len)
      {
        arg21 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg21, i);
          arg21[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg21[len] = 0;
      }
    }
    else{
      arg21=0;
    }
  }
  result = (short)SimpleOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    char **col=arg21;
    long i=0;
    if(arg21)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg21, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg21, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg12 input=jarg12 arg=jarg12 result=$result
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_testchars(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2, jobjectArray jarg3) {
  int arg1 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(jarg2)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      arg2=0;
      if(len)
      {
        arg2 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
          arg2[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg2[len] = 0;
      }
    }
    else{
      arg2=0;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  testchars(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    char **col=arg2;
    long i=0;
    if(arg2)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg2, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_test2dlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  test2dlist(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Sym_1multT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  Sym_multT(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Sym_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  Sym_mult(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_ddot(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 ;
  size_t arg6 = (size_t) 0 ;
  size_t arg7 = (size_t) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (double)ddot(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6),SWIG_STD_MOVE(arg7));
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_GetOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlongArray jarg3, jint jarg4, jbyteArray jarg5) {
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  int arg4 = (int) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
        arg3 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg3[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg3, tt, 0);
      }
    }
  }
  arg4 = (int)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (unsigned char *)jenv->GetByteArrayElements(jarg5, 0);
      }
    }
  }
  GetOrder(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg3[i];
      jenv->ReleaseLongArrayElements(jarg3, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte*)arg5, 0);
      arg5=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_PatternMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdouble jarg5, jobject jarg6, jshort jarg8, jlong jarg9, jshort jarg10) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  short arg8 = (short) 1 ;
  unsigned long arg9 = (unsigned long) 20 ;
  short arg10 = (short) 2 ;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"util";
      arg6=(pUtility)CallUtil;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  arg8 = (short)jarg8; 
  arg9 = (unsigned long)jarg9; 
  arg10 = (short)jarg10; 
  PatternMin(arg1,arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,arg8,arg9,arg10);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg7;
      delete info;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dumpvec(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdoubleArray jarg3, jstring jarg4) {
  size_t arg1 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  dumpvec(SWIG_STD_MOVE(arg1),(char const *)arg2,arg3,(char const *)arg4);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }

  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }

}


SWIGEXPORT void JNICALL Java_safejavaJNI_dumpsvec(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jobjectArray jarg3, jstring jarg4) {
  size_t arg1 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  dumpsvec(SWIG_STD_MOVE(arg1),(char const *)arg2,arg3,(char const *)arg4);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }

  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }

}


SWIGEXPORT void JNICALL Java_safejavaJNI_ReorderS(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
        arg2 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg2[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg2, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  ReorderS(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg2[i];
      jenv->ReleaseLongArrayElements(jarg2, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_ReorderSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
        arg2 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg2[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg2, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  ReorderSquare(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg2[i];
      jenv->ReleaseLongArrayElements(jarg2, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Reorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
        arg2 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg2[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg2, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  Reorder(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg2[i];
      jenv->ReleaseLongArrayElements(jarg2, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Reorder_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jdoubleArray jarg3, jlong jarg4) {
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
        arg2 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg2[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg2, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  Reorder_mult(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4));
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg2[i];
      jenv->ReleaseLongArrayElements(jarg2, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_getBIMcov(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlongArray jarg3, jobjectArray jarg4, jdoubleArray jarg5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
        arg3 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg3[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg3, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  getBIMcov(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg3[i];
      jenv->ReleaseLongArrayElements(jarg3, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }


  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_procBIMcov(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  procBIMcov(arg1,arg2,arg3);



}


SWIGEXPORT void JNICALL Java_safejavaJNI_procBIMmod(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  procBIMmod(arg1,arg2,arg3,arg4,arg5);





}


SWIGEXPORT void JNICALL Java_safejavaJNI_digitise(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  digitise(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_roundcount(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  jlong jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  result = roundcount(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jlong)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_fix_1covariancem(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jint jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (int)fix_covariancem(arg1,arg2);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_InvQ_1d(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  result = (short)InvQ_d(arg1,arg2,arg3,arg4);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_ConstrRegress(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jobjectArray jarg8) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg8);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg8=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg8, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg8 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg8, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg8[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg8=0;
    }
  }
  result = (short)ConstrRegress(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg8);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg8, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg8, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg8[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg8, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_pickout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobjectArray jarg2, jlong jarg3, jobjectArray jarg4, jdoubleArray jarg5, jlongArray jarg6) {
  jint jresult = 0 ;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  dimen arg3 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(jarg2)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      arg2=0;
      if(len)
      {
        arg2 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
          arg2[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg2[len] = 0;
      }
    }
    else{
      arg2=0;
    }
  }
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
        arg6 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg6[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg6, tt, 0);
      }
    }
  }
  result = (int)pickout(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    char **col=arg2;
    long i=0;
    if(arg2)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg2, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg6[i];
      jenv->ReleaseLongArrayElements(jarg6, tt, 0);
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_pickoutstrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobjectArray jarg2, jlong jarg3, jobjectArray jarg4, jobjectArray jarg5, jlongArray jarg6) {
  jint jresult = 0 ;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  dimen arg3 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(jarg2)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      arg2=0;
      if(len)
      {
        arg2 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
          arg2[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg2[len] = 0;
      }
    }
    else{
      arg2=0;
    }
  }
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      arg5=0;
      if(len)
      {
        arg5 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
          arg5[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg5[len] = 0;
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
        arg6 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg6[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg6, tt, 0);
      }
    }
  }
  result = (int)pickoutstrings(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    char **col=arg2;
    long i=0;
    if(arg2)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg2, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    char **col=arg5;
    long i=0;
    if(arg5)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg5, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg6[i];
      jenv->ReleaseLongArrayElements(jarg6, tt, 0);
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_Return_1Message(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)Return_Message(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_MultiStageMessage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)MultiStageMessage(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_SOCPlstestMessage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)SOCPlstestMessage(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_eigendecomp(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  dimen arg4 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (dimen)jarg4; 
  result = (short)eigendecomp(arg1,arg2,arg3,arg4);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dldlfactNULL(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  dldlfactNULL(arg1,arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_expire_1date(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1=new char[500];//asetup
  }
  result = (char *)expire_date(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);

  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1=new char[500];//asetup
  }
  result = (char *)version(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);

  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_cversion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1=new char[500];//asetup
  }
  result = (char *)cversion(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);

  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_component_1key(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1=new char[500];//asetup
  }
  result = (char *)component_key(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);

  delete [] result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_days_1left(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1)
    {
      arg1 = new char*[1];
      arg1[0]=new char[220];
    }
    else{
      arg1=0;
    }
  }
  result = (int)days_left(arg1);
  jresult = (jint)result; 
  {
    if(arg1)
    {
      jenv->SetObjectArrayElement(jarg1, 0, jenv->NewStringUTF(arg1[0]));
      delete []arg1[0];
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Extract_1Factor_1Information(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobjectArray jarg4, jdoubleArray jarg5, jobjectArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jobjectArray jarg9) {
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  char **arg6 = (char **) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  char **arg9 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      arg6=0;
      if(len)
      {
        arg6 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg6, i);
          arg6[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg6[len] = 0;
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg7[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(jarg9)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      arg9=0;
      if(len)
      {
        arg9 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg9, i);
          arg9[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg9[len] = 0;
      }
    }
    else{
      arg9=0;
    }
  }
  Extract_Factor_Information(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    char **col=arg6;
    long i=0;
    if(arg6)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg6, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg6, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    char **col=arg9;
    long i=0;
    if(arg9)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg9, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg9, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_CurrencyProcessFL(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  CurrencyProcessFL(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_winsorise(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3, jdouble jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  winsorise(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_percentile(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (int)jarg3; 
  result = (double)percentile(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_average(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jdouble jresult = 0 ;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (double)average(arg1,arg2);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_stddev(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jdouble jresult = 0 ;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (double)stddev(arg1,arg2);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_covariance1(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize sz = jenv->GetArrayLength(jarg1);
      int len = sz;
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (double*)jenv->GetDoubleArrayElements(jarg1, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (unsigned long)jarg4; 
  result = (double)covariance1(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1&&jarg1)
    {
      jenv->ReleaseDoubleArrayElements(jarg1, (jdouble*) arg1, 0);
      arg1=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mAve(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  mAve(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  mSum(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mProd(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  mProd(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mCovar(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (unsigned long)jarg4; 
  arg5 = (unsigned long)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  mCovar(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mCorrel(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (unsigned long)jarg4; 
  arg5 = (unsigned long)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  mCorrel(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  mVar(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_mStddev(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  mStddev(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cAve(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  cAve(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  cSum(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cProd(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  cProd(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cCovar(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  cCovar(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cCorrel(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jdoubleArray jarg5) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (unsigned long)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  cCorrel(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  cVar(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_fake_1ETL_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jint jarg6) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (int)jarg6; 
  fake_ETL_data(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_VARproperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11) {
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  VARproperties(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_cStddev(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (unsigned long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  cStddev(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_prodArrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  prodArrays(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_wAve(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jdouble jresult = 0 ;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (double)wAve(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_wAveProd(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jdouble jresult = 0 ;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  result = (double)wAveProd(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_wCovar(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jdouble jresult = 0 ;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  result = (double)wCovar(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_BITA_1ddot(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3, jdoubleArray jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (long)jarg5; 
  result = (double)BITA_ddot(arg1,arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_ddotvec(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jdouble jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (double)ddotvec(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_genmult(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jobjectArray jarg4, jobjectArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg5[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  genmult(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_getFSF(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  getFSF(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_DOT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (double)DOT(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_combineS(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  combineS(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_symm_1inverse_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  symm_inverse_x(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_vec2symm(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  vec2symm(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_symmsymm(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  symmsymm(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Sinv_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  Sinv_X(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_A1MA2(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  result = (double)A1MA2(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_square2symm(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  square2symm(SWIG_STD_MOVE(arg1),arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_square2sqsymm(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  square2sqsymm(SWIG_STD_MOVE(arg1),arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_gensymm(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  gensymm(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Sinv_1M(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  Sinv_M(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_AdotSiAX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (double)AdotSiAX(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_AdotSi(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (double)AdotSi(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SiAX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  SiAX(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Sisymm(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  Sisymm(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptSemi(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jobjectArray jarg6, jdoubleArray jarg7) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  result = (short)OptSemi(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptSemiGen(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jlong jarg7) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t arg7 = (size_t) 100 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (size_t)jarg7; 
  result = (short)OptSemiGen(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,SWIG_STD_MOVE(arg7));
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_vecvec2symmat(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  vecvec2symmat(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Amake(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdouble jarg4, jdoubleArray jarg5, jdouble jarg6) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double arg4 ;
  vector arg5 = (vector) 0 ;
  double arg6 = (double) 10.0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (double)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (double)jarg6; 
  Amake(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptFundClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdouble jarg4, jdouble jarg5, jdoubleArray jarg6, jdouble jarg7, jint jarg8) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  double arg4 ;
  double arg5 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 0.25 ;
  int arg8 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (int)jarg8; 
  result = (short)OptFundClass(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Factor2Cov(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  Factor2Cov(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Factor2Var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  Factor2Var(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_opt_1fix(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jint jarg4, jdouble jarg5) {
  jint jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  int arg4 = (int) 0 ;
  double arg5 = (double) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (int)opt_fix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_eig_1fix(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jint jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (int)eig_fix(arg1,arg2);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_quad_1fix(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jint jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (int)quad_fix(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_basic_1factor_1global_1local_1attribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jobjectArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdoubleArray jarg21, jdoubleArray jarg22, jint jarg23, jdoubleArray jarg24) {
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  double *arg22 = (double *) 0 ;
  int arg23 = (int) 0 ;
  vector arg24 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(jarg9)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg9);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg9=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg9 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg9[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg9=0;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  arg23 = (int)jarg23; 
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  basic_factor_global_local_attribution(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg9);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg9[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg9, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_basic_1factor_1global_1local_1attribution1(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jobjectArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jint jarg20) {
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  double *arg19 = (double *) 0 ;
  int arg20 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(jarg9)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg9);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg9=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg9 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg9[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg9=0;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  arg20 = (int)jarg20; 
  basic_factor_global_local_attribution1(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg9);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg9[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg9, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_xCx(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (double)xCx(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_gausspdf(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  double arg1 = (double) 0 ;
  double arg2 = (double) 1 ;
  size_t arg3 = (size_t) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (double)gausspdf(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_resampfront(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jint jarg13, jdoubleArray jarg14, jobjectArray jarg15, jdoubleArray jarg16, jlong jarg17, jdoubleArray jarg18, jint jarg19, jstring jarg20, jdouble jarg21, jlong jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jlong jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jdoubleArray jarg28) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  dimen arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  int arg13 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  dimen arg17 ;
  vector arg18 = (vector) 0 ;
  int arg19 ;
  char *arg20 = (char *) 0 ;
  double arg21 ;
  size_t arg22 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  size_t arg25 = (size_t) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (dimen)jarg4; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  arg13 = (int)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(jarg15)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg15);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg15=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg15, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg15 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg15, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg15[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg15=0;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (dimen)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (int)jarg19; 
  arg20 = 0;
  if (jarg20) {
    arg20 = (char *)jenv->GetStringUTFChars(jarg20, 0);
    if (!arg20) return ;
  }
  arg21 = (double)jarg21; 
  arg22 = (size_t)jarg22; 
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  arg25 = (size_t)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize sz = jenv->GetArrayLength(jarg28);
      int len = sz;
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (double*)jenv->GetDoubleArrayElements(jarg28, 0);
      }
    }
  }
  resampfront(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,SWIG_STD_MOVE(arg22),arg23,arg24,SWIG_STD_MOVE(arg25),arg26,arg27,arg28);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg15);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg15, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg15, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg15[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg15, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28&&jarg28)
    {
      jenv->ReleaseDoubleArrayElements(jarg28, (jdouble*) arg28, 0);
      arg28=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }

  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_manyVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jlongArray jarg6, jdoubleArray jarg7) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 = (size_t) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (size_t)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
        arg6 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg6[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg6, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  manyVars(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6,arg7);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg6[i];
      jenv->ReleaseLongArrayElements(jarg6, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_ManyVarsD(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jlongArray jarg6, jdoubleArray jarg7) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 = (size_t) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (size_t)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
        arg6 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg6[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg6, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  ManyVarsD(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6,arg7);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg6[i];
      jenv->ReleaseLongArrayElements(jarg6, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_manyVarsX(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jlongArray jarg7, jdoubleArray jarg8) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t arg6 = (size_t) 0 ;
  size_t *arg7 = (size_t *) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (size_t)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg7, 0);
        arg7 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg7[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg7, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  manyVarsX(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,arg8);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      jlong* tt=jenv->GetLongArrayElements(jarg7, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg7[i];
      jenv->ReleaseLongArrayElements(jarg7, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dmxtmulv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  dmxtmulv(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dmxmulv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  dmxmulv(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dmxtmultv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  dmxtmultv(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_BITA_1dgemv(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jdouble jarg4, jdoubleArray jarg5, jlong jarg6, jdoubleArray jarg7, jlong jarg8, jdouble jarg9, jdoubleArray jarg10, jlong jarg11) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  double *arg10 = (double *) 0 ;
  size_t arg11 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (size_t)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  arg9 = (double)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (size_t)jarg11; 
  BITA_dgemv(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),arg9,arg10,SWIG_STD_MOVE(arg11));
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }

  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SriskAttribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jlongArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg5, 0);
        arg5 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg5[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg5, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  SriskAttribution(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      jlong* tt=jenv->GetLongArrayElements(jarg5, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg5[i];
      jenv->ReleaseLongArrayElements(jarg5, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SvarianceAttribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jlongArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg5, 0);
        arg5 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg5[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg5, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  SvarianceAttribution(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      jlong* tt=jenv->GetLongArrayElements(jarg5, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg5[i];
      jenv->ReleaseLongArrayElements(jarg5, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FriskAttribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jlong jarg6, jlongArray jarg7, jlong jarg8, jdoubleArray jarg9, jobjectArray jarg10, jlong jarg11, jlongArray jarg12, jlong jarg13, jlongArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t arg6 ;
  size_t *arg7 = (size_t *) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 ;
  size_t *arg12 = (size_t *) 0 ;
  size_t arg13 ;
  size_t *arg14 = (size_t *) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (size_t)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg7, 0);
        arg7 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg7[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg7, tt, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(jarg10)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg10=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg10 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg10[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg10=0;
    }
  }
  arg11 = (size_t)jarg11; 
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize len = jenv->GetArrayLength(jarg12);
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg12, 0);
        arg12 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg12[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg12, tt, 0);
      }
    }
  }
  arg13 = (size_t)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize len = jenv->GetArrayLength(jarg14);
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg14, 0);
        arg14 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg14[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg14, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  FriskAttribution(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),arg9,arg10,SWIG_STD_MOVE(arg11),arg12,SWIG_STD_MOVE(arg13),arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      jlong* tt=jenv->GetLongArrayElements(jarg7, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg7[i];
      jenv->ReleaseLongArrayElements(jarg7, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg10[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg10, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12 && jarg12)
    {
      jsize len = jenv->GetArrayLength(jarg12);
      jlong* tt=jenv->GetLongArrayElements(jarg12, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg12[i];
      jenv->ReleaseLongArrayElements(jarg12, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14 && jarg14)
    {
      jsize len = jenv->GetArrayLength(jarg14);
      jlong* tt=jenv->GetLongArrayElements(jarg14, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg14[i];
      jenv->ReleaseLongArrayElements(jarg14, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_FvarianceAttribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jlong jarg6, jlongArray jarg7, jlong jarg8, jdoubleArray jarg9, jobjectArray jarg10, jlong jarg11, jlongArray jarg12, jlong jarg13, jlongArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jint jarg21, jdoubleArray jarg22) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t arg6 ;
  size_t *arg7 = (size_t *) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 ;
  size_t *arg12 = (size_t *) 0 ;
  size_t arg13 ;
  size_t *arg14 = (size_t *) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 = (int) 0 ;
  double *arg22 = (double *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (size_t)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg7, 0);
        arg7 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg7[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg7, tt, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(jarg10)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg10=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg10 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg10[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg10=0;
    }
  }
  arg11 = (size_t)jarg11; 
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize len = jenv->GetArrayLength(jarg12);
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg12, 0);
        arg12 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg12[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg12, tt, 0);
      }
    }
  }
  arg13 = (size_t)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize len = jenv->GetArrayLength(jarg14);
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg14, 0);
        arg14 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg14[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg14, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  result = FvarianceAttribution(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),arg9,arg10,SWIG_STD_MOVE(arg11),arg12,SWIG_STD_MOVE(arg13),arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jresult = (jlong)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      jlong* tt=jenv->GetLongArrayElements(jarg7, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg7[i];
      jenv->ReleaseLongArrayElements(jarg7, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg10[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg10, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12 && jarg12)
    {
      jsize len = jenv->GetArrayLength(jarg12);
      jlong* tt=jenv->GetLongArrayElements(jarg12, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg12[i];
      jenv->ReleaseLongArrayElements(jarg12, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14 && jarg14)
    {
      jsize len = jenv->GetArrayLength(jarg14);
      jlong* tt=jenv->GetLongArrayElements(jarg14, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg14[i];
      jenv->ReleaseLongArrayElements(jarg14, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FexposureAttribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jlongArray jarg6, jlong jarg7, jlongArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 ;
  size_t *arg6 = (size_t *) 0 ;
  size_t arg7 ;
  size_t *arg8 = (size_t *) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (size_t)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
        arg6 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg6[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg6, tt, 0);
      }
    }
  }
  arg7 = (size_t)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize len = jenv->GetArrayLength(jarg8);
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg8, 0);
        arg8 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg8[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg8, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  FexposureAttribution(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,SWIG_STD_MOVE(arg5),arg6,SWIG_STD_MOVE(arg7),arg8,arg9,arg10);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      jlong* tt=jenv->GetLongArrayElements(jarg6, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg6[i];
      jenv->ReleaseLongArrayElements(jarg6, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8 && jarg8)
    {
      jsize len = jenv->GetArrayLength(jarg8);
      jlong* tt=jenv->GetLongArrayElements(jarg8, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg8[i];
      jenv->ReleaseLongArrayElements(jarg8, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MCTR_1Beta(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jlong jarg2, jobjectArray jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12) {
  char **arg1 = (char **) 0 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(jarg1)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg1);
      int len = sz;
      //		fprintf(stderr,"jarg1 length %d\n",len);
      arg1=0;
      if(len)
      {
        arg1 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg1, i);
          arg1[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg1[len] = 0;
      }
    }
    else{
      arg1=0;
    }
  }
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg7[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  MCTR_Beta(arg1,SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    char **col=arg1;
    long i=0;
    if(arg1)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg1, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg1, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_SOCPopt1(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlongArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double arg8 = (double) 1e-2 ;
  double arg9 = (double) 10 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
        arg3 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg3[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg3, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  result = (int)SOCPopt1(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg3[i];
      jenv->ReleaseLongArrayElements(jarg3, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_SOCPopt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlongArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jdouble jarg11, jdouble jarg12, jint jarg13) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double arg8 = (double) 1e-2 ;
  double arg9 = (double) 1.1 ;
  size_t arg10 = (size_t) 1000 ;
  double arg11 = (double) 2 ;
  double arg12 = (double) 1e-8 ;
  int arg13 = (int) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
        arg3 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg3[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg3, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (size_t)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (int)jarg13; 
  result = (int)SOCPopt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,SWIG_STD_MOVE(arg10),arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg3[i];
      jenv->ReleaseLongArrayElements(jarg3, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_SOCPgenopt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlongArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jlong jarg8, jdoubleArray jarg9, jdouble jarg10, jdouble jarg11, jlong jarg12, jdouble jarg13, jint jarg14) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  double arg10 = (double) 1e-2 ;
  double arg11 = (double) 10 ;
  size_t arg12 = (size_t) 1000 ;
  double arg13 = (double) 1e-8 ;
  int arg14 = (int) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
        arg3 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg3[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg3, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (size_t)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (int)jarg14; 
  result = (int)SOCPgenopt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg3[i];
      jenv->ReleaseLongArrayElements(jarg3, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_testSOCPinf(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  testSOCPinf();
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SOCPinfeasHomogtDUMP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jlong jarg12, jdouble jarg13, jdouble jarg14, jdouble jarg15, jdouble jarg16, jint jarg17, jdouble jarg18, jdouble jarg19, jint jarg20, jstring jarg21, jstring jarg22) {
  size_t arg1 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  size_t arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 = (double) 1e-6 ;
  double arg16 = (double) 1e-6 ;
  int arg17 = (int) 0 ;
  double arg18 = (double) 4 ;
  double arg19 = (double) 1e-8 ;
  int arg20 = (int) 0 ;
  char *arg21 = (char *) 0 ;
  char *arg22 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (int *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (size_t)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (int)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = 0;
  if (jarg21) {
    arg21 = (char *)jenv->GetStringUTFChars(jarg21, 0);
    if (!arg21) return ;
  }
  arg22 = 0;
  if (jarg22) {
    arg22 = (char *)jenv->GetStringUTFChars(jarg22, 0);
    if (!arg22) return ;
  }
  SOCPinfeasHomogtDUMP(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }


}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPinfeasHomogt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jlong jarg12, jdouble jarg13, jdouble jarg14, jdouble jarg15, jdouble jarg16, jint jarg17, jdouble jarg18, jdouble jarg19, jint jarg20, jstring jarg21, jstring jarg22) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  size_t arg12 = (size_t) 100 ;
  double arg13 = (double) 1e-8 ;
  double arg14 = (double) .5 ;
  double arg15 = (double) 1e-8 ;
  double arg16 = (double) 1e-8 ;
  int arg17 = (int) 0 ;
  double arg18 = (double) 4.0 ;
  double arg19 = (double) 1e-8 ;
  int arg20 = (int) 0 ;
  char *arg21 = (char *) 0 ;
  char *arg22 = (char *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (int *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (size_t)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (int)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = 0;
  if (jarg21) {
    arg21 = (char *)jenv->GetStringUTFChars(jarg21, 0);
    if (!arg21) return 0;
  }
  arg22 = 0;
  if (jarg22) {
    arg22 = (char *)jenv->GetStringUTFChars(jarg22, 0);
    if (!arg22) return 0;
  }
  result = (short)SOCPinfeasHomogt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }


  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_RootProcessQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  RootProcessQ(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_RootQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  RootQ(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_RootQgram(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  RootQgram(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_RootQold(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  RootQold(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_fixA(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jintArray jarg3, jint jarg4) {
  jint jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  short_scl *arg3 = (short_scl *) 0 ;
  int arg4 = (int) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (short_scl *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (int)jarg4; 
  result = (int)fixA(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_DroppingOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double *arg5 = (double *) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  DroppingOut(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPlstest(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdouble jarg13, jdoubleArray jarg14, jdouble jarg15, jlong jarg16, jobjectArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  int arg7 ;
  double arg8 ;
  double arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 ;
  double arg13 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  size_t arg16 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (int)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (double)jarg15; 
  arg16 = (size_t)jarg16; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(jarg17)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg17);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg17=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg17, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg17 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg17, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg17[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg17=0;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  result = (short)SOCPlstest(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,SWIG_STD_MOVE(arg16),arg17,arg18,arg19,arg20);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg17);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg17, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg17, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg17[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg17, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    //We musn't free this arg20 input=jarg20 arg=jarg20 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPRobust(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jint jarg7, jdoubleArray jarg8, jobjectArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jdouble jarg16, jdouble jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jint jarg20, jint jarg21, jdoubleArray jarg22) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  long arg7 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 = (double) -1 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  int arg20 = (int) 1 ;
  int arg21 = (int) 1 ;
  vector arg22 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(jarg9)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg9);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg9=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg9 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg9[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg9=0;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  result = (short)SOCPRobust(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg9);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg9, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg9[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg9, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    //We musn't free this arg19 input=jarg19 arg=jarg19 result=$result
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPlsRobust(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jint jarg5, jdoubleArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jint jarg10, jdouble jarg11, jdouble jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdouble jarg15, jdouble jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdouble jarg20, jlong jarg21, jobjectArray jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jdoubleArray jarg25, jdoubleArray jarg26, jint jarg27, jint jarg28) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  vector arg19 = (vector) 0 ;
  double arg20 ;
  size_t arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  int arg27 = (int) 0 ;
  int arg28 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  arg5 = (long)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg7[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (int)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (double)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  arg20 = (double)jarg20; 
  arg21 = (size_t)jarg21; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(jarg22)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg22);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg22=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg22 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg22[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg22=0;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  arg27 = (int)jarg27; 
  arg28 = (int)jarg28; 
  result = (short)SOCPlsRobust(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,SWIG_STD_MOVE(arg21),arg22,arg23,arg24,arg25,arg26,arg27,arg28);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg22);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg22[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg22, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPlsRobustl(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jint jarg5, jdoubleArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jint jarg10, jdouble jarg11, jdouble jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdouble jarg15, jdouble jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdouble jarg20, jlong jarg21, jobjectArray jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jdoubleArray jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jint jarg28, jint jarg29, jint jarg30, jstring jarg31) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  vector arg19 = (vector) 0 ;
  double arg20 ;
  size_t arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int arg28 ;
  int arg29 = (int) 0 ;
  int arg30 = (int) 0 ;
  char *arg31 = (char *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  arg5 = (long)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg7[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (int)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (double)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  arg20 = (double)jarg20; 
  arg21 = (size_t)jarg21; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(jarg22)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg22);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg22=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg22 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg22[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg22=0;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (int)jarg30; 
  arg31 = 0;
  if (jarg31) {
    arg31 = (char *)jenv->GetStringUTFChars(jarg31, 0);
    if (!arg31) return 0;
  }
  result = (short)SOCPlsRobustl(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,SWIG_STD_MOVE(arg21),arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg22);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg22[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg22, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPlsRobustlC(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jint jarg5, jdoubleArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jint jarg10, jdouble jarg11, jdouble jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdouble jarg15, jdouble jarg16, jdoubleArray jarg17, jdouble jarg18, jlong jarg19, jobjectArray jarg20, jdoubleArray jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jint jarg25, jint jarg26, jint jarg27, jstring jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  size_t arg19 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  int arg25 ;
  int arg26 = (int) 0 ;
  int arg27 = (int) 0 ;
  char *arg28 = (char *) 0 ;
  size_t arg29 = (size_t) 0 ;
  vector arg30 = (vector) 0 ;
  double arg31 = (double) -1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  arg5 = (long)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg7[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (int)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (double)jarg18; 
  arg19 = (size_t)jarg19; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(jarg20)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg20);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg20=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg20, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg20 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg20, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg20[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg20=0;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  arg25 = (int)jarg25; 
  arg26 = (int)jarg26; 
  arg27 = (int)jarg27; 
  arg28 = 0;
  if (jarg28) {
    arg28 = (char *)jenv->GetStringUTFChars(jarg28, 0);
    if (!arg28) return 0;
  }
  arg29 = (size_t)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (double)jarg31; 
  result = (short)SOCPlsRobustlC(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,SWIG_STD_MOVE(arg19),arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,SWIG_STD_MOVE(arg29),arg30,arg31);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg20);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg20, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg20, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg20[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg20, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    //We musn't free this arg24 input=jarg24 arg=jarg24 result=$result
  }

  {
    //We musn't free this arg30 input=jarg30 arg=jarg30 result=$result
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Projection(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  Projection(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_CovarianceInverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  CovarianceInverter(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_RankingConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jint jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 = (long) -1 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (long)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  RankingConstraints(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPRanked(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jint jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jint jarg14) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  long arg7 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  int arg14 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (double)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (int)jarg14; 
  result = (short)SOCPRanked(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    //We musn't free this arg10 input=jarg10 arg=jarg10 result=$result
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_dsptrf(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jdoubleArray jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  short_scl *arg4 = (short_scl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (short_scl *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  result = (int)dsptrf(arg1,SWIG_STD_MOVE(arg2),arg3,arg4);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }

  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_dsptrs(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jintArray jarg5, jdoubleArray jarg6, jlong jarg7) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  short_scl *arg5 = (short_scl *) 0 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (short_scl *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (size_t)jarg7; 
  result = (int)dsptrs(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,SWIG_STD_MOVE(arg7));
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }

  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_applyA(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jintArray jarg5, jdoubleArray jarg6, jlong jarg7) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  short_scl *arg5 = (short_scl *) 0 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (short_scl *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (size_t)jarg7; 
  result = (int)applyA(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,SWIG_STD_MOVE(arg7));
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }

  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_applyrootA(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jintArray jarg4, jdoubleArray jarg5, jlong jarg6) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  short_scl *arg4 = (short_scl *) 0 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (short_scl *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (size_t)jarg6; 
  result = (int)applyrootA(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,SWIG_STD_MOVE(arg6));
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_applyinverserootA(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jintArray jarg4, jdoubleArray jarg5, jlong jarg6) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  short_scl *arg4 = (short_scl *) 0 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (short_scl *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (size_t)jarg6; 
  result = (int)applyinverserootA(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,SWIG_STD_MOVE(arg6));
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_ReorderNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jobjectArray jarg3) {
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  char **arg3 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
        arg2 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg2[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg2, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  ReorderNames(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg2[i];
      jenv->ReleaseLongArrayElements(jarg2, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPinterior(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jintArray jarg9, jint jarg10, jdoubleArray jarg11, jdouble jarg12, jlong jarg13, jlong jarg14, jlong jarg15, jlong jarg16, jlong jarg17, jlongArray jarg18, jlongArray jarg19, jlongArray jarg20, jlongArray jarg21, jobject jarg22, jdoubleArray jarg24, jdoubleArray jarg25) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 = (int) 1 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1e-8 ;
  size_t arg13 = (size_t) 0 ;
  size_t arg14 = (size_t) 0 ;
  size_t arg15 = (size_t) 0 ;
  size_t arg16 = (size_t) 0 ;
  size_t arg17 = (size_t) 0 ;
  size_t *arg18 = (size_t *) 0 ;
  size_t *arg19 = (size_t *) 0 ;
  size_t *arg20 = (size_t *) 0 ;
  size_t *arg21 = (size_t *) 0 ;
  pHmul arg22 = (pHmul) 0 ;
  void *arg23 = (void *) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg7[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (int *)jenv->GetIntArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (int)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (double)jarg12; 
  arg13 = (size_t)jarg13; 
  arg14 = (size_t)jarg14; 
  arg15 = (size_t)jarg15; 
  arg16 = (size_t)jarg16; 
  arg17 = (size_t)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg18, 0);
        arg18 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg18[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg18, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize len = jenv->GetArrayLength(jarg19);
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg19, 0);
        arg19 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg19[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg19, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize len = jenv->GetArrayLength(jarg20);
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg20, 0);
        arg20 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg20[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg20, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize len = jenv->GetArrayLength(jarg21);
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg21, 0);
        arg21 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg21[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg21, tt, 0);
      }
    }
  }
  {
    if(jarg22)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg22;
      info->functionName=(char*)"hmul";
      arg22=(pHmul)CallHmul;
      arg23=(void*)info;
    }
    else
    {
      arg22=0;
      arg23=0;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  result = (short)LPinterior(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,SWIG_STD_MOVE(arg13),SWIG_STD_MOVE(arg14),SWIG_STD_MOVE(arg15),SWIG_STD_MOVE(arg16),SWIG_STD_MOVE(arg17),arg18,arg19,arg20,arg21,SWIG_STD_MOVE(arg22),arg23,arg24,arg25);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9 && jarg9)
    {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg9, 0);
      arg9=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18 && jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      jlong* tt=jenv->GetLongArrayElements(jarg18, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg18[i];
      jenv->ReleaseLongArrayElements(jarg18, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19 && jarg19)
    {
      jsize len = jenv->GetArrayLength(jarg19);
      jlong* tt=jenv->GetLongArrayElements(jarg19, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg19[i];
      jenv->ReleaseLongArrayElements(jarg19, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20 && jarg20)
    {
      jsize len = jenv->GetArrayLength(jarg20);
      jlong* tt=jenv->GetLongArrayElements(jarg20, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg20[i];
      jenv->ReleaseLongArrayElements(jarg20, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21 && jarg21)
    {
      jsize len = jenv->GetArrayLength(jarg21);
      jlong* tt=jenv->GetLongArrayElements(jarg21, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg21[i];
      jenv->ReleaseLongArrayElements(jarg21, tt, 0);
    }
  }
  {
    if(jarg22)
    {
      JavaInfo* info =(JavaInfo*) arg23;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    //We musn't free this arg25 input=jarg25 arg=jarg25 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_QPopt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jobject jarg9, jdouble jarg11, jdouble jarg12, jshort jarg13) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pHmul arg9 ;
  void *arg10 = (void *) 0 ;
  double arg11 = (double) 1e-8 ;
  double arg12 = (double) 1e10 ;
  short arg13 = (short) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"hmul";
      arg9=(pHmul)CallHmul;
      arg10=(void*)info;
    }
    else
    {
      arg9=0;
      arg10=0;
    }
  }
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (short)jarg13; 
  result = (short)QPopt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10,arg11,arg12,arg13);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPopt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jshort jarg10) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double arg8 = (double) 1e-8 ;
  double arg9 = (double) 1e10 ;
  short arg10 = (short) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (short)jarg10; 
  result = (short)LPopt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_QPbySeqLP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jobject jarg9, jdouble jarg11, jdouble jarg12, jdouble jarg13, jshort jarg14) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pHmul arg9 ;
  void *arg10 = (void *) 0 ;
  double arg11 = (double) 1e-8 ;
  double arg12 = (double) 1e10 ;
  double arg13 = (double) 1e-5 ;
  short arg14 = (short) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"hmul";
      arg9=(pHmul)CallHmul;
      arg10=(void*)info;
    }
    else
    {
      arg9=0;
      arg10=0;
    }
  }
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (short)jarg14; 
  result = (short)QPbySeqLP(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10,arg11,arg12,arg13,arg14);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_QPinterior(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jobjectArray jarg7, jdoubleArray jarg8, jintArray jarg9, jint jarg10, jdoubleArray jarg11, jdouble jarg12, jlong jarg13, jlong jarg14, jlong jarg15, jlong jarg16, jlong jarg17, jlongArray jarg18, jlongArray jarg19, jlongArray jarg20, jlongArray jarg21, jobject jarg22, jdoubleArray jarg24, jdoubleArray jarg25) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 = (int) 1 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1e-8 ;
  size_t arg13 = (size_t) 0 ;
  size_t arg14 = (size_t) 0 ;
  size_t arg15 = (size_t) 0 ;
  size_t arg16 = (size_t) 0 ;
  size_t arg17 = (size_t) 0 ;
  size_t *arg18 = (size_t *) 0 ;
  size_t *arg19 = (size_t *) 0 ;
  size_t *arg20 = (size_t *) 0 ;
  size_t *arg21 = (size_t *) 0 ;
  pHmul arg22 = (pHmul) 0 ;
  void *arg23 = (void *) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg7[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (int *)jenv->GetIntArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (int)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (double)jarg12; 
  arg13 = (size_t)jarg13; 
  arg14 = (size_t)jarg14; 
  arg15 = (size_t)jarg15; 
  arg16 = (size_t)jarg16; 
  arg17 = (size_t)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg18, 0);
        arg18 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg18[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg18, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize len = jenv->GetArrayLength(jarg19);
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg19, 0);
        arg19 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg19[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg19, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize len = jenv->GetArrayLength(jarg20);
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg20, 0);
        arg20 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg20[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg20, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize len = jenv->GetArrayLength(jarg21);
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg21, 0);
        arg21 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg21[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg21, tt, 0);
      }
    }
  }
  {
    if(jarg22)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg22;
      info->functionName=(char*)"hmul";
      arg22=(pHmul)CallHmul;
      arg23=(void*)info;
    }
    else
    {
      arg22=0;
      arg23=0;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  result = (short)QPinterior(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,SWIG_STD_MOVE(arg13),SWIG_STD_MOVE(arg14),SWIG_STD_MOVE(arg15),SWIG_STD_MOVE(arg16),SWIG_STD_MOVE(arg17),arg18,arg19,arg20,arg21,SWIG_STD_MOVE(arg22),arg23,arg24,arg25);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9 && jarg9)
    {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg9, 0);
      arg9=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18 && jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      jlong* tt=jenv->GetLongArrayElements(jarg18, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg18[i];
      jenv->ReleaseLongArrayElements(jarg18, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19 && jarg19)
    {
      jsize len = jenv->GetArrayLength(jarg19);
      jlong* tt=jenv->GetLongArrayElements(jarg19, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg19[i];
      jenv->ReleaseLongArrayElements(jarg19, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20 && jarg20)
    {
      jsize len = jenv->GetArrayLength(jarg20);
      jlong* tt=jenv->GetLongArrayElements(jarg20, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg20[i];
      jenv->ReleaseLongArrayElements(jarg20, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21 && jarg21)
    {
      jsize len = jenv->GetArrayLength(jarg21);
      jlong* tt=jenv->GetLongArrayElements(jarg21, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg21[i];
      jenv->ReleaseLongArrayElements(jarg21, tt, 0);
    }
  }
  {
    if(jarg22)
    {
      JavaInfo* info =(JavaInfo*) arg23;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    //We musn't free this arg25 input=jarg25 arg=jarg25 result=$result
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_facmul(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  facmul(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_facmuli(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  facmuli(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FastInverseFactorModelProcess(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  FastInverseFactorModelProcess(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MakeUU(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  MakeUU(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_fastInverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  fastInverse(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OmegaOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jint jarg11) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 = (double) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (int)jarg11; 
  result = (short)OmegaOpt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_FindR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  char **arg4 = (char **) 0 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  arg5 = (double)jarg5; 
  result = (double)FindR(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_RobustOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jint jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jlong jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jint jarg16, jlong jarg17, jintArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdoubleArray jarg21, jlong jarg22, jdoubleArray jarg23, jint jarg24) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  size_t arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  int arg16 ;
  size_t arg17 ;
  int *arg18 = (int *) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  size_t arg22 = (size_t) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 = (int) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (int)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (size_t)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (size_t)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (int *)jenv->GetIntArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  arg22 = (size_t)jarg22; 
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  result = (short)RobustOpt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14,arg15,arg16,SWIG_STD_MOVE(arg17),arg18,arg19,arg20,arg21,SWIG_STD_MOVE(arg22),arg23,arg24);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18 && jarg18)
    {
      jenv->ReleaseIntArrayElements(jarg18, (jint*)arg18, 0);
      arg18=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    //We musn't free this arg23 input=jarg23 arg=jarg23 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_RobustOptU(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jint jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jlong jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jint jarg16, jlong jarg17, jintArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdoubleArray jarg21, jlong jarg22, jdoubleArray jarg23, jint jarg24, jdoubleArray jarg25) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  size_t arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  int arg16 ;
  size_t arg17 ;
  int *arg18 = (int *) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  size_t arg22 = (size_t) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 = (int) 1 ;
  vector arg25 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (int)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (size_t)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (size_t)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (int *)jenv->GetIntArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  arg22 = (size_t)jarg22; 
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  result = (short)RobustOptU(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14,arg15,arg16,SWIG_STD_MOVE(arg17),arg18,arg19,arg20,arg21,SWIG_STD_MOVE(arg22),arg23,arg24,arg25);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18 && jarg18)
    {
      jenv->ReleaseIntArrayElements(jarg18, (jint*)arg18, 0);
      arg18=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    //We musn't free this arg23 input=jarg23 arg=jarg23 result=$result
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_QuadCVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jintArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jlong jarg11, jdoubleArray jarg12, jint jarg13) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  int *arg6 = (int *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 = (size_t) 0 ;
  vector arg12 = (vector) 0 ;
  int arg13 = (int) 1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (size_t)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (int *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (size_t)jarg11; 
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  arg13 = (int)jarg13; 
  QuadCVals(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6,arg7,arg8,arg9,arg10,SWIG_STD_MOVE(arg11),arg12,arg13);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    //We musn't free this arg12 input=jarg12 arg=jarg12 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_IncreaseL(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  IncreaseL(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OmegaSVOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jint jarg11) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (int)jarg11; 
  result = (short)OmegaSVOpt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OmegaGeneral(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobjectArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jint jarg15, jint jarg16, jstring jarg17, jdouble jarg18, jdouble jarg19) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  char *arg17 = (char *) 0 ;
  double arg18 = (double) 1.0 ;
  double arg19 = (double) 1.0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //In REVERSED CURVE FL[in][infac]; in safeqp C[in*nfac+infac]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[j+i*m]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      arg5=0;
      if(len)
      {
        arg5 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
          arg5[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg5[len] = 0;
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (int)jarg15; 
  arg16 = (int)jarg16; 
  arg17 = 0;
  if (jarg17) {
    arg17 = (char *)jenv->GetStringUTFChars(jarg17, 0);
    if (!arg17) return 0;
  }
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  result = (short)OmegaGeneral(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[j+i*m];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    char **col=arg5;
    long i=0;
    if(arg5)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg5, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OmegaGeneralP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobjectArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jint jarg16, jint jarg17, jstring jarg18) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 0 ;
  char *arg18 = (char *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //In REVERSED CURVE FL[in][infac]; in safeqp C[in*nfac+infac]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[j+i*m]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      arg5=0;
      if(len)
      {
        arg5 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
          arg5[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg5[len] = 0;
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (int)jarg17; 
  arg18 = 0;
  if (jarg18) {
    arg18 = (char *)jenv->GetStringUTFChars(jarg18, 0);
    if (!arg18) return 0;
  }
  result = (short)OmegaGeneralP(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[j+i*m];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    char **col=arg5;
    long i=0;
    if(arg5)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg5, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }

  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_OmegaGeneralPDump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobjectArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jint jarg16, jint jarg17, jstring jarg18) {
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 0 ;
  char *arg18 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //In REVERSED CURVE FL[in][infac]; in safeqp C[in*nfac+infac]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[j+i*m]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      arg5=0;
      if(len)
      {
        arg5 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
          arg5[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg5[len] = 0;
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (int)jarg17; 
  arg18 = 0;
  if (jarg18) {
    arg18 = (char *)jenv->GetStringUTFChars(jarg18, 0);
    if (!arg18) return ;
  }
  OmegaGeneralPDump(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[j+i*m];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    char **col=arg5;
    long i=0;
    if(arg5)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg5, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg5, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }

}


SWIGEXPORT void JNICALL Java_safejavaJNI_OmegaProps(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdouble jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //In REVERSED CURVE FL[in][infac]; in safeqp C[in*nfac+infac]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[j+i*m]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  OmegaProps(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[j+i*m];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_QPbySOCP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdouble jarg10) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double arg10 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (double)jarg10; 
  result = (short)QPbySOCP(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_OmegaH(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdouble jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  OmegaH(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_clean_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  clean_w(SWIG_STD_MOVE(arg1),arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_trace(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (double)trace(SWIG_STD_MOVE(arg1),arg2);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_anneal(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jobject jarg6, jdouble jarg8, jdouble jarg9, jint jarg10) {
  jshort jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  double arg8 = (double) 5.0 ;
  double arg9 = (double) .5 ;
  int arg10 = (int) 20 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"util";
      arg6=(pUtility)CallUtil;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (int)jarg10; 
  result = (short)anneal(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,arg8,arg9,arg10);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg7;
      delete info;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_ThetaMulti(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobjectArray jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18) {
  size_t arg1 ;
  long arg2 ;
  size_t arg3 ;
  char **arg4 = (char **) 0 ;
  size_t arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      arg4=0;
      if(len)
      {
        arg4 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
          arg4[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg4[len] = 0;
      }
    }
    else{
      arg4=0;
    }
  }
  arg5 = (size_t)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  ThetaMulti(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5),arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    char **col=arg4;
    long i=0;
    if(arg4)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg4, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg4, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    //We musn't free this arg13 input=jarg13 arg=jarg13 result=$result
  }
  {
    //We musn't free this arg14 input=jarg14 arg=jarg14 result=$result
  }
  {
    //We musn't free this arg15 input=jarg15 arg=jarg15 result=$result
  }
  {
    //We musn't free this arg16 input=jarg16 arg=jarg16 result=$result
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Lsmooth(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jintArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jlong jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 1 ;
  double arg8 = (double) 1e-6 ;
  int *arg9 = (int *) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  size_t arg12 = (size_t) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (int *)jenv->GetIntArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (size_t)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  Lsmooth(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14,arg15);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9 && jarg9)
    {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg9, 0);
      arg9=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg13 input=jarg13 arg=jarg13 result=$result
  }
  {
    //We musn't free this arg14 input=jarg14 arg=jarg14 result=$result
  }
  {
    //We musn't free this arg15 input=jarg15 arg=jarg15 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SemiVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdouble jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //In REVERSED CURVE FL[in][infac]; in safeqp C[in*nfac+infac]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[j+i*m]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  SemiVar(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[j+i*m];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GeneralLongOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jobject jarg8, jobject jarg9, jobject jarg10, jint jarg14) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  pUtility arg8 ;
  pModC arg9 ;
  pModQ arg10 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  int arg14 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    if(jarg8)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg8;
      info->functionName=(char*)"util";
      arg8=(pUtility)CallUtil;
      arg11=(void*)info;
    }
    else
    {
      arg8=0;
      arg11=0;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"modc";
      arg9=(pModC)CallModC;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"modq";
      arg10=(pModQ)CallModQ;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  arg14 = (int)jarg14; 
  result = (short)GeneralLongOpt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,SWIG_STD_MOVE(arg8),SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo* info =(JavaInfo*) arg11;
      delete info;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg12;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg13;
      delete info;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPhelper(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jint jarg8, jstring jarg9) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 = (int) 1 ;
  char *arg9 = (char *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (int)jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (short)LPhelper(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPgeneral(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jlong jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdouble jarg15, jdouble jarg16, jdouble jarg17, jdouble jarg18, jdouble jarg19, jint jarg20, jstring jarg21, jdouble jarg22, jdouble jarg23) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 = (double) -1 ;
  double arg17 = (double) -1 ;
  double arg18 = (double) -1 ;
  double arg19 = (double) -1 ;
  int arg20 = (int) 1 ;
  char *arg21 = (char *) 0 ;
  double arg22 = (double) -1 ;
  double arg23 = (double) -1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = 0;
  if (jarg21) {
    arg21 = (char *)jenv->GetStringUTFChars(jarg21, 0);
    if (!arg21) return 0;
  }
  arg22 = (double)jarg22; 
  arg23 = (double)jarg23; 
  result = (short)LPgeneral(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg12 input=jarg12 arg=jarg12 result=$result
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }

  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_RobustOptDump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jint jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jlong jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jint jarg16, jlong jarg17, jintArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdoubleArray jarg21, jlong jarg22, jdoubleArray jarg23, jint jarg24, jstring jarg25) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  size_t arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  int arg16 ;
  size_t arg17 ;
  int *arg18 = (int *) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  size_t arg22 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  char *arg25 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (int)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (size_t)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (size_t)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (int *)jenv->GetIntArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  arg22 = (size_t)jarg22; 
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  arg25 = 0;
  if (jarg25) {
    arg25 = (char *)jenv->GetStringUTFChars(jarg25, 0);
    if (!arg25) return ;
  }
  RobustOptDump(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13,arg14,arg15,arg16,SWIG_STD_MOVE(arg17),arg18,arg19,arg20,arg21,SWIG_STD_MOVE(arg22),arg23,arg24,arg25);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18 && jarg18)
    {
      jenv->ReleaseIntArrayElements(jarg18, (jint*)arg18, 0);
      arg18=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }

}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPFullNewton(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 1 ;
  double arg8 = (double) 0.125 ;
  double arg9 = (double) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  result = (short)LPFullNewton(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPbySOCPp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  result = (short)LPbySOCPp(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPbySOCP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  result = (short)LPbySOCP(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPstraight(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jobjectArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(jarg5)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg5=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg5 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg5[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg5=0;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  result = (short)LPstraight(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg5);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg5, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg5[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg5, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GainLossOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdouble jarg5, jdouble jarg6, jdoubleArray jarg7, jlong jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jobjectArray jarg11, jdouble jarg12, jdouble jarg13, jobjectArray jarg14, jdoubleArray jarg15, jint jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1 ;
  double arg13 = (double) 1 ;
  char **arg14 = (char **) 0 ;
  double *arg15 = (double *) 0 ;
  long arg16 = (long) -1 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  double *arg19 = (double *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(jarg14)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      arg14=0;
      if(len)
      {
        arg14 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg14, i);
          arg14[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg14[len] = 0;
      }
    }
    else{
      arg14=0;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (long)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  result = (short)GainLossOpt(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    char **col=arg14;
    long i=0;
    if(arg14)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg14, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg14, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    //We musn't free this arg17 input=jarg17 arg=jarg17 result=$result
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    //We musn't free this arg19 input=jarg19 arg=jarg19 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GainLossOptGen(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdouble jarg5, jdouble jarg6, jdoubleArray jarg7, jlong jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jobjectArray jarg11, jdouble jarg12, jdouble jarg13, jobjectArray jarg14, jdoubleArray jarg15, jint jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1 ;
  double arg13 = (double) 1 ;
  char **arg14 = (char **) 0 ;
  double *arg15 = (double *) 0 ;
  long arg16 = (long) -1 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  double *arg19 = (double *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (size_t)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(jarg14)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      arg14=0;
      if(len)
      {
        arg14 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg14, i);
          arg14[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg14[len] = 0;
      }
    }
    else{
      arg14=0;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (long)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  result = (short)GainLossOptGen(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    char **col=arg14;
    long i=0;
    if(arg14)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg14, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg14, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    //We musn't free this arg17 input=jarg17 arg=jarg17 result=$result
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    //We musn't free this arg19 input=jarg19 arg=jarg19 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GLOptimise(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdoubleArray jarg11, jlong jarg12, jobjectArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdouble jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jint jarg24, jdouble jarg25, jdouble jarg26, jint jarg27, jint jarg28, jdouble jarg29, jdouble jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jdoubleArray jarg39, jdoubleArray jarg40, jint jarg41, jstring jarg42, jint jarg43, jint jarg44, jdouble jarg45, jdoubleArray jarg46) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  vector arg11 = (vector) 0 ;
  dimen arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  int arg24 ;
  real arg25 ;
  real arg26 ;
  int arg27 ;
  int arg28 ;
  real arg29 ;
  real arg30 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  int arg41 ;
  char *arg42 = (char *) 0 ;
  long arg43 ;
  long arg44 ;
  double arg45 ;
  vector arg46 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (dimen)jarg12; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(jarg13)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg13);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg13=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg13 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg13[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg13=0;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (real)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (int)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (real)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  arg41 = (int)jarg41; 
  arg42 = 0;
  if (jarg42) {
    arg42 = (char *)jenv->GetStringUTFChars(jarg42, 0);
    if (!arg42) return 0;
  }
  arg43 = (long)jarg43; 
  arg44 = (long)jarg44; 
  arg45 = (double)jarg45; 
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  result = (short)GLOptimise(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg13);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg13[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg13, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    //We musn't free this arg20 input=jarg20 arg=jarg20 result=$result
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    //We musn't free this arg37 input=jarg37 arg=jarg37 result=$result
  }
  {
    //We musn't free this arg38 input=jarg38 arg=jarg38 result=$result
  }
  {
    //We musn't free this arg39 input=jarg39 arg=jarg39 result=$result
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }

  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GLOptimiseR(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdoubleArray jarg11, jlong jarg12, jobjectArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdouble jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jint jarg24, jdoubleArray jarg25, jdoubleArray jarg26, jint jarg27, jint jarg28, jdouble jarg29, jdouble jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jdoubleArray jarg39, jdoubleArray jarg40, jint jarg41, jstring jarg42, jint jarg43, jint jarg44, jdouble jarg45, jdoubleArray jarg46, jdouble jarg47, jdouble jarg48, jdoubleArray jarg49, jdouble jarg50, jdouble jarg51, jdouble jarg52, jintArray jarg53) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  vector arg11 = (vector) 0 ;
  dimen arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  int arg24 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  int arg27 ;
  int arg28 ;
  real arg29 ;
  real arg30 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  int arg41 ;
  char *arg42 = (char *) 0 ;
  long arg43 ;
  long arg44 ;
  double arg45 ;
  vector arg46 = (vector) 0 ;
  double arg47 ;
  double arg48 ;
  double *arg49 = (double *) 0 ;
  double arg50 = (double) -1 ;
  double arg51 = (double) -1 ;
  double arg52 = (double) -1 ;
  int *arg53 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (dimen)jarg12; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(jarg13)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg13);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg13=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg13 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg13[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg13=0;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (int)jarg24; 
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  arg27 = (int)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (real)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  arg41 = (int)jarg41; 
  arg42 = 0;
  if (jarg42) {
    arg42 = (char *)jenv->GetStringUTFChars(jarg42, 0);
    if (!arg42) return 0;
  }
  arg43 = (long)jarg43; 
  arg44 = (long)jarg44; 
  arg45 = (double)jarg45; 
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  arg47 = (double)jarg47; 
  arg48 = (double)jarg48; 
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (double)jarg50; 
  arg51 = (double)jarg51; 
  arg52 = (double)jarg52; 
  {
    //	fprintf(stderr,"jarg53 %lx\n",jarg53);
    arg53=0;
    if(jarg53)
    {
      jsize len = jenv->GetArrayLength(jarg53);
      //		fprintf(stderr,"jarg53 length %d\n",len);
      if(len)
      {
        arg53= (int *)jenv->GetIntArrayElements(jarg53, 0);
      }
    }
  }
  result = (short)GLOptimiseR(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg13);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg13[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg13, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg53 %lx\n",jarg53);
    if(arg53 && jarg53)
    {
      jenv->ReleaseIntArrayElements(jarg53, (jint*)arg53, 0);
      arg53=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    //We musn't free this arg20 input=jarg20 arg=jarg20 result=$result
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    //We musn't free this arg37 input=jarg37 arg=jarg37 result=$result
  }
  {
    //We musn't free this arg38 input=jarg38 arg=jarg38 result=$result
  }
  {
    //We musn't free this arg39 input=jarg39 arg=jarg39 result=$result
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }

  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }
  {
    if(arg53){
      delete[] arg53;arg53=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GLOptimiseRC(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdoubleArray jarg11, jlong jarg12, jobjectArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdouble jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdoubleArray jarg27, jdoubleArray jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jint jarg31, jint jarg32, jdouble jarg33, jdouble jarg34, jdouble jarg35, jlong jarg36, jobjectArray jarg37, jlong jarg38, jlongArray jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jdoubleArray jarg44, jint jarg45, jstring jarg46, jint jarg47, jint jarg48, jdouble jarg49, jdoubleArray jarg50, jdouble jarg51, jdouble jarg52, jdoubleArray jarg53, jdouble jarg54, jdouble jarg55, jdouble jarg56, jintArray jarg57) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  vector arg11 = (vector) 0 ;
  dimen arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int arg31 ;
  int arg32 ;
  real arg33 ;
  real arg34 ;
  real arg35 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  dimen *arg39 = (dimen *) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  int arg45 ;
  char *arg46 = (char *) 0 ;
  long arg47 ;
  long arg48 ;
  double arg49 ;
  vector arg50 = (vector) 0 ;
  double arg51 ;
  double arg52 ;
  double *arg53 = (double *) 0 ;
  double arg54 = (double) -1 ;
  double arg55 = (double) -1 ;
  double arg56 = (double) -1 ;
  int *arg57 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (dimen)jarg12; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(jarg13)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg13);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg13=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg13 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg13[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg13=0;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (double)jarg26; 
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize sz = jenv->GetArrayLength(jarg28);
      int len = sz;
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (double*)jenv->GetDoubleArrayElements(jarg28, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (int)jarg31; 
  arg32 = (int)jarg32; 
  arg33 = (real)jarg33; 
  arg34 = (real)jarg34; 
  arg35 = (real)jarg35; 
  arg36 = (dimen)jarg36; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(jarg37)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg37);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg37=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg37 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg37[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg37=0;
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize len = jenv->GetArrayLength(jarg39);
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg39, 0);
        arg39 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg39[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg39, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    arg44=0;
    if(jarg44)
    {
      jsize sz = jenv->GetArrayLength(jarg44);
      int len = sz;
      //		fprintf(stderr,"jarg44 length %d\n",len);
      if(len)
      {
        arg44= (double*)jenv->GetDoubleArrayElements(jarg44, 0);
      }
    }
  }
  arg45 = (int)jarg45; 
  arg46 = 0;
  if (jarg46) {
    arg46 = (char *)jenv->GetStringUTFChars(jarg46, 0);
    if (!arg46) return 0;
  }
  arg47 = (long)jarg47; 
  arg48 = (long)jarg48; 
  arg49 = (double)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (double)jarg51; 
  arg52 = (double)jarg52; 
  {
    //	fprintf(stderr,"jarg53 %lx\n",jarg53);
    arg53=0;
    if(jarg53)
    {
      jsize sz = jenv->GetArrayLength(jarg53);
      int len = sz;
      //		fprintf(stderr,"jarg53 length %d\n",len);
      if(len)
      {
        arg53= (double*)jenv->GetDoubleArrayElements(jarg53, 0);
      }
    }
  }
  arg54 = (double)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (double)jarg56; 
  {
    //	fprintf(stderr,"jarg57 %lx\n",jarg57);
    arg57=0;
    if(jarg57)
    {
      jsize len = jenv->GetArrayLength(jarg57);
      //		fprintf(stderr,"jarg57 length %d\n",len);
      if(len)
      {
        arg57= (int *)jenv->GetIntArrayElements(jarg57, 0);
      }
    }
  }
  result = (short)GLOptimiseRC(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg13);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg13, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg13[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg13, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28&&jarg28)
    {
      jenv->ReleaseDoubleArrayElements(jarg28, (jdouble*) arg28, 0);
      arg28=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg37);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg37[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg37, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39 && jarg39)
    {
      jsize len = jenv->GetArrayLength(jarg39);
      jlong* tt=jenv->GetLongArrayElements(jarg39, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg39[i];
      jenv->ReleaseLongArrayElements(jarg39, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44&&jarg44)
    {
      jenv->ReleaseDoubleArrayElements(jarg44, (jdouble*) arg44, 0);
      arg44=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg53 %lx\n",jarg53);
    if(arg53&&jarg53)
    {
      jenv->ReleaseDoubleArrayElements(jarg53, (jdouble*) arg53, 0);
      arg53=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg57 %lx\n",jarg57);
    if(arg57 && jarg57)
    {
      jenv->ReleaseIntArrayElements(jarg57, (jint*)arg57, 0);
      arg57=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    //We musn't free this arg20 input=jarg20 arg=jarg20 result=$result
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    //We musn't free this arg41 input=jarg41 arg=jarg41 result=$result
  }
  {
    //We musn't free this arg42 input=jarg42 arg=jarg42 result=$result
  }
  {
    //We musn't free this arg43 input=jarg43 arg=jarg43 result=$result
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }

  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }
  {
    if(arg53){
      delete[] arg53;arg53=0;
    }
  }
  {
    if(arg57){
      delete[] arg57;arg57=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_GLProp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobjectArray jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdouble jarg6, jdouble jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13) {
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double arg6 ;
  double arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(jarg2)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      arg2=0;
      if(len)
      {
        arg2 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
          arg2[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg2[len] = 0;
      }
    }
    else{
      arg2=0;
    }
  }
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  GLProp(arg1,arg2,SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    char **col=arg2;
    long i=0;
    if(arg2)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg2, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_bunchf(JNIEnv *jenv, jclass jcls, jint jarg1, jdoubleArray jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  short_scl arg1 ;
  double *arg2 = (double *) 0 ;
  short_scl *arg3 = (short_scl *) 0 ;
  short_scl result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short_scl)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (short_scl *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  result = (short_scl)bunchf(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_MVLOptimise(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jdoubleArray jarg18, jdouble jarg19, jint jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jint jarg26, jdouble jarg27, jdouble jarg28, jdouble jarg29, jlong jarg30, jobjectArray jarg31, jlong jarg32, jlongArray jarg33, jdoubleArray jarg34, jdoubleArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jint jarg39, jstring jarg40, jint jarg41, jint jarg42, jdouble jarg43, jdoubleArray jarg44) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  real arg29 ;
  dimen arg30 ;
  vector arg31 = (vector) 0 ;
  dimen arg32 ;
  dimen *arg33 = (dimen *) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  int arg39 ;
  char *arg40 = (char *) 0 ;
  long arg41 ;
  long arg42 ;
  double arg43 ;
  vector arg44 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (long)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (int)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (real)jarg28; 
  arg29 = (real)jarg29; 
  arg30 = (dimen)jarg30; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(jarg31)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg31);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg31=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg31 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg31[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg31=0;
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize len = jenv->GetArrayLength(jarg33);
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg33, 0);
        arg33 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg33[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg33, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize sz = jenv->GetArrayLength(jarg35);
      int len = sz;
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (double*)jenv->GetDoubleArrayElements(jarg35, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  arg39 = (int)jarg39; 
  arg40 = 0;
  if (jarg40) {
    arg40 = (char *)jenv->GetStringUTFChars(jarg40, 0);
    if (!arg40) return 0;
  }
  arg41 = (long)jarg41; 
  arg42 = (long)jarg42; 
  arg43 = (double)jarg43; 
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    arg44=0;
    if(jarg44)
    {
      jsize sz = jenv->GetArrayLength(jarg44);
      int len = sz;
      //		fprintf(stderr,"jarg44 length %d\n",len);
      if(len)
      {
        arg44= (double*)jenv->GetDoubleArrayElements(jarg44, 0);
      }
    }
  }
  result = (short)MVLOptimise(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg31);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg31[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg31, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33 && jarg33)
    {
      jsize len = jenv->GetArrayLength(jarg33);
      jlong* tt=jenv->GetLongArrayElements(jarg33, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg33[i];
      jenv->ReleaseLongArrayElements(jarg33, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35&&jarg35)
    {
      jenv->ReleaseDoubleArrayElements(jarg35, (jdouble*) arg35, 0);
      arg35=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44&&jarg44)
    {
      jenv->ReleaseDoubleArrayElements(jarg44, (jdouble*) arg44, 0);
      arg44=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    //We musn't free this arg35 input=jarg35 arg=jarg35 result=$result
  }
  {
    //We musn't free this arg36 input=jarg36 arg=jarg36 result=$result
  }
  {
    //We musn't free this arg37 input=jarg37 arg=jarg37 result=$result
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }

  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_MVLOptimiseg(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jdoubleArray jarg18, jdouble jarg19, jint jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jint jarg26, jdouble jarg27, jdouble jarg28, jdouble jarg29, jlong jarg30, jobjectArray jarg31, jlong jarg32, jlongArray jarg33, jdoubleArray jarg34, jdoubleArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jint jarg39, jstring jarg40, jint jarg41, jint jarg42, jdouble jarg43, jdoubleArray jarg44, jdoubleArray jarg45) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  real arg29 ;
  dimen arg30 ;
  vector arg31 = (vector) 0 ;
  dimen arg32 ;
  dimen *arg33 = (dimen *) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  int arg39 ;
  char *arg40 = (char *) 0 ;
  long arg41 ;
  long arg42 ;
  double arg43 ;
  vector arg44 = (vector) 0 ;
  double *arg45 = (double *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (long)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (int)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (real)jarg28; 
  arg29 = (real)jarg29; 
  arg30 = (dimen)jarg30; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(jarg31)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg31);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg31=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg31 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg31[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg31=0;
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize len = jenv->GetArrayLength(jarg33);
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg33, 0);
        arg33 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg33[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg33, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize sz = jenv->GetArrayLength(jarg35);
      int len = sz;
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (double*)jenv->GetDoubleArrayElements(jarg35, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  arg39 = (int)jarg39; 
  arg40 = 0;
  if (jarg40) {
    arg40 = (char *)jenv->GetStringUTFChars(jarg40, 0);
    if (!arg40) return 0;
  }
  arg41 = (long)jarg41; 
  arg42 = (long)jarg42; 
  arg43 = (double)jarg43; 
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    arg44=0;
    if(jarg44)
    {
      jsize sz = jenv->GetArrayLength(jarg44);
      int len = sz;
      //		fprintf(stderr,"jarg44 length %d\n",len);
      if(len)
      {
        arg44= (double*)jenv->GetDoubleArrayElements(jarg44, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  result = (short)MVLOptimiseg(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg31);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg31[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg31, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33 && jarg33)
    {
      jsize len = jenv->GetArrayLength(jarg33);
      jlong* tt=jenv->GetLongArrayElements(jarg33, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg33[i];
      jenv->ReleaseLongArrayElements(jarg33, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35&&jarg35)
    {
      jenv->ReleaseDoubleArrayElements(jarg35, (jdouble*) arg35, 0);
      arg35=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44&&jarg44)
    {
      jenv->ReleaseDoubleArrayElements(jarg44, (jdouble*) arg44, 0);
      arg44=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    //We musn't free this arg35 input=jarg35 arg=jarg35 result=$result
  }
  {
    //We musn't free this arg36 input=jarg36 arg=jarg36 result=$result
  }
  {
    //We musn't free this arg37 input=jarg37 arg=jarg37 result=$result
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }

  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_MVLOptimiseR(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jdoubleArray jarg18, jdouble jarg19, jint jarg20, jint jarg21, jint jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jint jarg25, jint jarg26, jdouble jarg27, jdouble jarg28, jdouble jarg29, jlong jarg30, jobjectArray jarg31, jlong jarg32, jlongArray jarg33, jdoubleArray jarg34, jdoubleArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jint jarg39, jstring jarg40, jint jarg41, jint jarg42, jdouble jarg43, jdoubleArray jarg44, jdouble jarg45, jdouble jarg46, jdoubleArray jarg47, jdouble jarg48, jdouble jarg49, jdouble jarg50, jintArray jarg51) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  real arg29 ;
  dimen arg30 ;
  vector arg31 = (vector) 0 ;
  dimen arg32 ;
  dimen *arg33 = (dimen *) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  int arg39 ;
  char *arg40 = (char *) 0 ;
  long arg41 ;
  long arg42 ;
  double arg43 ;
  vector arg44 = (vector) 0 ;
  double arg45 ;
  double arg46 ;
  double *arg47 = (double *) 0 ;
  double arg48 = (double) -1 ;
  double arg49 = (double) -1 ;
  double arg50 = (double) -1 ;
  int *arg51 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (long)jarg21; 
  arg22 = (int)jarg22; 
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  arg25 = (int)jarg25; 
  arg26 = (int)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (real)jarg28; 
  arg29 = (real)jarg29; 
  arg30 = (dimen)jarg30; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(jarg31)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg31);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg31=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg31 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg31[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg31=0;
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize len = jenv->GetArrayLength(jarg33);
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg33, 0);
        arg33 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg33[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg33, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize sz = jenv->GetArrayLength(jarg35);
      int len = sz;
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (double*)jenv->GetDoubleArrayElements(jarg35, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  arg39 = (int)jarg39; 
  arg40 = 0;
  if (jarg40) {
    arg40 = (char *)jenv->GetStringUTFChars(jarg40, 0);
    if (!arg40) return 0;
  }
  arg41 = (long)jarg41; 
  arg42 = (long)jarg42; 
  arg43 = (double)jarg43; 
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    arg44=0;
    if(jarg44)
    {
      jsize sz = jenv->GetArrayLength(jarg44);
      int len = sz;
      //		fprintf(stderr,"jarg44 length %d\n",len);
      if(len)
      {
        arg44= (double*)jenv->GetDoubleArrayElements(jarg44, 0);
      }
    }
  }
  arg45 = (double)jarg45; 
  arg46 = (double)jarg46; 
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  arg48 = (double)jarg48; 
  arg49 = (double)jarg49; 
  arg50 = (double)jarg50; 
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    arg51=0;
    if(jarg51)
    {
      jsize len = jenv->GetArrayLength(jarg51);
      //		fprintf(stderr,"jarg51 length %d\n",len);
      if(len)
      {
        arg51= (int *)jenv->GetIntArrayElements(jarg51, 0);
      }
    }
  }
  result = (short)MVLOptimiseR(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg31);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg31, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg31[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg31, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33 && jarg33)
    {
      jsize len = jenv->GetArrayLength(jarg33);
      jlong* tt=jenv->GetLongArrayElements(jarg33, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg33[i];
      jenv->ReleaseLongArrayElements(jarg33, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35&&jarg35)
    {
      jenv->ReleaseDoubleArrayElements(jarg35, (jdouble*) arg35, 0);
      arg35=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44&&jarg44)
    {
      jenv->ReleaseDoubleArrayElements(jarg44, (jdouble*) arg44, 0);
      arg44=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    if(arg51 && jarg51)
    {
      jenv->ReleaseIntArrayElements(jarg51, (jint*)arg51, 0);
      arg51=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    //We musn't free this arg35 input=jarg35 arg=jarg35 result=$result
  }
  {
    //We musn't free this arg36 input=jarg36 arg=jarg36 result=$result
  }
  {
    //We musn't free this arg37 input=jarg37 arg=jarg37 result=$result
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }

  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_MVLOptimiseRC(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7, jdouble jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jdoubleArray jarg18, jdouble jarg19, jint jarg20, jint jarg21, jint jarg22, jint jarg23, jdouble jarg24, jdoubleArray jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jdoubleArray jarg28, jint jarg29, jint jarg30, jdouble jarg31, jdouble jarg32, jdouble jarg33, jlong jarg34, jobjectArray jarg35, jlong jarg36, jlongArray jarg37, jdoubleArray jarg38, jdoubleArray jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jdoubleArray jarg42, jint jarg43, jstring jarg44, jint jarg45, jint jarg46, jdouble jarg47, jdoubleArray jarg48, jdouble jarg49, jdouble jarg50, jdoubleArray jarg51, jdouble jarg52, jdouble jarg53, jdouble jarg54, jintArray jarg55) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  int arg23 ;
  double arg24 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  int arg29 ;
  int arg30 ;
  real arg31 ;
  real arg32 ;
  real arg33 ;
  dimen arg34 ;
  vector arg35 = (vector) 0 ;
  dimen arg36 ;
  dimen *arg37 = (dimen *) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  int arg43 ;
  char *arg44 = (char *) 0 ;
  long arg45 ;
  long arg46 ;
  double arg47 ;
  vector arg48 = (vector) 0 ;
  double arg49 ;
  double arg50 ;
  double *arg51 = (double *) 0 ;
  double arg52 = (double) -1 ;
  double arg53 = (double) -1 ;
  double arg54 = (double) -1 ;
  int *arg55 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (real)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (long)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (int)jarg23; 
  arg24 = (double)jarg24; 
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize sz = jenv->GetArrayLength(jarg28);
      int len = sz;
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (double*)jenv->GetDoubleArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (int)jarg29; 
  arg30 = (int)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (real)jarg32; 
  arg33 = (real)jarg33; 
  arg34 = (dimen)jarg34; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(jarg35)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg35);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg35=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg35, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg35 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg35, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg35[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg35=0;
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize len = jenv->GetArrayLength(jarg37);
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg37, 0);
        arg37 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg37[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg37, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  arg43 = (int)jarg43; 
  arg44 = 0;
  if (jarg44) {
    arg44 = (char *)jenv->GetStringUTFChars(jarg44, 0);
    if (!arg44) return 0;
  }
  arg45 = (long)jarg45; 
  arg46 = (long)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  arg49 = (double)jarg49; 
  arg50 = (double)jarg50; 
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    arg51=0;
    if(jarg51)
    {
      jsize sz = jenv->GetArrayLength(jarg51);
      int len = sz;
      //		fprintf(stderr,"jarg51 length %d\n",len);
      if(len)
      {
        arg51= (double*)jenv->GetDoubleArrayElements(jarg51, 0);
      }
    }
  }
  arg52 = (double)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (double)jarg54; 
  {
    //	fprintf(stderr,"jarg55 %lx\n",jarg55);
    arg55=0;
    if(jarg55)
    {
      jsize len = jenv->GetArrayLength(jarg55);
      //		fprintf(stderr,"jarg55 length %d\n",len);
      if(len)
      {
        arg55= (int *)jenv->GetIntArrayElements(jarg55, 0);
      }
    }
  }
  result = (short)MVLOptimiseRC(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28&&jarg28)
    {
      jenv->ReleaseDoubleArrayElements(jarg28, (jdouble*) arg28, 0);
      arg28=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg35);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg35, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg35, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg35[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg35, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37 && jarg37)
    {
      jsize len = jenv->GetArrayLength(jarg37);
      jlong* tt=jenv->GetLongArrayElements(jarg37, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg37[i];
      jenv->ReleaseLongArrayElements(jarg37, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    if(arg51&&jarg51)
    {
      jenv->ReleaseDoubleArrayElements(jarg51, (jdouble*) arg51, 0);
      arg51=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg55 %lx\n",jarg55);
    if(arg55 && jarg55)
    {
      jenv->ReleaseIntArrayElements(jarg55, (jint*)arg55, 0);
      arg55=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    //We musn't free this arg39 input=jarg39 arg=jarg39 result=$result
  }
  {
    //We musn't free this arg40 input=jarg40 arg=jarg40 result=$result
  }
  {
    //We musn't free this arg41 input=jarg41 arg=jarg41 result=$result
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }

  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  {
    if(arg55){
      delete[] arg55;arg55=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_GLO_1internal_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  GLO_internal_model(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_CvarOptimise(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6, jobjectArray jarg7, jdoubleArray jarg8, jlong jarg9, jobjectArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdouble jarg16, jdoubleArray jarg17, jdouble jarg18, jint jarg19, jint jarg20, jint jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jdouble jarg32, jlong jarg33, jobjectArray jarg34, jlong jarg35, jlongArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jdoubleArray jarg39, jint jarg40, jstring jarg41, jint jarg42, jint jarg43, jdouble jarg44, jdoubleArray jarg45) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  double arg5 ;
  double arg6 ;
  char **arg7 = (char **) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  long arg19 ;
  long arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  double arg32 ;
  size_t arg33 ;
  vector arg34 = (vector) 0 ;
  size_t arg35 ;
  dimen *arg36 = (dimen *) 0 ;
  vector arg37 = (vector) 0 ;
  double *arg38 = (double *) 0 ;
  vector arg39 = (vector) 0 ;
  int arg40 ;
  char *arg41 = (char *) 0 ;
  long arg42 ;
  long arg43 ;
  double arg44 ;
  vector arg45 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      arg7=0;
      if(len)
      {
        arg7 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg7, i);
          arg7[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg7[len] = 0;
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (size_t)jarg9; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(jarg10)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg10=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg10 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg10[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg10=0;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (double)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (double)jarg26; 
  arg27 = (double)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (double)jarg32; 
  arg33 = (size_t)jarg33; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(jarg34)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg34);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg34=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg34 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg34[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg34=0;
    }
  }
  arg35 = (size_t)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize len = jenv->GetArrayLength(jarg36);
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg36, 0);
        arg36 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg36[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg36, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (int)jarg40; 
  arg41 = 0;
  if (jarg41) {
    arg41 = (char *)jenv->GetStringUTFChars(jarg41, 0);
    if (!arg41) return 0;
  }
  arg42 = (long)jarg42; 
  arg43 = (long)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  result = (short)CvarOptimise(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,SWIG_STD_MOVE(arg33),arg34,SWIG_STD_MOVE(arg35),arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    char **col=arg7;
    long i=0;
    if(arg7)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg7, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg7, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg10[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg10, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg34);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg34[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg34, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36 && jarg36)
    {
      jsize len = jenv->GetArrayLength(jarg36);
      jlong* tt=jenv->GetLongArrayElements(jarg36, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg36[i];
      jenv->ReleaseLongArrayElements(jarg36, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    //We musn't free this arg17 input=jarg17 arg=jarg17 result=$result
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }

  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_CvarOptimiseCR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6, jobjectArray jarg7, jdoubleArray jarg8, jlong jarg9, jobjectArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdouble jarg16, jdoubleArray jarg17, jdouble jarg18, jint jarg19, jint jarg20, jint jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jdouble jarg32, jlong jarg33, jobjectArray jarg34, jlong jarg35, jlongArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jdoubleArray jarg39, jint jarg40, jstring jarg41, jint jarg42, jint jarg43, jdouble jarg44, jdoubleArray jarg45, jint jarg46, jdoubleArray jarg47, jdoubleArray jarg48, jint jarg49, jdouble jarg50, jdouble jarg51, jshort jarg52) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  double arg5 ;
  double arg6 ;
  char **arg7 = (char **) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  long arg19 ;
  long arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  double arg32 ;
  size_t arg33 ;
  vector arg34 = (vector) 0 ;
  size_t arg35 ;
  dimen *arg36 = (dimen *) 0 ;
  vector arg37 = (vector) 0 ;
  double *arg38 = (double *) 0 ;
  vector arg39 = (vector) 0 ;
  int arg40 ;
  char *arg41 = (char *) 0 ;
  long arg42 ;
  long arg43 ;
  double arg44 ;
  vector arg45 = (vector) 0 ;
  int arg46 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  int arg49 ;
  double arg50 ;
  double arg51 ;
  unsigned char arg52 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      arg7=0;
      if(len)
      {
        arg7 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg7, i);
          arg7[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg7[len] = 0;
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (size_t)jarg9; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(jarg10)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg10=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg10 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg10[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg10=0;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (double)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (double)jarg26; 
  arg27 = (double)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (double)jarg32; 
  arg33 = (size_t)jarg33; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(jarg34)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg34);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg34=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg34 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg34[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg34=0;
    }
  }
  arg35 = (size_t)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize len = jenv->GetArrayLength(jarg36);
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg36, 0);
        arg36 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg36[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg36, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (int)jarg40; 
  arg41 = 0;
  if (jarg41) {
    arg41 = (char *)jenv->GetStringUTFChars(jarg41, 0);
    if (!arg41) return 0;
  }
  arg42 = (long)jarg42; 
  arg43 = (long)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (int)jarg46; 
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  arg49 = (int)jarg49; 
  arg50 = (double)jarg50; 
  arg51 = (double)jarg51; 
  arg52 = (unsigned char)jarg52; 
  result = (short)CvarOptimiseCR(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,SWIG_STD_MOVE(arg33),arg34,SWIG_STD_MOVE(arg35),arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    char **col=arg7;
    long i=0;
    if(arg7)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg7, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg7, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg10[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg10, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg34);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg34[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg34, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36 && jarg36)
    {
      jsize len = jenv->GetArrayLength(jarg36);
      jlong* tt=jenv->GetLongArrayElements(jarg36, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg36[i];
      jenv->ReleaseLongArrayElements(jarg36, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    //We musn't free this arg17 input=jarg17 arg=jarg17 result=$result
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }

  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_CvarOptimiseC(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6, jobjectArray jarg7, jdoubleArray jarg8, jlong jarg9, jobjectArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdouble jarg16, jdoubleArray jarg17, jdouble jarg18, jint jarg19, jint jarg20, jint jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jdouble jarg32, jlong jarg33, jobjectArray jarg34, jlong jarg35, jlongArray jarg36, jdoubleArray jarg37, jdoubleArray jarg38, jdoubleArray jarg39, jint jarg40, jstring jarg41, jint jarg42, jint jarg43, jdouble jarg44, jdoubleArray jarg45, jint jarg46, jdoubleArray jarg47, jdoubleArray jarg48, jint jarg49, jdouble jarg50, jdouble jarg51) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  double arg5 ;
  double arg6 ;
  char **arg7 = (char **) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  long arg19 ;
  long arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  double arg32 ;
  size_t arg33 ;
  vector arg34 = (vector) 0 ;
  size_t arg35 ;
  dimen *arg36 = (dimen *) 0 ;
  vector arg37 = (vector) 0 ;
  double *arg38 = (double *) 0 ;
  vector arg39 = (vector) 0 ;
  int arg40 ;
  char *arg41 = (char *) 0 ;
  long arg42 ;
  long arg43 ;
  double arg44 ;
  vector arg45 = (vector) 0 ;
  int arg46 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  int arg49 ;
  double arg50 ;
  double arg51 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      arg7=0;
      if(len)
      {
        arg7 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg7, i);
          arg7[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg7[len] = 0;
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (size_t)jarg9; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(jarg10)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg10=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg10 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg10[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg10=0;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (double)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (double)jarg26; 
  arg27 = (double)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (double)jarg32; 
  arg33 = (size_t)jarg33; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(jarg34)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg34);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg34=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg34 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg34[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg34=0;
    }
  }
  arg35 = (size_t)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize len = jenv->GetArrayLength(jarg36);
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg36, 0);
        arg36 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg36[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg36, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    arg38=0;
    if(jarg38)
    {
      jsize sz = jenv->GetArrayLength(jarg38);
      int len = sz;
      //		fprintf(stderr,"jarg38 length %d\n",len);
      if(len)
      {
        arg38= (double*)jenv->GetDoubleArrayElements(jarg38, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (int)jarg40; 
  arg41 = 0;
  if (jarg41) {
    arg41 = (char *)jenv->GetStringUTFChars(jarg41, 0);
    if (!arg41) return 0;
  }
  arg42 = (long)jarg42; 
  arg43 = (long)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (int)jarg46; 
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  arg49 = (int)jarg49; 
  arg50 = (double)jarg50; 
  arg51 = (double)jarg51; 
  result = (short)CvarOptimiseC(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,SWIG_STD_MOVE(arg33),arg34,SWIG_STD_MOVE(arg35),arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    char **col=arg7;
    long i=0;
    if(arg7)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg7, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg7, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg10);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg10, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg10[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg10, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg34);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg34, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg34[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg34, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36 && jarg36)
    {
      jsize len = jenv->GetArrayLength(jarg36);
      jlong* tt=jenv->GetLongArrayElements(jarg36, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg36[i];
      jenv->ReleaseLongArrayElements(jarg36, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38&&jarg38)
    {
      jenv->ReleaseDoubleArrayElements(jarg38, (jdouble*) arg38, 0);
      arg38=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    //We musn't free this arg17 input=jarg17 arg=jarg17 result=$result
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }

  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_SemiVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (double)SemiVariance(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_GradSemiVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  GradSemiVariance(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_HessSemiVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  HessSemiVariance(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SemiVarOptimise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobjectArray jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jobjectArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jint jarg15, jint jarg16, jint jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jdouble jarg24, jlong jarg25, jobjectArray jarg26, jlong jarg27, jlongArray jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jint jarg31, jstring jarg32, jint jarg33, jint jarg34, jdouble jarg35, jdoubleArray jarg36, jdouble jarg37, jdouble jarg38, jdoubleArray jarg39, jdouble jarg40, jdouble jarg41, jdouble jarg42, jintArray jarg43) {
  jshort jresult = 0 ;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  long arg15 ;
  long arg16 ;
  int arg17 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  real arg24 ;
  dimen arg25 ;
  vector arg26 = (vector) 0 ;
  dimen arg27 ;
  dimen *arg28 = (dimen *) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int arg31 ;
  char *arg32 = (char *) 0 ;
  long arg33 ;
  long arg34 ;
  double arg35 ;
  vector arg36 = (vector) 0 ;
  double arg37 = (double) -1 ;
  double arg38 = (double) -1 ;
  double *arg39 = (double *) 0 ;
  double arg40 = (double) -1 ;
  double arg41 = (double) -1 ;
  double arg42 = (double) -1 ;
  int *arg43 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(jarg2)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      arg2=0;
      if(len)
      {
        arg2 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
          arg2[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg2[len] = 0;
      }
    }
    else{
      arg2=0;
    }
  }
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg7[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (long)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (int)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (dimen)jarg25; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(jarg26)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg26);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg26=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg26 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg26[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg26=0;
    }
  }
  arg27 = (dimen)jarg27; 
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg28, 0);
        arg28 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg28[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg28, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (int)jarg31; 
  arg32 = 0;
  if (jarg32) {
    arg32 = (char *)jenv->GetStringUTFChars(jarg32, 0);
    if (!arg32) return 0;
  }
  arg33 = (long)jarg33; 
  arg34 = (long)jarg34; 
  arg35 = (double)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  arg37 = (double)jarg37; 
  arg38 = (double)jarg38; 
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (double)jarg40; 
  arg41 = (double)jarg41; 
  arg42 = (double)jarg42; 
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize len = jenv->GetArrayLength(jarg43);
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (int *)jenv->GetIntArrayElements(jarg43, 0);
      }
    }
  }
  result = (short)SemiVarOptimise(arg1,arg2,SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    char **col=arg2;
    long i=0;
    if(arg2)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg2, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg26);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg26[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg26, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      jlong* tt=jenv->GetLongArrayElements(jarg28, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg28[i];
      jenv->ReleaseLongArrayElements(jarg28, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43 && jarg43)
    {
      jenv->ReleaseIntArrayElements(jarg43, (jint*)arg43, 0);
      arg43=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg13 input=jarg13 arg=jarg13 result=$result
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }

  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SemiVarOptimiseT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobjectArray jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jobjectArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jint jarg15, jint jarg16, jint jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jdouble jarg24, jlong jarg25, jobjectArray jarg26, jlong jarg27, jlongArray jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jint jarg31, jstring jarg32, jint jarg33, jint jarg34, jdouble jarg35, jdoubleArray jarg36, jdouble jarg37, jdouble jarg38, jdoubleArray jarg39, jdouble jarg40, jdouble jarg41, jdouble jarg42, jintArray jarg43) {
  jshort jresult = 0 ;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  long arg15 ;
  long arg16 ;
  int arg17 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  real arg24 ;
  dimen arg25 ;
  vector arg26 = (vector) 0 ;
  dimen arg27 ;
  dimen *arg28 = (dimen *) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int arg31 ;
  char *arg32 = (char *) 0 ;
  long arg33 ;
  long arg34 ;
  double arg35 ;
  vector arg36 = (vector) 0 ;
  double arg37 = (double) -1 ;
  double arg38 = (double) -1 ;
  double *arg39 = (double *) 0 ;
  double arg40 = (double) -1 ;
  double arg41 = (double) -1 ;
  double arg42 = (double) -1 ;
  int *arg43 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(jarg2)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      arg2=0;
      if(len)
      {
        arg2 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
          arg2[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg2[len] = 0;
      }
    }
    else{
      arg2=0;
    }
  }
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(jarg7)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg7=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg7 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg7[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (long)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (int)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (dimen)jarg25; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(jarg26)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg26);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg26=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg26 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg26[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg26=0;
    }
  }
  arg27 = (dimen)jarg27; 
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg28, 0);
        arg28 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg28[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg28, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (int)jarg31; 
  arg32 = 0;
  if (jarg32) {
    arg32 = (char *)jenv->GetStringUTFChars(jarg32, 0);
    if (!arg32) return 0;
  }
  arg33 = (long)jarg33; 
  arg34 = (long)jarg34; 
  arg35 = (double)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  arg37 = (double)jarg37; 
  arg38 = (double)jarg38; 
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (double)jarg40; 
  arg41 = (double)jarg41; 
  arg42 = (double)jarg42; 
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize len = jenv->GetArrayLength(jarg43);
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (int *)jenv->GetIntArrayElements(jarg43, 0);
      }
    }
  }
  result = (short)SemiVarOptimiseT(arg1,arg2,SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    char **col=arg2;
    long i=0;
    if(arg2)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg2, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg2, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg7);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg7, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg7[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg7, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg26);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg26[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg26, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      jlong* tt=jenv->GetLongArrayElements(jarg28, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg28[i];
      jenv->ReleaseLongArrayElements(jarg28, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43 && jarg43)
    {
      jenv->ReleaseIntArrayElements(jarg43, (jint*)arg43, 0);
      arg43=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg13 input=jarg13 arg=jarg13 result=$result
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }

  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_CVarValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (double)CVarValue(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_CVarGrad(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  CVarGrad(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_CVarValueO(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (double)CVarValueO(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_CVarValuen(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (double)CVarValuen(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptCVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdouble jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jint jarg10, jdoubleArray jarg11, jdoubleArray jarg12) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  double arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 = (int) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (double)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (int)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  result = (short)OptCVar(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptGL(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdouble jarg10, jint jarg11, jdoubleArray jarg12, jdoubleArray jarg13) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double arg10 ;
  int arg11 = (int) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (double)jarg10; 
  arg11 = (int)jarg11; 
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  result = (short)OptGL(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_AQAmake(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  result = (int)AQAmake(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_FixedAtEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlongArray jarg4) {
  jint jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg4, 0);
        arg4 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg4[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg4, tt, 0);
      }
    }
  }
  result = (int)FixedAtEnd(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      jlong* tt=jenv->GetLongArrayElements(jarg4, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg4[i];
      jenv->ReleaseLongArrayElements(jarg4, tt, 0);
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SOCPportfolio(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jint jarg12, jdouble jarg13, jdouble jarg14, jdouble jarg15, jdouble jarg16, jdouble jarg17, jdouble jarg18, jdouble jarg19, jlong jarg20, jdoubleArray jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jdouble jarg28, jdouble jarg29, jint jarg30, jdouble jarg31, jdoubleArray jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jdoubleArray jarg35, jstring jarg36, jint jarg37, jstring jarg38, jdoubleArray jarg39, jdoubleArray jarg40, jint jarg41, jint jarg42, jdoubleArray jarg43, jdoubleArray jarg44, jdouble jarg45, jdouble jarg46, jdouble jarg47, jintArray jarg48) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  int arg12 = (int) 0 ;
  double arg13 = (double) -1 ;
  double arg14 = (double) -1 ;
  double arg15 = (double) -1 ;
  double arg16 = (double) 1 ;
  double arg17 = (double) -1 ;
  double arg18 = (double) -1 ;
  double arg19 = (double) -1 ;
  size_t arg20 = (size_t) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  long arg25 = (long) -1 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  double arg28 = (double) -1 ;
  double arg29 = (double) -1 ;
  int arg30 = (int) 0 ;
  double arg31 = (double) 0 ;
  double *arg32 = (double *) 0 ;
  double *arg33 = (double *) 0 ;
  double *arg34 = (double *) 0 ;
  double *arg35 = (double *) 0 ;
  char *arg36 = (char *) 0 ;
  int arg37 = (int) 1 ;
  char *arg38 = (char *) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  long arg41 = (long) -1 ;
  long arg42 = (long) -1 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  double arg45 = (double) -1 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  int *arg48 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (int)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (size_t)jarg20; 
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  arg25 = (long)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  arg28 = (double)jarg28; 
  arg29 = (double)jarg29; 
  arg30 = (int)jarg30; 
  arg31 = (double)jarg31; 
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    arg32=0;
    if(jarg32)
    {
      jsize sz = jenv->GetArrayLength(jarg32);
      int len = sz;
      //		fprintf(stderr,"jarg32 length %d\n",len);
      if(len)
      {
        arg32= (double*)jenv->GetDoubleArrayElements(jarg32, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize sz = jenv->GetArrayLength(jarg35);
      int len = sz;
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (double*)jenv->GetDoubleArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = 0;
  if (jarg36) {
    arg36 = (char *)jenv->GetStringUTFChars(jarg36, 0);
    if (!arg36) return 0;
  }
  arg37 = (int)jarg37; 
  arg38 = 0;
  if (jarg38) {
    arg38 = (char *)jenv->GetStringUTFChars(jarg38, 0);
    if (!arg38) return 0;
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  arg41 = (long)jarg41; 
  arg42 = (long)jarg42; 
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    arg44=0;
    if(jarg44)
    {
      jsize sz = jenv->GetArrayLength(jarg44);
      int len = sz;
      //		fprintf(stderr,"jarg44 length %d\n",len);
      if(len)
      {
        arg44= (double*)jenv->GetDoubleArrayElements(jarg44, 0);
      }
    }
  }
  arg45 = (double)jarg45; 
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize len = jenv->GetArrayLength(jarg48);
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (int *)jenv->GetIntArrayElements(jarg48, 0);
      }
    }
  }
  result = (short)SOCPportfolio(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,SWIG_STD_MOVE(arg20),arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    if(arg32&&jarg32)
    {
      jenv->ReleaseDoubleArrayElements(jarg32, (jdouble*) arg32, 0);
      arg32=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35&&jarg35)
    {
      jenv->ReleaseDoubleArrayElements(jarg35, (jdouble*) arg35, 0);
      arg35=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44&&jarg44)
    {
      jenv->ReleaseDoubleArrayElements(jarg44, (jdouble*) arg44, 0);
      arg44=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48 && jarg48)
    {
      jenv->ReleaseIntArrayElements(jarg48, (jint*)arg48, 0);
      arg48=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    //We musn't free this arg24 input=jarg24 arg=jarg24 result=$result
  }
  {
    //We musn't free this arg26 input=jarg26 arg=jarg26 result=$result
  }
  {
    //We musn't free this arg27 input=jarg27 arg=jarg27 result=$result
  }
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }


  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_getmacaddress(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) "eth0" ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  getmacaddress(arg1);

}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1Entropy(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdouble jarg13, jdoubleArray jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jdouble jarg40, jdouble jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jint jarg44, jstring jarg45, jint jarg46, jint jarg47, jint jarg48, jint jarg49, jdouble jarg50, jdoubleArray jarg51) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  real arg13 ;
  vector arg14 = (vector) 0 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  double arg40 ;
  double arg41 ;
  double *arg42 = (double *) 0 ;
  vector arg43 = (vector) 0 ;
  int arg44 ;
  char *arg45 = (char *) 0 ;
  long arg46 ;
  long arg47 ;
  long arg48 ;
  long arg49 ;
  double arg50 ;
  vector arg51 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  arg13 = (real)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (double)jarg40; 
  arg41 = (double)jarg41; 
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  arg44 = (int)jarg44; 
  arg45 = 0;
  if (jarg45) {
    arg45 = (char *)jenv->GetStringUTFChars(jarg45, 0);
    if (!arg45) return 0;
  }
  arg46 = (long)jarg46; 
  arg47 = (long)jarg47; 
  arg48 = (long)jarg48; 
  arg49 = (long)jarg49; 
  arg50 = (double)jarg50; 
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    arg51=0;
    if(jarg51)
    {
      jsize sz = jenv->GetArrayLength(jarg51);
      int len = sz;
      //		fprintf(stderr,"jarg51 length %d\n",len);
      if(len)
      {
        arg51= (double*)jenv->GetDoubleArrayElements(jarg51, 0);
      }
    }
  }
  result = (short)Optimise_Entropy(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    if(arg51&&jarg51)
    {
      jenv->ReleaseDoubleArrayElements(jarg51, (jdouble*) arg51, 0);
      arg51=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg14 input=jarg14 arg=jarg14 result=$result
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }

  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_EntropyUtility(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jlong jarg14, jdoubleArray jarg15) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  vector arg10 = (vector) 0 ;
  real *arg11 = (real *) 0 ;
  real *arg12 = (real *) 0 ;
  vector arg13 = (vector) 0 ;
  dimen arg14 ;
  vector arg15 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (real)jarg8; 
  arg9 = (real)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (dimen)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  EntropyUtility(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1EntropyU(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdouble jarg13, jdoubleArray jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jdouble jarg40, jdouble jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jint jarg44, jstring jarg45, jint jarg46, jint jarg47, jint jarg48, jint jarg49, jdouble jarg50, jdoubleArray jarg51) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  real arg13 ;
  vector arg14 = (vector) 0 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  double arg40 ;
  double arg41 ;
  double *arg42 = (double *) 0 ;
  vector arg43 = (vector) 0 ;
  int arg44 ;
  char *arg45 = (char *) 0 ;
  long arg46 ;
  long arg47 ;
  long arg48 ;
  long arg49 ;
  double arg50 ;
  vector arg51 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  arg13 = (real)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  arg40 = (double)jarg40; 
  arg41 = (double)jarg41; 
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  arg44 = (int)jarg44; 
  arg45 = 0;
  if (jarg45) {
    arg45 = (char *)jenv->GetStringUTFChars(jarg45, 0);
    if (!arg45) return 0;
  }
  arg46 = (long)jarg46; 
  arg47 = (long)jarg47; 
  arg48 = (long)jarg48; 
  arg49 = (long)jarg49; 
  arg50 = (double)jarg50; 
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    arg51=0;
    if(jarg51)
    {
      jsize sz = jenv->GetArrayLength(jarg51);
      int len = sz;
      //		fprintf(stderr,"jarg51 length %d\n",len);
      if(len)
      {
        arg51= (double*)jenv->GetDoubleArrayElements(jarg51, 0);
      }
    }
  }
  result = (short)Optimise_EntropyU(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    if(arg51&&jarg51)
    {
      jenv->ReleaseDoubleArrayElements(jarg51, (jdouble*) arg51, 0);
      arg51=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg14 input=jarg14 arg=jarg14 result=$result
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }

  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseCrossEntropy(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdouble jarg13, jdoubleArray jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jint jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jintArray jarg24, jdoubleArray jarg25, jobjectArray jarg26, jdoubleArray jarg27, jdouble jarg28, jdouble jarg29, jdoubleArray jarg30, jdoubleArray jarg31, jint jarg32, jstring jarg33) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  real arg13 ;
  vector arg14 = (vector) 0 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int *arg24 = (int *) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  double arg28 ;
  double arg29 ;
  double *arg30 = (double *) 0 ;
  vector arg31 = (vector) 0 ;
  int arg32 ;
  char *arg33 = (char *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  arg13 = (real)jarg13; 
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize len = jenv->GetArrayLength(jarg24);
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (int *)jenv->GetIntArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(jarg26)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg26);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg26=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg26 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg26[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg26=0;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  arg28 = (double)jarg28; 
  arg29 = (double)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize sz = jenv->GetArrayLength(jarg31);
      int len = sz;
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (double*)jenv->GetDoubleArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (int)jarg32; 
  arg33 = 0;
  if (jarg33) {
    arg33 = (char *)jenv->GetStringUTFChars(jarg33, 0);
    if (!arg33) return 0;
  }
  result = (short)OptimiseCrossEntropy(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24 && jarg24)
    {
      jenv->ReleaseIntArrayElements(jarg24, (jint*)arg24, 0);
      arg24=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg26);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg26, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg26[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg26, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31&&jarg31)
    {
      jenv->ReleaseDoubleArrayElements(jarg31, (jdouble*) arg31, 0);
      arg31=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg14 input=jarg14 arg=jarg14 result=$result
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }

  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SDPsvec(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  SDPsvec(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SDPsMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  SDPsMat(SWIG_STD_MOVE(arg1),arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_nullA(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jint jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  result = (int)nullA(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_LPQN(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  result = (short)LPQN(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_GAUSS_1NEWTON_1Optimiser(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2, jlongArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10) {
  jshort jresult = 0 ;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
        arg2 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg2[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg2, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
        arg3 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg3[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg3, tt, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  result = (short)GAUSS_NEWTON_Optimiser(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      jlong* tt=jenv->GetLongArrayElements(jarg2, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg2[i];
      jenv->ReleaseLongArrayElements(jarg2, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      jlong* tt=jenv->GetLongArrayElements(jarg3, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg3[i];
      jenv->ReleaseLongArrayElements(jarg3, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    //We musn't free this arg10 input=jarg10 arg=jarg10 result=$result
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_packed2symm(JNIEnv *jenv, jclass jcls, jint jarg1, jdoubleArray jarg2) {
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Integer)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  packed2symm(arg1,arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_symm2packed(JNIEnv *jenv, jclass jcls, jint jarg1, jdoubleArray jarg2) {
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Integer)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  symm2packed(arg1,arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Conic_1General(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2, jintArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdouble jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jstring jarg19, jint jarg20) {
  jshort jresult = 0 ;
  size_t arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  double arg13 = (double) 1e-8 ;
  double arg14 = (double) 1e-8 ;
  double arg15 = (double) 2e-2 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 1 ;
  int arg18 = (int) 0 ;
  char *arg19 = (char *) 0 ;
  int arg20 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (int *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (int *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (int)jarg16; 
  arg17 = (int)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = 0;
  if (jarg19) {
    arg19 = (char *)jenv->GetStringUTFChars(jarg19, 0);
    if (!arg19) return 0;
  }
  arg20 = (int)jarg20; 
  result = (short)Conic_General(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    //We musn't free this arg10 input=jarg10 arg=jarg10 result=$result
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }

  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_get_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  get_w(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_WtransSDP(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jboolean jarg5, jboolean jarg6) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  bool arg5 = (bool) false ;
  bool arg6 = (bool) false ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  WtransSDP(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_applyXSDP(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  applyXSDP(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_applyXm1SDP(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  applyXm1SDP(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SDPsymm2MCAR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  SDPsymm2MCAR(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_factor_1model_1process_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  factor_model_process_inverse(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_facmul_1and_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jint jarg6) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  int arg6 = (int) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (int)jarg6; 
  facmul_and_inv(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_small_1round(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)small_round(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_make_1indexM(JNIEnv *jenv, jclass jcls, jint jarg1, jdoubleArray jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5) {
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Integer)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (Integer *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (Integer *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  make_indexM(arg1,arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_pull_1BITA(JNIEnv *jenv, jclass jcls, jintArray jarg1, jdoubleArray jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5, jdoubleArray jarg6, jintArray jarg7, jintArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jintArray jarg11, jdoubleArray jarg12, jintArray jarg13, jintArray jarg14) {
  jint jresult = 0 ;
  Integer *arg1 = (Integer *) 0 ;
  double *arg2 = (double *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  double *arg6 = (double *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  Integer *arg8 = (Integer *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  Integer *arg11 = (Integer *) 0 ;
  double *arg12 = (double *) 0 ;
  Integer *arg13 = (Integer *) 0 ;
  Integer *arg14 = (Integer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize len = jenv->GetArrayLength(jarg1);
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (Integer *)jenv->GetIntArrayElements(jarg1, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (Integer *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (Integer *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (Integer *)jenv->GetIntArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize len = jenv->GetArrayLength(jarg8);
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (Integer *)jenv->GetIntArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize len = jenv->GetArrayLength(jarg11);
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (Integer *)jenv->GetIntArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize len = jenv->GetArrayLength(jarg13);
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (Integer *)jenv->GetIntArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize len = jenv->GetArrayLength(jarg14);
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (Integer *)jenv->GetIntArrayElements(jarg14, 0);
      }
    }
  }
  result = (int)pull_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1 && jarg1)
    {
      jenv->ReleaseIntArrayElements(jarg1, (jint*)arg1, 0);
      arg1=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint*)arg7, 0);
      arg7=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8 && jarg8)
    {
      jenv->ReleaseIntArrayElements(jarg8, (jint*)arg8, 0);
      arg8=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11 && jarg11)
    {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg11, 0);
      arg11=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13 && jarg13)
    {
      jenv->ReleaseIntArrayElements(jarg13, (jint*)arg13, 0);
      arg13=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14 && jarg14)
    {
      jenv->ReleaseIntArrayElements(jarg14, (jint*)arg14, 0);
      arg14=0;
    } 
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_sns_1BITA(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2, jdoubleArray jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jintArray jarg11, jintArray jarg12) {
  jint jresult = 0 ;
  Integer *arg1 = (Integer *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  double *arg3 = (double *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  Integer *arg11 = (Integer *) 0 ;
  Integer *arg12 = (Integer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize len = jenv->GetArrayLength(jarg1);
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (Integer *)jenv->GetIntArrayElements(jarg1, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (Integer *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (Integer *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (Integer *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize len = jenv->GetArrayLength(jarg11);
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (Integer *)jenv->GetIntArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize len = jenv->GetArrayLength(jarg12);
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (Integer *)jenv->GetIntArrayElements(jarg12, 0);
      }
    }
  }
  result = (int)sns_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1 && jarg1)
    {
      jenv->ReleaseIntArrayElements(jarg1, (jint*)arg1, 0);
      arg1=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11 && jarg11)
    {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg11, 0);
      arg11=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12 && jarg12)
    {
      jenv->ReleaseIntArrayElements(jarg12, (jint*)arg12, 0);
      arg12=0;
    } 
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_ssf_1BITA(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8, jintArray jarg9, jintArray jarg10, jintArray jarg11, jintArray jarg12, jintArray jarg13, jintArray jarg14, jintArray jarg15) {
  jint jresult = 0 ;
  Integer *arg1 = (Integer *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  Integer *arg8 = (Integer *) 0 ;
  Integer *arg9 = (Integer *) 0 ;
  Integer *arg10 = (Integer *) 0 ;
  Integer *arg11 = (Integer *) 0 ;
  Integer *arg12 = (Integer *) 0 ;
  Integer *arg13 = (Integer *) 0 ;
  Integer *arg14 = (Integer *) 0 ;
  Integer *arg15 = (Integer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize len = jenv->GetArrayLength(jarg1);
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (Integer *)jenv->GetIntArrayElements(jarg1, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (Integer *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (Integer *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (Integer *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (Integer *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (Integer *)jenv->GetIntArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize len = jenv->GetArrayLength(jarg8);
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (Integer *)jenv->GetIntArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (Integer *)jenv->GetIntArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize len = jenv->GetArrayLength(jarg10);
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (Integer *)jenv->GetIntArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize len = jenv->GetArrayLength(jarg11);
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (Integer *)jenv->GetIntArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize len = jenv->GetArrayLength(jarg12);
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (Integer *)jenv->GetIntArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize len = jenv->GetArrayLength(jarg13);
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (Integer *)jenv->GetIntArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize len = jenv->GetArrayLength(jarg14);
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (Integer *)jenv->GetIntArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize len = jenv->GetArrayLength(jarg15);
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (Integer *)jenv->GetIntArrayElements(jarg15, 0);
      }
    }
  }
  result = (int)ssf_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1 && jarg1)
    {
      jenv->ReleaseIntArrayElements(jarg1, (jint*)arg1, 0);
      arg1=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint*)arg7, 0);
      arg7=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8 && jarg8)
    {
      jenv->ReleaseIntArrayElements(jarg8, (jint*)arg8, 0);
      arg8=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9 && jarg9)
    {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg9, 0);
      arg9=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10 && jarg10)
    {
      jenv->ReleaseIntArrayElements(jarg10, (jint*)arg10, 0);
      arg10=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11 && jarg11)
    {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg11, 0);
      arg11=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12 && jarg12)
    {
      jenv->ReleaseIntArrayElements(jarg12, (jint*)arg12, 0);
      arg12=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13 && jarg13)
    {
      jenv->ReleaseIntArrayElements(jarg13, (jint*)arg13, 0);
      arg13=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14 && jarg14)
    {
      jenv->ReleaseIntArrayElements(jarg14, (jint*)arg14, 0);
      arg14=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15 && jarg15)
    {
      jenv->ReleaseIntArrayElements(jarg15, (jint*)arg15, 0);
      arg15=0;
    } 
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_A2U(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2, jintArray jarg3, jintArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jintArray jarg7) {
  Integer arg1 ;
  Integer *arg2 = (Integer *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Integer)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (Integer *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (Integer *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (Integer *)jenv->GetIntArrayElements(jarg7, 0);
      }
    }
  }
  A2U(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint*)arg7, 0);
      arg7=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_UseSparseCh(JNIEnv *jenv, jclass jcls, jint jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Integer)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  UseSparseCh(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Conic_1VeryGeneral(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2, jintArray jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdouble jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jstring jarg19, jint jarg20, jint jarg21, jint jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jdoubleArray jarg25, jlong jarg26) {
  jshort jresult = 0 ;
  size_t arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  char *arg19 = (char *) 0 ;
  int arg20 ;
  int arg21 ;
  long arg22 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  size_t arg26 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (int *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (int *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (int)jarg16; 
  arg17 = (int)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = 0;
  if (jarg19) {
    arg19 = (char *)jenv->GetStringUTFChars(jarg19, 0);
    if (!arg19) return 0;
  }
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (long)jarg22; 
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  arg26 = (size_t)jarg26; 
  result = (short)Conic_VeryGeneral(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,SWIG_STD_MOVE(arg26));
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    //We musn't free this arg10 input=jarg10 arg=jarg10 result=$result
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }

  {
    //We musn't free this arg23 input=jarg23 arg=jarg23 result=$result
  }
  {
    //We musn't free this arg24 input=jarg24 arg=jarg24 result=$result
  }
  {
    //We musn't free this arg25 input=jarg25 arg=jarg25 result=$result
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_lowrank_1facmul_1and_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jint jarg7, jintArray jarg8) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  int arg7 = (int) 0 ;
  short_scl *arg8 = (short_scl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (int)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize len = jenv->GetArrayLength(jarg8);
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (short_scl *)jenv->GetIntArrayElements(jarg8, 0);
      }
    }
  }
  lowrank_facmul_and_inv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8 && jarg8)
    {
      jenv->ReleaseIntArrayElements(jarg8, (jint*)arg8, 0);
      arg8=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_process_1lowrank_1plus_1symm_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jintArray jarg6) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  short_scl *arg6 = (short_scl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (short_scl *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  process_lowrank_plus_symm_inverse(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_W2trans(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  W2trans(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Wtrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  Wtrans(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SDPwsymm2MCAR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  size_t arg1 ;
  size_t arg2 ;
  double arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  SDPwsymm2MCAR(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg5 input=jarg5 arg=jarg5 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_SDPvec2MCAR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  SDPvec2MCAR(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_RiskParityOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jint jarg12, jintArray jarg13, jint jarg14, jint jarg15, jint jarg16, jint jarg17, jdoubleArray jarg18, jdouble jarg19) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  int arg12 = (int) 0 ;
  int *arg13 = (int *) 0 ;
  int arg14 = (int) 1 ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 0 ;
  double *arg18 = (double *) 0 ;
  double arg19 = (double) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (int)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize len = jenv->GetArrayLength(jarg13);
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (int *)jenv->GetIntArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  arg16 = (int)jarg16; 
  arg17 = (int)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  arg19 = (double)jarg19; 
  result = (short)RiskParityOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13 && jarg13)
    {
      jenv->ReleaseIntArrayElements(jarg13, (jint*)arg13, 0);
      arg13=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_RiskParitySolveF(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jlong jarg11, jdoubleArray jarg12, jint jarg13, jint jarg14) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 = (size_t) 0 ;
  double *arg12 = (double *) 0 ;
  int arg13 = (int) 0 ;
  int arg14 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (size_t)jarg11; 
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (short)RiskParitySolveF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,SWIG_STD_MOVE(arg11),arg12,arg13,arg14);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_RiskParitySolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jint jarg11, jint jarg12) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 = (int) 0 ;
  int arg12 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (short)RiskParitySolve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_RiskParitySolve2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jint jarg11, jint jarg12, jint jarg13, jdouble jarg14, jdouble jarg15) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 = (int) 0 ;
  int arg12 = (int) 0 ;
  int arg13 = (int) 0 ;
  double arg14 = (double) 0.0 ;
  double arg15 = (double) 0.0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  result = (short)RiskParitySolve2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_SharpOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jint jarg13, jint jarg14, jint jarg15, jint jarg16) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  int arg13 = (int) 0 ;
  int arg14 = (int) 0 ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (long)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  arg16 = (int)jarg16; 
  result = (short)SharpOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    //We musn't free this arg9 input=jarg9 arg=jarg9 result=$result
  }
  {
    //We musn't free this arg10 input=jarg10 arg=jarg10 result=$result
  }
  {
    //We musn't free this arg11 input=jarg11 arg=jarg11 result=$result
  }
  {
    //We musn't free this arg12 input=jarg12 arg=jarg12 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseGeneral(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jobject jarg9, jobject jarg10, jobject jarg11) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pUtility arg9 = (pUtility) 0 ;
  pModC arg10 = (pModC) 0 ;
  pModQ arg11 = (pModQ) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  void *arg14 = (void *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (dimen)jarg3; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"Gen_U";
      arg9=(pUtility)CallUtil;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"modc";
      arg10=(pModC)CallModC;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  {
    if(jarg11)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg11;
      info->functionName=(char*)"modq";
      arg11=(pModQ)CallModQ;
      arg14=(void*)info;
    }
    else
    {
      arg11=0;
      arg14=0;
    }
  }
  result = (short)OptimiseGeneral(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),SWIG_STD_MOVE(arg11),arg12,arg13,arg14);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg12;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg13;
      delete info;
    }
  }
  {
    if(jarg11)
    {
      JavaInfo* info =(JavaInfo*) arg14;
      delete info;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_CanCastAsInteger(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize sz = jenv->GetArrayLength(jarg1);
      int len = sz;
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (double*)jenv->GetDoubleArrayElements(jarg1, 0);
      }
    }
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)CanCastAsInteger(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1&&jarg1)
    {
      jenv->ReleaseDoubleArrayElements(jarg1, (jdouble*) arg1, 0);
      arg1=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_dgetrf_1BITA(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2, jdoubleArray jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6) {
  jint jresult = 0 ;
  Integer *arg1 = (Integer *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  double *arg3 = (double *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize len = jenv->GetArrayLength(jarg1);
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (Integer *)jenv->GetIntArrayElements(jarg1, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (Integer *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (Integer *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (Integer *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  result = (int)dgetrf_BITA(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1 && jarg1)
    {
      jenv->ReleaseIntArrayElements(jarg1, (jint*)arg1, 0);
      arg1=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_dgetri_1BITA(JNIEnv *jenv, jclass jcls, jintArray jarg1, jdoubleArray jarg2, jintArray jarg3, jintArray jarg4, jdoubleArray jarg5, jintArray jarg6, jintArray jarg7) {
  jint jresult = 0 ;
  Integer *arg1 = (Integer *) 0 ;
  double *arg2 = (double *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  double *arg5 = (double *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    arg1=0;
    if(jarg1)
    {
      jsize len = jenv->GetArrayLength(jarg1);
      //		fprintf(stderr,"jarg1 length %d\n",len);
      if(len)
      {
        arg1= (Integer *)jenv->GetIntArrayElements(jarg1, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (Integer *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize len = jenv->GetArrayLength(jarg4);
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (Integer *)jenv->GetIntArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (Integer *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize len = jenv->GetArrayLength(jarg7);
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (Integer *)jenv->GetIntArrayElements(jarg7, 0);
      }
    }
  }
  result = (int)dgetri_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(arg1 && jarg1)
    {
      jenv->ReleaseIntArrayElements(jarg1, (jint*)arg1, 0);
      arg1=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4 && jarg4)
    {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
      arg4=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7 && jarg7)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint*)arg7, 0);
      arg7=0;
    } 
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_dgetrs_1BITA(JNIEnv *jenv, jclass jcls, jstring jarg1, jintArray jarg2, jintArray jarg3, jdoubleArray jarg4, jintArray jarg5, jintArray jarg6, jdoubleArray jarg7, jintArray jarg8, jintArray jarg9) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  double *arg4 = (double *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  double *arg7 = (double *) 0 ;
  Integer *arg8 = (Integer *) 0 ;
  Integer *arg9 = (Integer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize len = jenv->GetArrayLength(jarg2);
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (Integer *)jenv->GetIntArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize len = jenv->GetArrayLength(jarg3);
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (Integer *)jenv->GetIntArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (Integer *)jenv->GetIntArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize len = jenv->GetArrayLength(jarg6);
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (Integer *)jenv->GetIntArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize len = jenv->GetArrayLength(jarg8);
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (Integer *)jenv->GetIntArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (Integer *)jenv->GetIntArrayElements(jarg9, 0);
      }
    }
  }
  result = (int)dgetrs_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2 && jarg2)
    {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg2, 0);
      arg2=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3 && jarg3)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg3, 0);
      arg3=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseIntArrayElements(jarg5, (jint*)arg5, 0);
      arg5=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6 && jarg6)
    {
      jenv->ReleaseIntArrayElements(jarg6, (jint*)arg6, 0);
      arg6=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8 && jarg8)
    {
      jenv->ReleaseIntArrayElements(jarg8, (jint*)arg8, 0);
      arg8=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9 && jarg9)
    {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg9, 0);
      arg9=0;
    } 
  }

  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Accumulation5_110_140(JNIEnv *jenv, jclass jcls, jlong jarg2, jlong jarg3, jint jarg4) {
  jshort jresult = 0 ;
  void *arg1 = (void *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  int arg4 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (int)jarg4; 
  result = (short)Accumulation5_10_40(arg1,arg2,arg3,arg4);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_EndRound(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)EndRound(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseGeneralBarrier(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jobject jarg8, jobject jarg9, jobject jarg10, jdouble jarg14, jdouble jarg15, jdouble jarg16, jdouble jarg17, jintArray jarg18) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1000 ;
  double arg15 = (double) .5 ;
  double arg16 = (double) .9 ;
  double arg17 = (double) .001 ;
  int *arg18 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    if(jarg8)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg8;
      info->functionName=(char*)"Bar_U";
      arg8=(pUtility)CallUtil;
      arg11=(void*)info;
    }
    else
    {
      arg8=0;
      arg11=0;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"Bar_Grad";
      arg9=(pModC)CallModC;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"Bar_Hess";
      arg10=(pModQ)CallModQ;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize len = jenv->GetArrayLength(jarg18);
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (int *)jenv->GetIntArrayElements(jarg18, 0);
      }
    }
  }
  result = (short)OptimiseGeneralBarrier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,SWIG_STD_MOVE(arg8),SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo* info =(JavaInfo*) arg9;
      delete info;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg11;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18 && jarg18)
    {
      jenv->ReleaseIntArrayElements(jarg18, (jint*)arg18, 0);
      arg18=0;
    } 
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseNLC(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jobject jarg6, jobject jarg8, jobject jarg9, jobject jarg10, jdouble jarg14, jdouble jarg15, jdouble jarg16, jdouble jarg17, jdouble jarg18, jdouble jarg19, jintArray jarg20, jint jarg21, jint jarg22) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1e-11 ;
  double arg15 = (double) 100 ;
  double arg16 = (double) .96 ;
  double arg17 = (double) 1000.0 ;
  double arg18 = (double) 1.267 ;
  double arg19 = (double) 0 ;
  int *arg20 = (int *) 0 ;
  int arg21 = (int) 0 ;
  int arg22 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"Bar_Ab";
      arg6=(pConstraintFunc)CallModAb;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg8;
      info->functionName=(char*)"Bar_U";
      arg8=(pUtility)CallUtil;
      arg11=(void*)info;
    }
    else
    {
      arg8=0;
      arg11=0;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"Bar_Grad";
      arg9=(pModC)CallModC;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"Bar_Hess";
      arg10=(pModQ)CallModQ;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize len = jenv->GetArrayLength(jarg20);
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (int *)jenv->GetIntArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  result = (short)OptimiseNLC(arg1,arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg5;
      delete info;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo* info =(JavaInfo*) arg9;
      delete info;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg11;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20 && jarg20)
    {
      jenv->ReleaseIntArrayElements(jarg20, (jint*)arg20, 0);
      arg20=0;
    } 
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseNLC1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jobject jarg6, jobject jarg8, jobject jarg9, jobject jarg10, jdouble jarg14, jintArray jarg15, jint jarg16, jdouble jarg17, jdouble jarg18, jdouble jarg19, jdouble jarg20) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1e-11 ;
  int *arg15 = (int *) 0 ;
  int arg16 = (int) 0 ;
  double arg17 = (double) 0.9 ;
  double arg18 = (double) 10.0 ;
  double arg19 = (double) 1.0 ;
  double arg20 = (double) 0.2 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"Bar_Ab";
      arg6=(pConstraintFunc)CallModAb;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg8;
      info->functionName=(char*)"Bar_U";
      arg8=(pUtility)CallUtil;
      arg11=(void*)info;
    }
    else
    {
      arg8=0;
      arg11=0;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"Bar_Grad";
      arg9=(pModC)CallModC;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"Bar_Hess";
      arg10=(pModQ)CallModQ;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  arg14 = (double)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize len = jenv->GetArrayLength(jarg15);
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (int *)jenv->GetIntArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (double)jarg17; 
  arg18 = (double)jarg18; 
  arg19 = (double)jarg19; 
  arg20 = (double)jarg20; 
  result = (short)OptimiseNLC1(arg1,arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg5;
      delete info;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo* info =(JavaInfo*) arg9;
      delete info;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg11;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15 && jarg15)
    {
      jenv->ReleaseIntArrayElements(jarg15, (jint*)arg15, 0);
      arg15=0;
    } 
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseNLC_1Seq(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jobject jarg6, jobject jarg8, jobject jarg9, jobject jarg10, jdouble jarg14, jintArray jarg15, jint jarg16, jdouble jarg17, jdoubleArray jarg18, jdoubleArray jarg19) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1e-11 ;
  int *arg15 = (int *) 0 ;
  int arg16 = (int) 0 ;
  double arg17 = (double) 1.0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"Bar_Ab";
      arg6=(pConstraintFunc)CallModAb;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg8;
      info->functionName=(char*)"Bar_U";
      arg8=(pUtility)CallUtil;
      arg11=(void*)info;
    }
    else
    {
      arg8=0;
      arg11=0;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"Bar_Grad";
      arg9=(pModC)CallModC;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"Bar_Hess";
      arg10=(pModQ)CallModQ;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  arg14 = (double)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize len = jenv->GetArrayLength(jarg15);
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (int *)jenv->GetIntArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (int)jarg16; 
  arg17 = (double)jarg17; 
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  result = (short)OptimiseNLC_Seq(arg1,arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg5;
      delete info;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo* info =(JavaInfo*) arg9;
      delete info;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg11;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15 && jarg15)
    {
      jenv->ReleaseIntArrayElements(jarg15, (jint*)arg15, 0);
      arg15=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    //We musn't free this arg18 input=jarg18 arg=jarg18 result=$result
  }
  {
    //We musn't free this arg19 input=jarg19 arg=jarg19 result=$result
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_gramS(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jbyteArray jarg5) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  bool *arg5 = (bool *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize len = jenv->GetArrayLength(jarg5);
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (bool *)jenv->GetByteArrayElements(jarg5, 0);
      }
    }
  }
  result = (short)gramS(arg1,arg2,arg3,arg4,arg5);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5 && jarg5)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte*)arg5, 0);
      arg5=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_inverseT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  inverseT(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_solveT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  solveT(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_solveTt(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  solveTt(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_multT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  multT(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_multTt(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  multTt(arg1,arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
}


SWIGEXPORT jboolean JNICALL Java_safejavaJNI_FixGram(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (bool)FixGram(arg1,arg2);
  jresult = (jboolean)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Arnoldi(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jint jarg5) {
  jlong jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  int arg5 = (int) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (int)jarg5; 
  result = Arnoldi(arg1,arg2,arg3,arg4,arg5);
  jresult = (jlong)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_pattern6(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jobject jarg6, jdoubleArray jarg8, jdouble jarg9, jdoubleArray jarg10, jdouble jarg11, jdouble jarg12, jlong jarg13, jlong jarg14, jlong jarg15, jintArray jarg16, jint jarg17) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  vector arg8 = (vector) 0 ;
  double arg9 ;
  vector arg10 = (vector) 0 ;
  double arg11 ;
  double arg12 ;
  unsigned long arg13 ;
  unsigned long arg14 ;
  unsigned long arg15 ;
  int *arg16 = (int *) 0 ;
  int arg17 ;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"util";
      arg6=(pUtility)CallUtil;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (double)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (unsigned long)jarg13; 
  arg14 = (unsigned long)jarg14; 
  arg15 = (unsigned long)jarg15; 
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize len = jenv->GetArrayLength(jarg16);
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (int *)jenv->GetIntArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (int)jarg17; 
  pattern6(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg7;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16 && jarg16)
    {
      jenv->ReleaseIntArrayElements(jarg16, (jint*)arg16, 0);
      arg16=0;
    } 
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_setunitHess(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  setunitHess(SWIG_STD_MOVE(arg1),arg2);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_findzero(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = findzero(SWIG_STD_MOVE(arg1),arg2);
  jresult = (jlong)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_safejavaJNI_parity_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jlong jarg9, jdoubleArray jarg10) {
  jboolean jresult = 0 ;
  size_t arg1 ;
  long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 = (size_t) 0 ;
  vector arg10 = (vector) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (size_t)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  result = (bool)parity_check(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10);
  jresult = (jboolean)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    //We musn't free this arg8 input=jarg8 arg=jarg8 result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptimiseNLCAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4, jlong jarg5, jobject jarg6, jobject jarg8, jobject jarg9, jobject jarg10, jdoubleArray jarg14, jdoubleArray jarg15) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"Bar_Ab";
      arg6=(pConstraintFunc)CallModAb;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg8;
      info->functionName=(char*)"Bar_U";
      arg8=(pUtility)CallUtil;
      arg11=(void*)info;
    }
    else
    {
      arg8=0;
      arg11=0;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"Bar_Grad";
      arg9=(pModC)CallModC;
      arg12=(void*)info;
    }
    else
    {
      arg9=0;
      arg12=0;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"Bar_Hess";
      arg10=(pModQ)CallModQ;
      arg13=(void*)info;
    }
    else
    {
      arg10=0;
      arg13=0;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  result = (short)OptimiseNLCAL(arg1,arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,SWIG_STD_MOVE(arg8),SWIG_STD_MOVE(arg9),SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14,arg15);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg5;
      delete info;
    }
  }
  {
    if(jarg8)
    {
      JavaInfo* info =(JavaInfo*) arg9;
      delete info;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg11;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_QuasiNewton(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3, jlong jarg4, jdoubleArray jarg5, jobject jarg6, jdouble jarg8, jint jarg9, jint jarg10, jdouble jarg11) {
  jshort jresult = 0 ;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  int arg3 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  double arg8 = (double) 1e-12 ;
  int arg9 = (int) 1 ;
  int arg10 = (int) 0 ;
  double arg11 = (double) 1e+8 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  arg3 = (int)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"util";
      arg6=(pUtility)CallUtil;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  arg8 = (double)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (double)jarg11; 
  result = (short)QuasiNewton(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5,SWIG_STD_MOVE(arg6),arg7,arg8,arg9,arg10,arg11);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg7;
      delete info;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_multistage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jobjectArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdouble jarg15, jdouble jarg16, jlongArray jarg17, jlong jarg18, jlong jarg19) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  char **arg12 = (char **) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  dimen *arg17 = (dimen *) 0 ;
  size_t arg18 = (size_t) 1 ;
  size_t arg19 = (size_t) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(jarg12)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      arg12=0;
      if(len)
      {
        arg12 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg12, i);
          arg12[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg12[len] = 0;
      }
    }
    else{
      arg12=0;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize len = jenv->GetArrayLength(jarg17);
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg17, 0);
        arg17 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg17[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg17, tt, 0);
      }
    }
  }
  arg18 = (size_t)jarg18; 
  arg19 = (size_t)jarg19; 
  result = multistage(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,SWIG_STD_MOVE(arg18),SWIG_STD_MOVE(arg19));
  jresult = (jlong)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    char **col=arg12;
    long i=0;
    if(arg12)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg12, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg12, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17 && jarg17)
    {
      jsize len = jenv->GetArrayLength(jarg17);
      jlong* tt=jenv->GetLongArrayElements(jarg17, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg17[i];
      jenv->ReleaseLongArrayElements(jarg17, tt, 0);
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_BasicQpOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jshort jarg9, jobject jarg10, jint jarg11, jlong jarg12, jdoubleArray jarg13, jint jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jlong jarg17, jlong jarg18, jlong jarg19, jdoubleArray jarg20, jobject jarg21, jobject jarg22, jobject jarg23) {
  jstring jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  unsigned char arg9 ;
  pHmul arg10 = (pHmul) 0 ;
  long arg11 = (long) -1 ;
  dimen arg12 = (dimen) 0 ;
  vector arg13 = (vector) 0 ;
  long arg14 = (long) -1 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  dimen arg17 = (dimen) 0 ;
  dimen arg18 = (dimen) 1 ;
  dimen arg19 = (dimen) 0 ;
  vector arg20 = (vector) 0 ;
  pUtility arg21 = (pUtility) 0 ;
  pModC arg22 = (pModC) 0 ;
  pModQ arg23 = (pModQ) 0 ;
  void *arg24 = (void *) 0 ;
  void *arg25 = (void *) 0 ;
  void *arg26 = (void *) 0 ;
  void *arg27 = (void *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  arg9 = (unsigned char)jarg9; 
  {
    if(jarg10)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg10;
      info->functionName=(char*)"hmul";
      arg10=(pHmul)CallHmul;
      arg24=(void*)info;
    }
    else
    {
      arg10=0;
      arg24=0;
    }
  }
  arg11 = (long)jarg11; 
  arg12 = (dimen)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (long)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (dimen)jarg17; 
  arg18 = (dimen)jarg18; 
  arg19 = (dimen)jarg19; 
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    if(jarg21)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg21;
      info->functionName=(char*)"util";
      arg21=(pUtility)CallUtil;
      arg25=(void*)info;
    }
    else
    {
      arg21=0;
      arg25=0;
    }
  }
  {
    if(jarg22)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg22;
      info->functionName=(char*)"modc";
      arg22=(pModC)CallModC;
      arg26=(void*)info;
    }
    else
    {
      arg22=0;
      arg26=0;
    }
  }
  {
    if(jarg23)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg23;
      info->functionName=(char*)"modq";
      arg23=(pModQ)CallModQ;
      arg27=(void*)info;
    }
    else
    {
      arg23=0;
      arg27=0;
    }
  }
  result = (char *)BasicQpOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,SWIG_STD_MOVE(arg10),arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,SWIG_STD_MOVE(arg21),SWIG_STD_MOVE(arg22),SWIG_STD_MOVE(arg23),arg24,arg25,arg26,arg27);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg10)
    {
      JavaInfo* info =(JavaInfo*) arg24;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg21)
    {
      JavaInfo* info =(JavaInfo*) arg25;
      delete info;
    }
  }
  {
    if(jarg22)
    {
      JavaInfo* info =(JavaInfo*) arg26;
      delete info;
    }
  }
  {
    if(jarg23)
    {
      JavaInfo* info =(JavaInfo*) arg27;
      delete info;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_simplex(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdouble jarg5, jdoubleArray jarg6, jlong jarg7, jlong jarg8, jlongArray jarg9, jlongArray jarg10, jlongArray jarg11, jobject jarg12) {
  dimen arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  dimen arg7 ;
  dimen arg8 ;
  dimen *arg9 = (dimen *) 0 ;
  dimen *arg10 = (dimen *) 0 ;
  dimen *arg11 = (dimen *) 0 ;
  pUtility arg12 ;
  void *arg13 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (double)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (dimen)jarg7; 
  arg8 = (dimen)jarg8; 
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg9, 0);
        arg9 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg9[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg9, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize len = jenv->GetArrayLength(jarg10);
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg10, 0);
        arg10 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg10[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg10, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize len = jenv->GetArrayLength(jarg11);
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg11, 0);
        arg11 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg11[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg11, tt, 0);
      }
    }
  }
  {
    if(jarg12)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg12;
      info->functionName=(char*)"util";
      arg12=(pUtility)CallUtil;
      arg13=(void*)info;
    }
    else
    {
      arg12=0;
      arg13=0;
    }
  }
  simplex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,SWIG_STD_MOVE(arg12),arg13);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9 && jarg9)
    {
      jsize len = jenv->GetArrayLength(jarg9);
      jlong* tt=jenv->GetLongArrayElements(jarg9, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg9[i];
      jenv->ReleaseLongArrayElements(jarg9, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10 && jarg10)
    {
      jsize len = jenv->GetArrayLength(jarg10);
      jlong* tt=jenv->GetLongArrayElements(jarg10, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg10[i];
      jenv->ReleaseLongArrayElements(jarg10, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11 && jarg11)
    {
      jsize len = jenv->GetArrayLength(jarg11);
      jlong* tt=jenv->GetLongArrayElements(jarg11, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg11[i];
      jenv->ReleaseLongArrayElements(jarg11, tt, 0);
    }
  }
  {
    if(jarg12)
    {
      JavaInfo* info =(JavaInfo*) arg13;
      delete info;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_factor_1model_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  factor_model_process(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_apt_1model_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg3=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg3 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg3[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  apt_model_process(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg3);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg3, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg3[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg3, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_NaiveRound(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  NaiveRound(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Solve1D(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  p1DFunc arg1 ;
  double arg2 = (double) 0 ;
  double arg3 = (double) .99999 ;
  double arg4 = (double) 1e-8 ;
  void *arg5 = (void *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    if(jarg1)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg1;
      info->functionName=(char*)"f1d";
      arg1=(p1DFunc)Call1D;
      arg5=(void*)info;
    }
    else
    {
      arg1=0;
      arg5=0;
    }
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)Solve1D(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    if(jarg1)
    {
      JavaInfo* info =(JavaInfo*) arg5;
      delete info;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_PathMin(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jint jarg6) {
  jdouble jresult = 0 ;
  p1DFunc arg1 ;
  double arg2 = (double) 0 ;
  double arg3 = (double) .99999 ;
  double arg4 = (double) 1e-8 ;
  void *arg5 = (void *) 0 ;
  int arg6 = (int) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    if(jarg1)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg1;
      info->functionName=(char*)"f1d";
      arg1=(p1DFunc)Call1D;
      arg5=(void*)info;
    }
    else
    {
      arg1=0;
      arg5=0;
    }
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg6 = (int)jarg6; 
  result = (double)PathMin(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  {
    if(jarg1)
    {
      JavaInfo* info =(JavaInfo*) arg5;
      delete info;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dmx_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  dmx_transpose(arg1,arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_get_1nfac(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) "modelgen.txt" ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = get_nfac(arg1);
  jresult = (jlong)result; 

  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_getdata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobjectArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jstring jarg7) {
  size_t arg1 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  char *arg7 = (char *) "modelgen.txt" ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg4[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  getdata(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }

}


SWIGEXPORT void JNICALL Java_safejavaJNI_get_1stocknames(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) "modelgen.txt" ;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(jarg1)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg1);
      int len = sz;
      //		fprintf(stderr,"jarg1 length %d\n",len);
      arg1=0;
      if(len)
      {
        arg1 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg1, i);
          arg1[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg1[len] = 0;
      }
    }
    else{
      arg1=0;
    }
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  get_stocknames(arg1,arg2);
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    char **col=arg1;
    long i=0;
    if(arg1)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg1, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg1, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }

}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_get_1nstocks(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) "modelgen.txt" ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = get_nstocks(arg1);
  jresult = (jlong)result; 

  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_get_1factornames(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) "modelgen.txt" ;
  
  (void)jenv;
  (void)jcls;
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    if(jarg1)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg1);
      int len = sz;
      //		fprintf(stderr,"jarg1 length %d\n",len);
      arg1=0;
      if(len)
      {
        arg1 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg1, i);
          arg1[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg1[len] = 0;
      }
    }
    else{
      arg1=0;
    }
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  get_factornames(arg1,arg2);
  {
    //	fprintf(stderr,"jarg1 %lx\n",jarg1);
    char **col=arg1;
    long i=0;
    if(arg1)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg1, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg1, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }

}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_conj_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jlong jarg5, jobject jarg6, jint jarg8, jint jarg9) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 = (dimen) 0 ;
  pHmul arg6 = (pHmul) 0 ;
  void *arg7 = (void *) 0 ;
  int arg8 = (int) 1 ;
  int arg9 = (int) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    if(jarg6)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg6;
      info->functionName=(char*)"hmul";
      arg6=(pHmul)CallHmul;
      arg7=(void*)info;
    }
    else
    {
      arg6=0;
      arg7=0;
    }
  }
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (short)conj_solve(arg1,arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6),arg7,arg8,arg9);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg6)
    {
      JavaInfo* info =(JavaInfo*) arg7;
      delete info;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVP(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  double arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  double arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  double arg22 ;
  double arg23 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  double arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (double)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (double)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (double)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (double)jarg22; 
  arg23 = (double)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (double)jarg26; 
  arg27 = (double)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (double)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  result = (short)Optimise_internalCVP(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    //We musn't free this arg13 input=jarg13 arg=jarg13 result=$result
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAextcosts(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdouble jarg19, jdouble jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jobject jarg40, jobject jarg41, jobject jarg42, jdouble jarg43, jdouble jarg44, jdoubleArray jarg45, jshort jarg49, jdoubleArray jarg50, jint jarg51, jstring jarg52, jshort jarg53, jint jarg54, jdouble jarg55, jint jarg56, jint jarg57, jint jarg58, jint jarg59, jdouble jarg60, jdouble jarg61, jdouble jarg62) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (real)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    if(jarg40)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg40;
      info->functionName=(char*)"util";
      arg40=(pUtility)CallUtil;
      arg46=(void*)info;
    }
    else
    {
      arg40=0;
      arg46=0;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg41;
      info->functionName=(char*)"modc";
      arg41=(pModC)CallModC;
      arg47=(void*)info;
    }
    else
    {
      arg41=0;
      arg47=0;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg42;
      info->functionName=(char*)"modq";
      arg42=(pModQ)CallModQ;
      arg48=(void*)info;
    }
    else
    {
      arg42=0;
      arg48=0;
    }
  }
  arg43 = (double)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg49 = (short)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = 0;
  if (jarg52) {
    arg52 = (char *)jenv->GetStringUTFChars(jarg52, 0);
    if (!arg52) return 0;
  }
  arg53 = (short)jarg53; 
  arg54 = (int)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (long)jarg58; 
  arg59 = (long)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  arg62 = (double)jarg62; 
  result = (short)Optimise_internalCVPAextcosts(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,SWIG_STD_MOVE(arg40),SWIG_STD_MOVE(arg41),SWIG_STD_MOVE(arg42),arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg40)
    {
      JavaInfo* info =(JavaInfo*) arg46;
      delete info;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAextcostsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdouble jarg19, jdouble jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jobject jarg40, jobject jarg41, jobject jarg42, jdouble jarg43, jdouble jarg44, jdoubleArray jarg45, jshort jarg49, jdoubleArray jarg50, jint jarg51, jstring jarg52, jshort jarg53, jint jarg54, jdouble jarg55, jint jarg56, jint jarg57, jint jarg58, jint jarg59, jdouble jarg60, jdouble jarg61, jdouble jarg62, jdouble jarg63, jdoubleArray jarg64) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (real)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    if(jarg40)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg40;
      info->functionName=(char*)"util";
      arg40=(pUtility)CallUtil;
      arg46=(void*)info;
    }
    else
    {
      arg40=0;
      arg46=0;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg41;
      info->functionName=(char*)"modc";
      arg41=(pModC)CallModC;
      arg47=(void*)info;
    }
    else
    {
      arg41=0;
      arg47=0;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg42;
      info->functionName=(char*)"modq";
      arg42=(pModQ)CallModQ;
      arg48=(void*)info;
    }
    else
    {
      arg42=0;
      arg48=0;
    }
  }
  arg43 = (double)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg49 = (short)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = 0;
  if (jarg52) {
    arg52 = (char *)jenv->GetStringUTFChars(jarg52, 0);
    if (!arg52) return 0;
  }
  arg53 = (short)jarg53; 
  arg54 = (int)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (long)jarg58; 
  arg59 = (long)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  arg62 = (double)jarg62; 
  arg63 = (double)jarg63; 
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    arg64=0;
    if(jarg64)
    {
      jsize sz = jenv->GetArrayLength(jarg64);
      int len = sz;
      //		fprintf(stderr,"jarg64 length %d\n",len);
      if(len)
      {
        arg64= (double*)jenv->GetDoubleArrayElements(jarg64, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostsl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,SWIG_STD_MOVE(arg40),SWIG_STD_MOVE(arg41),SWIG_STD_MOVE(arg42),arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg40)
    {
      JavaInfo* info =(JavaInfo*) arg46;
      delete info;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    if(arg64&&jarg64)
    {
      jenv->ReleaseDoubleArrayElements(jarg64, (jdouble*) arg64, 0);
      arg64=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }

  {
    if(arg64){
      delete[] arg64;arg64=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAextcostslSa(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdouble jarg19, jdouble jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jobject jarg40, jobject jarg41, jobject jarg42, jdouble jarg43, jdouble jarg44, jdoubleArray jarg45, jshort jarg49, jdoubleArray jarg50, jint jarg51, jstring jarg52, jshort jarg53, jint jarg54, jdouble jarg55, jint jarg56, jint jarg57, jint jarg58, jint jarg59, jdouble jarg60, jdouble jarg61, jdouble jarg62, jdouble jarg63, jdoubleArray jarg64, jdoubleArray jarg65) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (real)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    if(jarg40)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg40;
      info->functionName=(char*)"util";
      arg40=(pUtility)CallUtil;
      arg46=(void*)info;
    }
    else
    {
      arg40=0;
      arg46=0;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg41;
      info->functionName=(char*)"modc";
      arg41=(pModC)CallModC;
      arg47=(void*)info;
    }
    else
    {
      arg41=0;
      arg47=0;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg42;
      info->functionName=(char*)"modq";
      arg42=(pModQ)CallModQ;
      arg48=(void*)info;
    }
    else
    {
      arg42=0;
      arg48=0;
    }
  }
  arg43 = (double)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg49 = (short)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = 0;
  if (jarg52) {
    arg52 = (char *)jenv->GetStringUTFChars(jarg52, 0);
    if (!arg52) return 0;
  }
  arg53 = (short)jarg53; 
  arg54 = (int)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (long)jarg58; 
  arg59 = (long)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  arg62 = (double)jarg62; 
  arg63 = (double)jarg63; 
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    arg64=0;
    if(jarg64)
    {
      jsize sz = jenv->GetArrayLength(jarg64);
      int len = sz;
      //		fprintf(stderr,"jarg64 length %d\n",len);
      if(len)
      {
        arg64= (double*)jenv->GetDoubleArrayElements(jarg64, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize sz = jenv->GetArrayLength(jarg65);
      int len = sz;
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        arg65= (double*)jenv->GetDoubleArrayElements(jarg65, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostslSa(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,SWIG_STD_MOVE(arg40),SWIG_STD_MOVE(arg41),SWIG_STD_MOVE(arg42),arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg40)
    {
      JavaInfo* info =(JavaInfo*) arg46;
      delete info;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    if(arg64&&jarg64)
    {
      jenv->ReleaseDoubleArrayElements(jarg64, (jdouble*) arg64, 0);
      arg64=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65&&jarg65)
    {
      jenv->ReleaseDoubleArrayElements(jarg65, (jdouble*) arg65, 0);
      arg65=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }

  {
    if(arg64){
      delete[] arg64;arg64=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAextcostslSaM(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdouble jarg19, jdouble jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jobject jarg40, jobject jarg41, jobject jarg42, jdouble jarg43, jdouble jarg44, jdoubleArray jarg45, jshort jarg49, jdoubleArray jarg50, jint jarg51, jstring jarg52, jshort jarg53, jint jarg54, jdouble jarg55, jint jarg56, jint jarg57, jint jarg58, jint jarg59, jdouble jarg60, jdouble jarg61, jdouble jarg62, jdouble jarg63, jdoubleArray jarg64, jdoubleArray jarg65, jint jarg66, jlongArray jarg67) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  int arg66 = (int) 0 ;
  size_t *arg67 = (size_t *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (real)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    if(jarg40)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg40;
      info->functionName=(char*)"util";
      arg40=(pUtility)CallUtil;
      arg46=(void*)info;
    }
    else
    {
      arg40=0;
      arg46=0;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg41;
      info->functionName=(char*)"modc";
      arg41=(pModC)CallModC;
      arg47=(void*)info;
    }
    else
    {
      arg41=0;
      arg47=0;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg42;
      info->functionName=(char*)"modq";
      arg42=(pModQ)CallModQ;
      arg48=(void*)info;
    }
    else
    {
      arg42=0;
      arg48=0;
    }
  }
  arg43 = (double)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg49 = (short)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = 0;
  if (jarg52) {
    arg52 = (char *)jenv->GetStringUTFChars(jarg52, 0);
    if (!arg52) return 0;
  }
  arg53 = (short)jarg53; 
  arg54 = (int)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (long)jarg58; 
  arg59 = (long)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  arg62 = (double)jarg62; 
  arg63 = (double)jarg63; 
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    arg64=0;
    if(jarg64)
    {
      jsize sz = jenv->GetArrayLength(jarg64);
      int len = sz;
      //		fprintf(stderr,"jarg64 length %d\n",len);
      if(len)
      {
        arg64= (double*)jenv->GetDoubleArrayElements(jarg64, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize sz = jenv->GetArrayLength(jarg65);
      int len = sz;
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        arg65= (double*)jenv->GetDoubleArrayElements(jarg65, 0);
      }
    }
  }
  arg66 = (int)jarg66; 
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    arg67=0;
    if(jarg67)
    {
      jsize len = jenv->GetArrayLength(jarg67);
      //		fprintf(stderr,"jarg67 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg67, 0);
        arg67 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg67[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg67, tt, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostslSaM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,SWIG_STD_MOVE(arg40),SWIG_STD_MOVE(arg41),SWIG_STD_MOVE(arg42),arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg40)
    {
      JavaInfo* info =(JavaInfo*) arg46;
      delete info;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    if(arg64&&jarg64)
    {
      jenv->ReleaseDoubleArrayElements(jarg64, (jdouble*) arg64, 0);
      arg64=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65&&jarg65)
    {
      jenv->ReleaseDoubleArrayElements(jarg65, (jdouble*) arg65, 0);
      arg65=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    if(arg67 && jarg67)
    {
      jsize len = jenv->GetArrayLength(jarg67);
      jlong* tt=jenv->GetLongArrayElements(jarg67, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg67[i];
      jenv->ReleaseLongArrayElements(jarg67, tt, 0);
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }

  {
    if(arg64){
      delete[] arg64;arg64=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAextcostslSaMS(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdouble jarg19, jdouble jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jobject jarg40, jobject jarg41, jobject jarg42, jdouble jarg43, jdouble jarg44, jdoubleArray jarg45, jshort jarg49, jdoubleArray jarg50, jint jarg51, jstring jarg52, jshort jarg53, jint jarg54, jdouble jarg55, jint jarg56, jint jarg57, jint jarg58, jint jarg59, jdouble jarg60, jdouble jarg61, jdouble jarg62, jdouble jarg63, jdoubleArray jarg64, jdoubleArray jarg65, jint jarg66, jlongArray jarg67, jlong jarg68, jdouble jarg69) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  int arg66 = (int) 0 ;
  size_t *arg67 = (size_t *) 0 ;
  dimen arg68 = (dimen) 0 ;
  double arg69 = (double) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (real)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    if(jarg40)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg40;
      info->functionName=(char*)"util";
      arg40=(pUtility)CallUtil;
      arg46=(void*)info;
    }
    else
    {
      arg40=0;
      arg46=0;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg41;
      info->functionName=(char*)"modc";
      arg41=(pModC)CallModC;
      arg47=(void*)info;
    }
    else
    {
      arg41=0;
      arg47=0;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg42;
      info->functionName=(char*)"modq";
      arg42=(pModQ)CallModQ;
      arg48=(void*)info;
    }
    else
    {
      arg42=0;
      arg48=0;
    }
  }
  arg43 = (double)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg49 = (short)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = 0;
  if (jarg52) {
    arg52 = (char *)jenv->GetStringUTFChars(jarg52, 0);
    if (!arg52) return 0;
  }
  arg53 = (short)jarg53; 
  arg54 = (int)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (long)jarg58; 
  arg59 = (long)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  arg62 = (double)jarg62; 
  arg63 = (double)jarg63; 
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    arg64=0;
    if(jarg64)
    {
      jsize sz = jenv->GetArrayLength(jarg64);
      int len = sz;
      //		fprintf(stderr,"jarg64 length %d\n",len);
      if(len)
      {
        arg64= (double*)jenv->GetDoubleArrayElements(jarg64, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize sz = jenv->GetArrayLength(jarg65);
      int len = sz;
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        arg65= (double*)jenv->GetDoubleArrayElements(jarg65, 0);
      }
    }
  }
  arg66 = (int)jarg66; 
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    arg67=0;
    if(jarg67)
    {
      jsize len = jenv->GetArrayLength(jarg67);
      //		fprintf(stderr,"jarg67 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg67, 0);
        arg67 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg67[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg67, tt, 0);
      }
    }
  }
  arg68 = (dimen)jarg68; 
  arg69 = (double)jarg69; 
  result = (short)Optimise_internalCVPAextcostslSaMS(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,SWIG_STD_MOVE(arg40),SWIG_STD_MOVE(arg41),SWIG_STD_MOVE(arg42),arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg40)
    {
      JavaInfo* info =(JavaInfo*) arg46;
      delete info;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    if(arg64&&jarg64)
    {
      jenv->ReleaseDoubleArrayElements(jarg64, (jdouble*) arg64, 0);
      arg64=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65&&jarg65)
    {
      jenv->ReleaseDoubleArrayElements(jarg65, (jdouble*) arg65, 0);
      arg65=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    if(arg67 && jarg67)
    {
      jsize len = jenv->GetArrayLength(jarg67);
      jlong* tt=jenv->GetLongArrayElements(jarg67, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg67[i];
      jenv->ReleaseLongArrayElements(jarg67, tt, 0);
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }

  {
    if(arg64){
      delete[] arg64;arg64=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAextcostslSaMSoft(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdouble jarg15, jint jarg16, jint jarg17, jint jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jint jarg21, jint jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jintArray jarg28, jlong jarg29, jdoubleArray jarg30, jdouble jarg31, jlong jarg32, jobjectArray jarg33, jlong jarg34, jlongArray jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jobjectArray jarg38, jdoubleArray jarg39, jobject jarg40, jobject jarg41, jobject jarg42, jdouble jarg43, jdouble jarg44, jdoubleArray jarg45, jshort jarg49, jdoubleArray jarg50, jint jarg51, jstring jarg52, jshort jarg53, jint jarg54, jdouble jarg55, jint jarg56, jint jarg57, jint jarg58, jint jarg59, jdouble jarg60, jdouble jarg61, jdouble jarg62, jdouble jarg63, jdoubleArray jarg64, jdoubleArray jarg65, jint jarg66, jlongArray jarg67, jlong jarg68, jdoubleArray jarg69, jdoubleArray jarg70, jdoubleArray jarg71, jdoubleArray jarg72, jdoubleArray jarg73, jdouble jarg74, jdouble jarg75, jdouble jarg76, jintArray jarg77) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  int arg66 = (int) 0 ;
  size_t *arg67 = (size_t *) 0 ;
  dimen arg68 = (dimen) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  vector arg72 = (vector) 0 ;
  vector arg73 = (vector) 0 ;
  double arg74 = (double) -1 ;
  double arg75 = (double) -1 ;
  double arg76 = (double) -1 ;
  int *arg77 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  arg15 = (real)jarg15; 
  arg16 = (long)jarg16; 
  arg17 = (long)jarg17; 
  arg18 = (int)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (int)jarg21; 
  arg22 = (int)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize len = jenv->GetArrayLength(jarg28);
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (int *)jenv->GetIntArrayElements(jarg28, 0);
      }
    }
  }
  arg29 = (dimen)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  arg31 = (real)jarg31; 
  arg32 = (dimen)jarg32; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg33[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  arg34 = (dimen)jarg34; 
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
        arg35 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg35[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg35, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(jarg38)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg38=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg38 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg38[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg38=0;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize sz = jenv->GetArrayLength(jarg39);
      int len = sz;
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        arg39= (double*)jenv->GetDoubleArrayElements(jarg39, 0);
      }
    }
  }
  {
    if(jarg40)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg40;
      info->functionName=(char*)"util";
      arg40=(pUtility)CallUtil;
      arg46=(void*)info;
    }
    else
    {
      arg40=0;
      arg46=0;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg41;
      info->functionName=(char*)"modc";
      arg41=(pModC)CallModC;
      arg47=(void*)info;
    }
    else
    {
      arg41=0;
      arg47=0;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg42;
      info->functionName=(char*)"modq";
      arg42=(pModQ)CallModQ;
      arg48=(void*)info;
    }
    else
    {
      arg42=0;
      arg48=0;
    }
  }
  arg43 = (double)jarg43; 
  arg44 = (double)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg49 = (short)jarg49; 
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = 0;
  if (jarg52) {
    arg52 = (char *)jenv->GetStringUTFChars(jarg52, 0);
    if (!arg52) return 0;
  }
  arg53 = (short)jarg53; 
  arg54 = (int)jarg54; 
  arg55 = (double)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (long)jarg58; 
  arg59 = (long)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  arg62 = (double)jarg62; 
  arg63 = (double)jarg63; 
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    arg64=0;
    if(jarg64)
    {
      jsize sz = jenv->GetArrayLength(jarg64);
      int len = sz;
      //		fprintf(stderr,"jarg64 length %d\n",len);
      if(len)
      {
        arg64= (double*)jenv->GetDoubleArrayElements(jarg64, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize sz = jenv->GetArrayLength(jarg65);
      int len = sz;
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        arg65= (double*)jenv->GetDoubleArrayElements(jarg65, 0);
      }
    }
  }
  arg66 = (int)jarg66; 
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    arg67=0;
    if(jarg67)
    {
      jsize len = jenv->GetArrayLength(jarg67);
      //		fprintf(stderr,"jarg67 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg67, 0);
        arg67 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg67[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg67, tt, 0);
      }
    }
  }
  arg68 = (dimen)jarg68; 
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    arg69=0;
    if(jarg69)
    {
      jsize sz = jenv->GetArrayLength(jarg69);
      int len = sz;
      //		fprintf(stderr,"jarg69 length %d\n",len);
      if(len)
      {
        arg69= (double*)jenv->GetDoubleArrayElements(jarg69, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    arg70=0;
    if(jarg70)
    {
      jsize sz = jenv->GetArrayLength(jarg70);
      int len = sz;
      //		fprintf(stderr,"jarg70 length %d\n",len);
      if(len)
      {
        arg70= (double*)jenv->GetDoubleArrayElements(jarg70, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    arg71=0;
    if(jarg71)
    {
      jsize sz = jenv->GetArrayLength(jarg71);
      int len = sz;
      //		fprintf(stderr,"jarg71 length %d\n",len);
      if(len)
      {
        arg71= (double*)jenv->GetDoubleArrayElements(jarg71, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg72 %lx\n",jarg72);
    arg72=0;
    if(jarg72)
    {
      jsize sz = jenv->GetArrayLength(jarg72);
      int len = sz;
      //		fprintf(stderr,"jarg72 length %d\n",len);
      if(len)
      {
        arg72= (double*)jenv->GetDoubleArrayElements(jarg72, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg73 %lx\n",jarg73);
    arg73=0;
    if(jarg73)
    {
      jsize sz = jenv->GetArrayLength(jarg73);
      int len = sz;
      //		fprintf(stderr,"jarg73 length %d\n",len);
      if(len)
      {
        arg73= (double*)jenv->GetDoubleArrayElements(jarg73, 0);
      }
    }
  }
  arg74 = (double)jarg74; 
  arg75 = (double)jarg75; 
  arg76 = (double)jarg76; 
  {
    //	fprintf(stderr,"jarg77 %lx\n",jarg77);
    arg77=0;
    if(jarg77)
    {
      jsize len = jenv->GetArrayLength(jarg77);
      //		fprintf(stderr,"jarg77 length %d\n",len);
      if(len)
      {
        arg77= (int *)jenv->GetIntArrayElements(jarg77, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostslSaMSoft(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,SWIG_STD_MOVE(arg40),SWIG_STD_MOVE(arg41),SWIG_STD_MOVE(arg42),arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71,arg72,arg73,arg74,arg75,arg76,arg77);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28 && jarg28)
    {
      jenv->ReleaseIntArrayElements(jarg28, (jint*)arg28, 0);
      arg28=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      jlong* tt=jenv->GetLongArrayElements(jarg35, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg35[i];
      jenv->ReleaseLongArrayElements(jarg35, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg38 %lx\n",jarg38);
    if(arg38)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg38);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg38, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg38[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg38, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39&&jarg39)
    {
      jenv->ReleaseDoubleArrayElements(jarg39, (jdouble*) arg39, 0);
      arg39=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg40)
    {
      JavaInfo* info =(JavaInfo*) arg46;
      delete info;
    }
  }
  {
    if(jarg41)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg42)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    if(arg64&&jarg64)
    {
      jenv->ReleaseDoubleArrayElements(jarg64, (jdouble*) arg64, 0);
      arg64=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65&&jarg65)
    {
      jenv->ReleaseDoubleArrayElements(jarg65, (jdouble*) arg65, 0);
      arg65=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    if(arg67 && jarg67)
    {
      jsize len = jenv->GetArrayLength(jarg67);
      jlong* tt=jenv->GetLongArrayElements(jarg67, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg67[i];
      jenv->ReleaseLongArrayElements(jarg67, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    if(arg69&&jarg69)
    {
      jenv->ReleaseDoubleArrayElements(jarg69, (jdouble*) arg69, 0);
      arg69=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    if(arg70&&jarg70)
    {
      jenv->ReleaseDoubleArrayElements(jarg70, (jdouble*) arg70, 0);
      arg70=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    if(arg71&&jarg71)
    {
      jenv->ReleaseDoubleArrayElements(jarg71, (jdouble*) arg71, 0);
      arg71=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg72 %lx\n",jarg72);
    if(arg72&&jarg72)
    {
      jenv->ReleaseDoubleArrayElements(jarg72, (jdouble*) arg72, 0);
      arg72=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg73 %lx\n",jarg73);
    if(arg73&&jarg73)
    {
      jenv->ReleaseDoubleArrayElements(jarg73, (jdouble*) arg73, 0);
      arg73=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg77 %lx\n",jarg77);
    if(arg77 && jarg77)
    {
      jenv->ReleaseIntArrayElements(jarg77, (jint*)arg77, 0);
      arg77=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }

  {
    if(arg64){
      delete[] arg64;arg64=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  {
    if(arg69){
      delete[] arg69;arg69=0;
    }
  }
  {
    if(arg70){
      delete[] arg70;arg70=0;
    }
  }
  {
    if(arg71){
      delete[] arg71;arg71=0;
    }
  }
  {
    if(arg72){
      delete[] arg72;arg72=0;
    }
  }
  {
    if(arg73){
      delete[] arg73;arg73=0;
    }
  }
  {
    if(arg77){
      delete[] arg77;arg77=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jint jarg44, jstring jarg45) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  int arg44 = (int) 0 ;
  char *arg45 = (char *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  arg44 = (int)jarg44; 
  arg45 = 0;
  if (jarg45) {
    arg45 = (char *)jenv->GetStringUTFChars(jarg45, 0);
    if (!arg45) return 0;
  }
  result = (short)Optimise_internalCVPA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAF(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  result = (short)Optimise_internalCVPAF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFb(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  result = (short)Optimise_internalCVPAFb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFbl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFbl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63, jdoubleArray jarg64) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  vector arg64 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    arg64=0;
    if(jarg64)
    {
      jsize sz = jenv->GetArrayLength(jarg64);
      int len = sz;
      //		fprintf(stderr,"jarg64 length %d\n",len);
      if(len)
      {
        arg64= (double*)jenv->GetDoubleArrayElements(jarg64, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFblQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg64 %lx\n",jarg64);
    if(arg64&&jarg64)
    {
      jenv->ReleaseDoubleArrayElements(jarg64, (jdouble*) arg64, 0);
      arg64=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  {
    if(arg64){
      delete[] arg64;arg64=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblSa(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSa(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblSaM(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63, jint jarg64, jlongArray jarg65) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  arg64 = (int)jarg64; 
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
        arg65 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg65[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg65, tt, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65 && jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg65[i];
      jenv->ReleaseLongArrayElements(jarg65, tt, 0);
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblSaMS(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63, jint jarg64, jlongArray jarg65, jlong jarg66, jdouble jarg67) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  double arg67 = (double) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  arg64 = (int)jarg64; 
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
        arg65 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg65[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg65, tt, 0);
      }
    }
  }
  arg66 = (dimen)jarg66; 
  arg67 = (double)jarg67; 
  result = (short)Optimise_internalCVPAFblSaMS(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65 && jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg65[i];
      jenv->ReleaseLongArrayElements(jarg65, tt, 0);
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblSaMSoft(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63, jint jarg64, jlongArray jarg65, jlong jarg66, jdoubleArray jarg67, jdoubleArray jarg68, jdoubleArray jarg69, jdoubleArray jarg70, jdoubleArray jarg71) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  vector arg67 = (vector) 0 ;
  vector arg68 = (vector) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  arg64 = (int)jarg64; 
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
        arg65 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg65[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg65, tt, 0);
      }
    }
  }
  arg66 = (dimen)jarg66; 
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    arg67=0;
    if(jarg67)
    {
      jsize sz = jenv->GetArrayLength(jarg67);
      int len = sz;
      //		fprintf(stderr,"jarg67 length %d\n",len);
      if(len)
      {
        arg67= (double*)jenv->GetDoubleArrayElements(jarg67, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg68 %lx\n",jarg68);
    arg68=0;
    if(jarg68)
    {
      jsize sz = jenv->GetArrayLength(jarg68);
      int len = sz;
      //		fprintf(stderr,"jarg68 length %d\n",len);
      if(len)
      {
        arg68= (double*)jenv->GetDoubleArrayElements(jarg68, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    arg69=0;
    if(jarg69)
    {
      jsize sz = jenv->GetArrayLength(jarg69);
      int len = sz;
      //		fprintf(stderr,"jarg69 length %d\n",len);
      if(len)
      {
        arg69= (double*)jenv->GetDoubleArrayElements(jarg69, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    arg70=0;
    if(jarg70)
    {
      jsize sz = jenv->GetArrayLength(jarg70);
      int len = sz;
      //		fprintf(stderr,"jarg70 length %d\n",len);
      if(len)
      {
        arg70= (double*)jenv->GetDoubleArrayElements(jarg70, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    arg71=0;
    if(jarg71)
    {
      jsize sz = jenv->GetArrayLength(jarg71);
      int len = sz;
      //		fprintf(stderr,"jarg71 length %d\n",len);
      if(len)
      {
        arg71= (double*)jenv->GetDoubleArrayElements(jarg71, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaMSoft(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65 && jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg65[i];
      jenv->ReleaseLongArrayElements(jarg65, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    if(arg67&&jarg67)
    {
      jenv->ReleaseDoubleArrayElements(jarg67, (jdouble*) arg67, 0);
      arg67=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg68 %lx\n",jarg68);
    if(arg68&&jarg68)
    {
      jenv->ReleaseDoubleArrayElements(jarg68, (jdouble*) arg68, 0);
      arg68=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    if(arg69&&jarg69)
    {
      jenv->ReleaseDoubleArrayElements(jarg69, (jdouble*) arg69, 0);
      arg69=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    if(arg70&&jarg70)
    {
      jenv->ReleaseDoubleArrayElements(jarg70, (jdouble*) arg70, 0);
      arg70=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    if(arg71&&jarg71)
    {
      jenv->ReleaseDoubleArrayElements(jarg71, (jdouble*) arg71, 0);
      arg71=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  {
    if(arg68){
      delete[] arg68;arg68=0;
    }
  }
  {
    if(arg69){
      delete[] arg69;arg69=0;
    }
  }
  {
    if(arg70){
      delete[] arg70;arg70=0;
    }
  }
  {
    if(arg71){
      delete[] arg71;arg71=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblSaMSoftQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdouble jarg22, jdouble jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63, jint jarg64, jlongArray jarg65, jlong jarg66, jdoubleArray jarg67, jdoubleArray jarg68, jdoubleArray jarg69, jdoubleArray jarg70, jdoubleArray jarg71, jdoubleArray jarg72, jdoubleArray jarg73, jdouble jarg74, jdouble jarg75, jdouble jarg76, jintArray jarg77) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  vector arg67 = (vector) 0 ;
  vector arg68 = (vector) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  vector arg72 = (vector) 0 ;
  vector arg73 = (vector) 0 ;
  double arg74 = (double) -1 ;
  double arg75 = (double) -1 ;
  double arg76 = (double) -1 ;
  int *arg77 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  arg22 = (real)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  arg64 = (int)jarg64; 
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
        arg65 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg65[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg65, tt, 0);
      }
    }
  }
  arg66 = (dimen)jarg66; 
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    arg67=0;
    if(jarg67)
    {
      jsize sz = jenv->GetArrayLength(jarg67);
      int len = sz;
      //		fprintf(stderr,"jarg67 length %d\n",len);
      if(len)
      {
        arg67= (double*)jenv->GetDoubleArrayElements(jarg67, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg68 %lx\n",jarg68);
    arg68=0;
    if(jarg68)
    {
      jsize sz = jenv->GetArrayLength(jarg68);
      int len = sz;
      //		fprintf(stderr,"jarg68 length %d\n",len);
      if(len)
      {
        arg68= (double*)jenv->GetDoubleArrayElements(jarg68, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    arg69=0;
    if(jarg69)
    {
      jsize sz = jenv->GetArrayLength(jarg69);
      int len = sz;
      //		fprintf(stderr,"jarg69 length %d\n",len);
      if(len)
      {
        arg69= (double*)jenv->GetDoubleArrayElements(jarg69, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    arg70=0;
    if(jarg70)
    {
      jsize sz = jenv->GetArrayLength(jarg70);
      int len = sz;
      //		fprintf(stderr,"jarg70 length %d\n",len);
      if(len)
      {
        arg70= (double*)jenv->GetDoubleArrayElements(jarg70, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    arg71=0;
    if(jarg71)
    {
      jsize sz = jenv->GetArrayLength(jarg71);
      int len = sz;
      //		fprintf(stderr,"jarg71 length %d\n",len);
      if(len)
      {
        arg71= (double*)jenv->GetDoubleArrayElements(jarg71, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg72 %lx\n",jarg72);
    arg72=0;
    if(jarg72)
    {
      jsize sz = jenv->GetArrayLength(jarg72);
      int len = sz;
      //		fprintf(stderr,"jarg72 length %d\n",len);
      if(len)
      {
        arg72= (double*)jenv->GetDoubleArrayElements(jarg72, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg73 %lx\n",jarg73);
    arg73=0;
    if(jarg73)
    {
      jsize sz = jenv->GetArrayLength(jarg73);
      int len = sz;
      //		fprintf(stderr,"jarg73 length %d\n",len);
      if(len)
      {
        arg73= (double*)jenv->GetDoubleArrayElements(jarg73, 0);
      }
    }
  }
  arg74 = (double)jarg74; 
  arg75 = (double)jarg75; 
  arg76 = (double)jarg76; 
  {
    //	fprintf(stderr,"jarg77 %lx\n",jarg77);
    arg77=0;
    if(jarg77)
    {
      jsize len = jenv->GetArrayLength(jarg77);
      //		fprintf(stderr,"jarg77 length %d\n",len);
      if(len)
      {
        arg77= (int *)jenv->GetIntArrayElements(jarg77, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaMSoftQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71,arg72,arg73,arg74,arg75,arg76,arg77);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65 && jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg65[i];
      jenv->ReleaseLongArrayElements(jarg65, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    if(arg67&&jarg67)
    {
      jenv->ReleaseDoubleArrayElements(jarg67, (jdouble*) arg67, 0);
      arg67=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg68 %lx\n",jarg68);
    if(arg68&&jarg68)
    {
      jenv->ReleaseDoubleArrayElements(jarg68, (jdouble*) arg68, 0);
      arg68=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    if(arg69&&jarg69)
    {
      jenv->ReleaseDoubleArrayElements(jarg69, (jdouble*) arg69, 0);
      arg69=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    if(arg70&&jarg70)
    {
      jenv->ReleaseDoubleArrayElements(jarg70, (jdouble*) arg70, 0);
      arg70=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    if(arg71&&jarg71)
    {
      jenv->ReleaseDoubleArrayElements(jarg71, (jdouble*) arg71, 0);
      arg71=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg72 %lx\n",jarg72);
    if(arg72&&jarg72)
    {
      jenv->ReleaseDoubleArrayElements(jarg72, (jdouble*) arg72, 0);
      arg72=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg73 %lx\n",jarg73);
    if(arg73&&jarg73)
    {
      jenv->ReleaseDoubleArrayElements(jarg73, (jdouble*) arg73, 0);
      arg73=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg77 %lx\n",jarg77);
    if(arg77 && jarg77)
    {
      jenv->ReleaseIntArrayElements(jarg77, (jint*)arg77, 0);
      arg77=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  {
    if(arg68){
      delete[] arg68;arg68=0;
    }
  }
  {
    if(arg69){
      delete[] arg69;arg69=0;
    }
  }
  {
    if(arg70){
      delete[] arg70;arg70=0;
    }
  }
  {
    if(arg71){
      delete[] arg71;arg71=0;
    }
  }
  {
    if(arg72){
      delete[] arg72;arg72=0;
    }
  }
  {
    if(arg73){
      delete[] arg73;arg73=0;
    }
  }
  {
    if(arg77){
      delete[] arg77;arg77=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1internalCVPAFblSaMSoftQV(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jlong jarg5, jobjectArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdouble jarg12, jdoubleArray jarg13, jdouble jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdouble jarg17, jint jarg18, jint jarg19, jint jarg20, jint jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jint jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jintArray jarg31, jlong jarg32, jdoubleArray jarg33, jdouble jarg34, jlong jarg35, jdoubleArray jarg36, jdoubleArray jarg37, jlong jarg38, jobjectArray jarg39, jlong jarg40, jlongArray jarg41, jdoubleArray jarg42, jdoubleArray jarg43, jobjectArray jarg44, jdoubleArray jarg45, jdouble jarg46, jdouble jarg47, jdoubleArray jarg48, jdoubleArray jarg49, jint jarg50, jstring jarg51, jint jarg52, jdouble jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdouble jarg60, jdouble jarg61, jdoubleArray jarg62, jdoubleArray jarg63, jint jarg64, jlongArray jarg65, jlong jarg66, jdoubleArray jarg67, jdoubleArray jarg68, jdoubleArray jarg69, jdoubleArray jarg70, jdoubleArray jarg71, jdoubleArray jarg72, jdoubleArray jarg73, jdouble jarg74, jdouble jarg75, jdouble jarg76, jintArray jarg77) {
  jshort jresult = 0 ;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  vector arg67 = (vector) 0 ;
  vector arg68 = (vector) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  vector arg72 = (vector) 0 ;
  vector arg73 = (vector) 0 ;
  double arg74 = (double) -1 ;
  double arg75 = (double) -1 ;
  double arg76 = (double) -1 ;
  int *arg77 = (int *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  arg5 = (dimen)jarg5; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(jarg6)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg6=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg6 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg6[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg6=0;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  arg12 = (real)jarg12; 
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (real)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  arg17 = (real)jarg17; 
  arg18 = (long)jarg18; 
  arg19 = (long)jarg19; 
  arg20 = (int)jarg20; 
  arg21 = (int)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  arg24 = (int)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize len = jenv->GetArrayLength(jarg31);
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (int *)jenv->GetIntArrayElements(jarg31, 0);
      }
    }
  }
  arg32 = (dimen)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  arg34 = (real)jarg34; 
  arg35 = (dimen)jarg35; 
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    arg36=0;
    if(jarg36)
    {
      jsize sz = jenv->GetArrayLength(jarg36);
      int len = sz;
      //		fprintf(stderr,"jarg36 length %d\n",len);
      if(len)
      {
        arg36= (double*)jenv->GetDoubleArrayElements(jarg36, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(jarg39)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg39=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg39 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg39[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg39=0;
    }
  }
  arg40 = (dimen)jarg40; 
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
        arg41 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg41[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg41, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(jarg44)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg44=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg44 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg44[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg44=0;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (double)jarg46; 
  arg47 = (double)jarg47; 
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    arg48=0;
    if(jarg48)
    {
      jsize sz = jenv->GetArrayLength(jarg48);
      int len = sz;
      //		fprintf(stderr,"jarg48 length %d\n",len);
      if(len)
      {
        arg48= (double*)jenv->GetDoubleArrayElements(jarg48, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  arg50 = (int)jarg50; 
  arg51 = 0;
  if (jarg51) {
    arg51 = (char *)jenv->GetStringUTFChars(jarg51, 0);
    if (!arg51) return 0;
  }
  arg52 = (int)jarg52; 
  arg53 = (double)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  arg60 = (double)jarg60; 
  arg61 = (double)jarg61; 
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    arg62=0;
    if(jarg62)
    {
      jsize sz = jenv->GetArrayLength(jarg62);
      int len = sz;
      //		fprintf(stderr,"jarg62 length %d\n",len);
      if(len)
      {
        arg62= (double*)jenv->GetDoubleArrayElements(jarg62, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    arg63=0;
    if(jarg63)
    {
      jsize sz = jenv->GetArrayLength(jarg63);
      int len = sz;
      //		fprintf(stderr,"jarg63 length %d\n",len);
      if(len)
      {
        arg63= (double*)jenv->GetDoubleArrayElements(jarg63, 0);
      }
    }
  }
  arg64 = (int)jarg64; 
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    arg65=0;
    if(jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      //		fprintf(stderr,"jarg65 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
        arg65 = new size_t[len];
        for(jsize i=0;i<len;++i)
        arg65[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg65, tt, 0);
      }
    }
  }
  arg66 = (dimen)jarg66; 
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    arg67=0;
    if(jarg67)
    {
      jsize sz = jenv->GetArrayLength(jarg67);
      int len = sz;
      //		fprintf(stderr,"jarg67 length %d\n",len);
      if(len)
      {
        arg67= (double*)jenv->GetDoubleArrayElements(jarg67, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg68 %lx\n",jarg68);
    arg68=0;
    if(jarg68)
    {
      jsize sz = jenv->GetArrayLength(jarg68);
      int len = sz;
      //		fprintf(stderr,"jarg68 length %d\n",len);
      if(len)
      {
        arg68= (double*)jenv->GetDoubleArrayElements(jarg68, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    arg69=0;
    if(jarg69)
    {
      jsize sz = jenv->GetArrayLength(jarg69);
      int len = sz;
      //		fprintf(stderr,"jarg69 length %d\n",len);
      if(len)
      {
        arg69= (double*)jenv->GetDoubleArrayElements(jarg69, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    arg70=0;
    if(jarg70)
    {
      jsize sz = jenv->GetArrayLength(jarg70);
      int len = sz;
      //		fprintf(stderr,"jarg70 length %d\n",len);
      if(len)
      {
        arg70= (double*)jenv->GetDoubleArrayElements(jarg70, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    arg71=0;
    if(jarg71)
    {
      jsize sz = jenv->GetArrayLength(jarg71);
      int len = sz;
      //		fprintf(stderr,"jarg71 length %d\n",len);
      if(len)
      {
        arg71= (double*)jenv->GetDoubleArrayElements(jarg71, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg72 %lx\n",jarg72);
    arg72=0;
    if(jarg72)
    {
      jsize sz = jenv->GetArrayLength(jarg72);
      int len = sz;
      //		fprintf(stderr,"jarg72 length %d\n",len);
      if(len)
      {
        arg72= (double*)jenv->GetDoubleArrayElements(jarg72, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg73 %lx\n",jarg73);
    arg73=0;
    if(jarg73)
    {
      jsize sz = jenv->GetArrayLength(jarg73);
      int len = sz;
      //		fprintf(stderr,"jarg73 length %d\n",len);
      if(len)
      {
        arg73= (double*)jenv->GetDoubleArrayElements(jarg73, 0);
      }
    }
  }
  arg74 = (double)jarg74; 
  arg75 = (double)jarg75; 
  arg76 = (double)jarg76; 
  {
    //	fprintf(stderr,"jarg77 %lx\n",jarg77);
    arg77=0;
    if(jarg77)
    {
      jsize len = jenv->GetArrayLength(jarg77);
      //		fprintf(stderr,"jarg77 length %d\n",len);
      if(len)
      {
        arg77= (int *)jenv->GetIntArrayElements(jarg77, 0);
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaMSoftQV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71,arg72,arg73,arg74,arg75,arg76,arg77);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg6);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg6, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg6[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg6, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31 && jarg31)
    {
      jenv->ReleaseIntArrayElements(jarg31, (jint*)arg31, 0);
      arg31=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg36 %lx\n",jarg36);
    if(arg36&&jarg36)
    {
      jenv->ReleaseDoubleArrayElements(jarg36, (jdouble*) arg36, 0);
      arg36=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg39);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg39, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg39[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg39, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41 && jarg41)
    {
      jsize len = jenv->GetArrayLength(jarg41);
      jlong* tt=jenv->GetLongArrayElements(jarg41, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg41[i];
      jenv->ReleaseLongArrayElements(jarg41, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg44);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg44, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg44[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg44, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48&&jarg48)
    {
      jenv->ReleaseDoubleArrayElements(jarg48, (jdouble*) arg48, 0);
      arg48=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg62 %lx\n",jarg62);
    if(arg62&&jarg62)
    {
      jenv->ReleaseDoubleArrayElements(jarg62, (jdouble*) arg62, 0);
      arg62=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg63 %lx\n",jarg63);
    if(arg63&&jarg63)
    {
      jenv->ReleaseDoubleArrayElements(jarg63, (jdouble*) arg63, 0);
      arg63=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg65 %lx\n",jarg65);
    if(arg65 && jarg65)
    {
      jsize len = jenv->GetArrayLength(jarg65);
      jlong* tt=jenv->GetLongArrayElements(jarg65, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg65[i];
      jenv->ReleaseLongArrayElements(jarg65, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg67 %lx\n",jarg67);
    if(arg67&&jarg67)
    {
      jenv->ReleaseDoubleArrayElements(jarg67, (jdouble*) arg67, 0);
      arg67=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg68 %lx\n",jarg68);
    if(arg68&&jarg68)
    {
      jenv->ReleaseDoubleArrayElements(jarg68, (jdouble*) arg68, 0);
      arg68=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg69 %lx\n",jarg69);
    if(arg69&&jarg69)
    {
      jenv->ReleaseDoubleArrayElements(jarg69, (jdouble*) arg69, 0);
      arg69=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg70 %lx\n",jarg70);
    if(arg70&&jarg70)
    {
      jenv->ReleaseDoubleArrayElements(jarg70, (jdouble*) arg70, 0);
      arg70=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg71 %lx\n",jarg71);
    if(arg71&&jarg71)
    {
      jenv->ReleaseDoubleArrayElements(jarg71, (jdouble*) arg71, 0);
      arg71=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg72 %lx\n",jarg72);
    if(arg72&&jarg72)
    {
      jenv->ReleaseDoubleArrayElements(jarg72, (jdouble*) arg72, 0);
      arg72=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg73 %lx\n",jarg73);
    if(arg73&&jarg73)
    {
      jenv->ReleaseDoubleArrayElements(jarg73, (jdouble*) arg73, 0);
      arg73=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg77 %lx\n",jarg77);
    if(arg77 && jarg77)
    {
      jenv->ReleaseIntArrayElements(jarg77, (jint*)arg77, 0);
      arg77=0;
    } 
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }

  {
    if(arg62){
      delete[] arg62;arg62=0;
    }
  }
  {
    if(arg63){
      delete[] arg63;arg63=0;
    }
  }
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  {
    if(arg68){
      delete[] arg68;arg68=0;
    }
  }
  {
    if(arg69){
      delete[] arg69;arg69=0;
    }
  }
  {
    if(arg70){
      delete[] arg70;arg70=0;
    }
  }
  {
    if(arg71){
      delete[] arg71;arg71=0;
    }
  }
  {
    if(arg72){
      delete[] arg72;arg72=0;
    }
  }
  {
    if(arg73){
      delete[] arg73;arg73=0;
    }
  }
  {
    if(arg77){
      delete[] arg77;arg77=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPA(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jlong jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jint jarg29, jdouble jarg30, jdouble jarg31, jint jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jintArray jarg35, jlong jarg36, jdoubleArray jarg37, jdouble jarg38, jlong jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jlong jarg42, jobjectArray jarg43, jlong jarg44, jlongArray jarg45, jdoubleArray jarg46, jdoubleArray jarg47) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (dimen)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (int)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (int *)jenv->GetIntArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (real)jarg38; 
  arg39 = (dimen)jarg39; 
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  arg42 = (dimen)jarg42; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(jarg43)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg43=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg43 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg43[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg43=0;
    }
  }
  arg44 = (dimen)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
        arg45 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg45[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg45, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  result = (short)FrontierCVPA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jenv->ReleaseIntArrayElements(jarg35, (jint*)arg35, 0);
      arg35=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg43[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg43, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45 && jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg45[i];
      jenv->ReleaseLongArrayElements(jarg45, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPAF(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jlong jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jint jarg29, jdouble jarg30, jdouble jarg31, jint jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jintArray jarg35, jlong jarg36, jdoubleArray jarg37, jdouble jarg38, jlong jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jlong jarg42, jobjectArray jarg43, jlong jarg44, jlongArray jarg45, jdoubleArray jarg46, jdoubleArray jarg47, jobjectArray jarg48, jdoubleArray jarg49, jdoubleArray jarg50, jint jarg51) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (dimen)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (int)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (int *)jenv->GetIntArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (real)jarg38; 
  arg39 = (dimen)jarg39; 
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  arg42 = (dimen)jarg42; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(jarg43)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg43=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg43 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg43[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg43=0;
    }
  }
  arg44 = (dimen)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
        arg45 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg45[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg45, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(jarg48)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg48=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg48 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg48[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg48=0;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  result = (short)FrontierCVPAF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jenv->ReleaseIntArrayElements(jarg35, (jint*)arg35, 0);
      arg35=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg43[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg43, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45 && jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg45[i];
      jenv->ReleaseLongArrayElements(jarg45, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg48[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg48, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPAFb(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jlong jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jint jarg29, jdouble jarg30, jdouble jarg31, jint jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jintArray jarg35, jlong jarg36, jdoubleArray jarg37, jdouble jarg38, jlong jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jlong jarg42, jobjectArray jarg43, jlong jarg44, jlongArray jarg45, jdoubleArray jarg46, jdoubleArray jarg47, jobjectArray jarg48, jdoubleArray jarg49, jdoubleArray jarg50, jint jarg51, jint jarg52, jint jarg53, jint jarg54, jint jarg55, jdouble jarg56) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  long arg52 = (long) -1 ;
  long arg53 = (long) -1 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  double arg56 = (double) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (dimen)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (int)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (int *)jenv->GetIntArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (real)jarg38; 
  arg39 = (dimen)jarg39; 
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  arg42 = (dimen)jarg42; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(jarg43)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg43=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg43 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg43[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg43=0;
    }
  }
  arg44 = (dimen)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
        arg45 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg45[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg45, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(jarg48)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg48=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg48 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg48[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg48=0;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = (long)jarg52; 
  arg53 = (long)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (double)jarg56; 
  result = (short)FrontierCVPAFb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jenv->ReleaseIntArrayElements(jarg35, (jint*)arg35, 0);
      arg35=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg43[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg43, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45 && jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg45[i];
      jenv->ReleaseLongArrayElements(jarg45, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg48[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg48, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPAFbl(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jlong jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jint jarg29, jdouble jarg30, jdouble jarg31, jint jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jintArray jarg35, jlong jarg36, jdoubleArray jarg37, jdouble jarg38, jlong jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jlong jarg42, jobjectArray jarg43, jlong jarg44, jlongArray jarg45, jdoubleArray jarg46, jdoubleArray jarg47, jobjectArray jarg48, jdoubleArray jarg49, jdoubleArray jarg50, jint jarg51, jint jarg52, jint jarg53, jint jarg54, jint jarg55, jdouble jarg56, jdouble jarg57, jdoubleArray jarg58) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  long arg52 = (long) -1 ;
  long arg53 = (long) -1 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  double arg56 = (double) 1 ;
  double arg57 = (double) 0 ;
  vector arg58 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (dimen)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (int)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (int *)jenv->GetIntArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (real)jarg38; 
  arg39 = (dimen)jarg39; 
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  arg42 = (dimen)jarg42; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(jarg43)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg43=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg43 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg43[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg43=0;
    }
  }
  arg44 = (dimen)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
        arg45 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg45[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg45, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(jarg48)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg48=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg48 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg48[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg48=0;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = (long)jarg52; 
  arg53 = (long)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (double)jarg56; 
  arg57 = (double)jarg57; 
  {
    //	fprintf(stderr,"jarg58 %lx\n",jarg58);
    arg58=0;
    if(jarg58)
    {
      jsize sz = jenv->GetArrayLength(jarg58);
      int len = sz;
      //		fprintf(stderr,"jarg58 length %d\n",len);
      if(len)
      {
        arg58= (double*)jenv->GetDoubleArrayElements(jarg58, 0);
      }
    }
  }
  result = (short)FrontierCVPAFbl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jenv->ReleaseIntArrayElements(jarg35, (jint*)arg35, 0);
      arg35=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg43[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg43, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45 && jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg45[i];
      jenv->ReleaseLongArrayElements(jarg45, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg48[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg48, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg58 %lx\n",jarg58);
    if(arg58&&jarg58)
    {
      jenv->ReleaseDoubleArrayElements(jarg58, (jdouble*) arg58, 0);
      arg58=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }
  {
    if(arg58){
      delete[] arg58;arg58=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPAFblQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jlong jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jint jarg29, jdouble jarg30, jdouble jarg31, jint jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jintArray jarg35, jlong jarg36, jdoubleArray jarg37, jdouble jarg38, jlong jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jlong jarg42, jobjectArray jarg43, jlong jarg44, jlongArray jarg45, jdoubleArray jarg46, jdoubleArray jarg47, jobjectArray jarg48, jdoubleArray jarg49, jdoubleArray jarg50, jint jarg51, jint jarg52, jint jarg53, jint jarg54, jint jarg55, jdouble jarg56, jdouble jarg57, jdoubleArray jarg58, jdoubleArray jarg59, jdoubleArray jarg60) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  long arg52 = (long) -1 ;
  long arg53 = (long) -1 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  double arg56 = (double) 1 ;
  double arg57 = (double) 0 ;
  vector arg58 = (vector) 0 ;
  vector arg59 = (vector) 0 ;
  vector arg60 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (dimen)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (int)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (int *)jenv->GetIntArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (real)jarg38; 
  arg39 = (dimen)jarg39; 
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  arg42 = (dimen)jarg42; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(jarg43)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg43=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg43 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg43[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg43=0;
    }
  }
  arg44 = (dimen)jarg44; 
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
        arg45 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg45[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg45, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    arg46=0;
    if(jarg46)
    {
      jsize sz = jenv->GetArrayLength(jarg46);
      int len = sz;
      //		fprintf(stderr,"jarg46 length %d\n",len);
      if(len)
      {
        arg46= (double*)jenv->GetDoubleArrayElements(jarg46, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    arg47=0;
    if(jarg47)
    {
      jsize sz = jenv->GetArrayLength(jarg47);
      int len = sz;
      //		fprintf(stderr,"jarg47 length %d\n",len);
      if(len)
      {
        arg47= (double*)jenv->GetDoubleArrayElements(jarg47, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(jarg48)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg48=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg48 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg48[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg48=0;
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    arg49=0;
    if(jarg49)
    {
      jsize sz = jenv->GetArrayLength(jarg49);
      int len = sz;
      //		fprintf(stderr,"jarg49 length %d\n",len);
      if(len)
      {
        arg49= (double*)jenv->GetDoubleArrayElements(jarg49, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    arg50=0;
    if(jarg50)
    {
      jsize sz = jenv->GetArrayLength(jarg50);
      int len = sz;
      //		fprintf(stderr,"jarg50 length %d\n",len);
      if(len)
      {
        arg50= (double*)jenv->GetDoubleArrayElements(jarg50, 0);
      }
    }
  }
  arg51 = (int)jarg51; 
  arg52 = (long)jarg52; 
  arg53 = (long)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (double)jarg56; 
  arg57 = (double)jarg57; 
  {
    //	fprintf(stderr,"jarg58 %lx\n",jarg58);
    arg58=0;
    if(jarg58)
    {
      jsize sz = jenv->GetArrayLength(jarg58);
      int len = sz;
      //		fprintf(stderr,"jarg58 length %d\n",len);
      if(len)
      {
        arg58= (double*)jenv->GetDoubleArrayElements(jarg58, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg59 %lx\n",jarg59);
    arg59=0;
    if(jarg59)
    {
      jsize sz = jenv->GetArrayLength(jarg59);
      int len = sz;
      //		fprintf(stderr,"jarg59 length %d\n",len);
      if(len)
      {
        arg59= (double*)jenv->GetDoubleArrayElements(jarg59, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg60 %lx\n",jarg60);
    arg60=0;
    if(jarg60)
    {
      jsize sz = jenv->GetArrayLength(jarg60);
      int len = sz;
      //		fprintf(stderr,"jarg60 length %d\n",len);
      if(len)
      {
        arg60= (double*)jenv->GetDoubleArrayElements(jarg60, 0);
      }
    }
  }
  result = (short)FrontierCVPAFblQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jenv->ReleaseIntArrayElements(jarg35, (jint*)arg35, 0);
      arg35=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg43[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg43, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45 && jarg45)
    {
      jsize len = jenv->GetArrayLength(jarg45);
      jlong* tt=jenv->GetLongArrayElements(jarg45, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg45[i];
      jenv->ReleaseLongArrayElements(jarg45, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg46 %lx\n",jarg46);
    if(arg46&&jarg46)
    {
      jenv->ReleaseDoubleArrayElements(jarg46, (jdouble*) arg46, 0);
      arg46=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg47 %lx\n",jarg47);
    if(arg47&&jarg47)
    {
      jenv->ReleaseDoubleArrayElements(jarg47, (jdouble*) arg47, 0);
      arg47=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg48 %lx\n",jarg48);
    if(arg48)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg48);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg48, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg48[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg48, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg49 %lx\n",jarg49);
    if(arg49&&jarg49)
    {
      jenv->ReleaseDoubleArrayElements(jarg49, (jdouble*) arg49, 0);
      arg49=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg50 %lx\n",jarg50);
    if(arg50&&jarg50)
    {
      jenv->ReleaseDoubleArrayElements(jarg50, (jdouble*) arg50, 0);
      arg50=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg58 %lx\n",jarg58);
    if(arg58&&jarg58)
    {
      jenv->ReleaseDoubleArrayElements(jarg58, (jdouble*) arg58, 0);
      arg58=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg59 %lx\n",jarg59);
    if(arg59&&jarg59)
    {
      jenv->ReleaseDoubleArrayElements(jarg59, (jdouble*) arg59, 0);
      arg59=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg60 %lx\n",jarg60);
    if(arg60&&jarg60)
    {
      jenv->ReleaseDoubleArrayElements(jarg60, (jdouble*) arg60, 0);
      arg60=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46){
      delete[] arg46;arg46=0;
    }
  }
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }
  {
    if(arg50){
      delete[] arg50;arg50=0;
    }
  }
  {
    if(arg58){
      delete[] arg58;arg58=0;
    }
  }
  {
    if(arg59){
      delete[] arg59;arg59=0;
    }
  }
  {
    if(arg60){
      delete[] arg60;arg60=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPF(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdouble jarg21, jint jarg22, jint jarg23, jlong jarg24, jint jarg25, jdouble jarg26, jdouble jarg27, jint jarg28, jint jarg29, jdouble jarg30, jdouble jarg31, jint jarg32, jdoubleArray jarg33, jdoubleArray jarg34, jintArray jarg35, jlong jarg36, jdoubleArray jarg37, jdouble jarg38, jlong jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jdoubleArray jarg42, jobjectArray jarg43, jdoubleArray jarg44, jdoubleArray jarg45, jint jarg46) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  int arg46 = (int) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (real)jarg21; 
  arg22 = (long)jarg22; 
  arg23 = (long)jarg23; 
  arg24 = (dimen)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (real)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (int)jarg28; 
  arg29 = (int)jarg29; 
  arg30 = (real)jarg30; 
  arg31 = (real)jarg31; 
  arg32 = (int)jarg32; 
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    arg33=0;
    if(jarg33)
    {
      jsize sz = jenv->GetArrayLength(jarg33);
      int len = sz;
      //		fprintf(stderr,"jarg33 length %d\n",len);
      if(len)
      {
        arg33= (double*)jenv->GetDoubleArrayElements(jarg33, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize len = jenv->GetArrayLength(jarg35);
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (int *)jenv->GetIntArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  arg38 = (real)jarg38; 
  arg39 = (dimen)jarg39; 
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    arg42=0;
    if(jarg42)
    {
      jsize sz = jenv->GetArrayLength(jarg42);
      int len = sz;
      //		fprintf(stderr,"jarg42 length %d\n",len);
      if(len)
      {
        arg42= (double*)jenv->GetDoubleArrayElements(jarg42, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(jarg43)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg43=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg43 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg43[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg43=0;
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    arg44=0;
    if(jarg44)
    {
      jsize sz = jenv->GetArrayLength(jarg44);
      int len = sz;
      //		fprintf(stderr,"jarg44 length %d\n",len);
      if(len)
      {
        arg44= (double*)jenv->GetDoubleArrayElements(jarg44, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    arg45=0;
    if(jarg45)
    {
      jsize sz = jenv->GetArrayLength(jarg45);
      int len = sz;
      //		fprintf(stderr,"jarg45 length %d\n",len);
      if(len)
      {
        arg45= (double*)jenv->GetDoubleArrayElements(jarg45, 0);
      }
    }
  }
  arg46 = (int)jarg46; 
  result = (short)FrontierCVPF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33&&jarg33)
    {
      jenv->ReleaseDoubleArrayElements(jarg33, (jdouble*) arg33, 0);
      arg33=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35 && jarg35)
    {
      jenv->ReleaseIntArrayElements(jarg35, (jint*)arg35, 0);
      arg35=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42&&jarg42)
    {
      jenv->ReleaseDoubleArrayElements(jarg42, (jdouble*) arg42, 0);
      arg42=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg43);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg43, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg43[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg43, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg44 %lx\n",jarg44);
    if(arg44&&jarg44)
    {
      jenv->ReleaseDoubleArrayElements(jarg44, (jdouble*) arg44, 0);
      arg44=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg45 %lx\n",jarg45);
    if(arg45&&jarg45)
    {
      jenv->ReleaseDoubleArrayElements(jarg45, (jdouble*) arg45, 0);
      arg45=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg44){
      delete[] arg44;arg44=0;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPAextcosts(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdouble jarg19, jint jarg20, jint jarg21, jlong jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jint jarg26, jdouble jarg27, jdouble jarg28, jint jarg29, jdoubleArray jarg30, jdoubleArray jarg31, jintArray jarg32, jlong jarg33, jdoubleArray jarg34, jdouble jarg35, jlong jarg36, jobjectArray jarg37, jlong jarg38, jlongArray jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jobjectArray jarg42, jdoubleArray jarg43, jobject jarg44, jobject jarg45, jobject jarg46, jshort jarg50, jdoubleArray jarg51, jshort jarg52, jint jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  dimen arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  int arg29 ;
  vector arg30 = (vector) 0 ;
  vector arg31 = (vector) 0 ;
  int *arg32 = (int *) 0 ;
  dimen arg33 ;
  vector arg34 = (vector) 0 ;
  real arg35 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  dimen *arg39 = (dimen *) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  pUtility arg44 = (pUtility) 0 ;
  pModC arg45 = (pModC) 0 ;
  pModQ arg46 = (pModQ) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  void *arg49 = (void *) 0 ;
  short arg50 = (short) 0 ;
  vector arg51 = (vector) 0 ;
  short arg52 = (short) 1 ;
  int arg53 = (int) 0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (long)jarg21; 
  arg22 = (dimen)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (int)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (real)jarg28; 
  arg29 = (int)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize sz = jenv->GetArrayLength(jarg31);
      int len = sz;
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (double*)jenv->GetDoubleArrayElements(jarg31, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    arg32=0;
    if(jarg32)
    {
      jsize len = jenv->GetArrayLength(jarg32);
      //		fprintf(stderr,"jarg32 length %d\n",len);
      if(len)
      {
        arg32= (int *)jenv->GetIntArrayElements(jarg32, 0);
      }
    }
  }
  arg33 = (dimen)jarg33; 
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  arg35 = (real)jarg35; 
  arg36 = (dimen)jarg36; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(jarg37)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg37);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg37=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg37 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg37[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg37=0;
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize len = jenv->GetArrayLength(jarg39);
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg39, 0);
        arg39 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg39[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg39, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(jarg42)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg42);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg42=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg42 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg42[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg42=0;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    if(jarg44)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg44;
      info->functionName=(char*)"util";
      arg44=(pUtility)CallUtil;
      arg47=(void*)info;
    }
    else
    {
      arg44=0;
      arg47=0;
    }
  }
  {
    if(jarg45)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg45;
      info->functionName=(char*)"modc";
      arg45=(pModC)CallModC;
      arg48=(void*)info;
    }
    else
    {
      arg45=0;
      arg48=0;
    }
  }
  {
    if(jarg46)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg46;
      info->functionName=(char*)"modq";
      arg46=(pModQ)CallModQ;
      arg49=(void*)info;
    }
    else
    {
      arg46=0;
      arg49=0;
    }
  }
  arg50 = (short)jarg50; 
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    arg51=0;
    if(jarg51)
    {
      jsize sz = jenv->GetArrayLength(jarg51);
      int len = sz;
      //		fprintf(stderr,"jarg51 length %d\n",len);
      if(len)
      {
        arg51= (double*)jenv->GetDoubleArrayElements(jarg51, 0);
      }
    }
  }
  arg52 = (short)jarg52; 
  arg53 = (int)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  result = (short)FrontierCVPAextcosts(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,SWIG_STD_MOVE(arg44),SWIG_STD_MOVE(arg45),SWIG_STD_MOVE(arg46),arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31&&jarg31)
    {
      jenv->ReleaseDoubleArrayElements(jarg31, (jdouble*) arg31, 0);
      arg31=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    if(arg32 && jarg32)
    {
      jenv->ReleaseIntArrayElements(jarg32, (jint*)arg32, 0);
      arg32=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg37);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg37[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg37, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39 && jarg39)
    {
      jsize len = jenv->GetArrayLength(jarg39);
      jlong* tt=jenv->GetLongArrayElements(jarg39, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg39[i];
      jenv->ReleaseLongArrayElements(jarg39, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg42);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg42[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg42, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg44)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg45)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    if(jarg46)
    {
      JavaInfo* info =(JavaInfo*) arg49;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    if(arg51&&jarg51)
    {
      jenv->ReleaseDoubleArrayElements(jarg51, (jdouble*) arg51, 0);
      arg51=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_FrontierCVPAextcostsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jint jarg7, jobjectArray jarg8, jdoubleArray jarg9, jlong jarg10, jobjectArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdouble jarg18, jdouble jarg19, jint jarg20, jint jarg21, jlong jarg22, jdouble jarg23, jdouble jarg24, jint jarg25, jint jarg26, jdouble jarg27, jdouble jarg28, jint jarg29, jdoubleArray jarg30, jdoubleArray jarg31, jintArray jarg32, jlong jarg33, jdoubleArray jarg34, jdouble jarg35, jlong jarg36, jobjectArray jarg37, jlong jarg38, jlongArray jarg39, jdoubleArray jarg40, jdoubleArray jarg41, jobjectArray jarg42, jdoubleArray jarg43, jobject jarg44, jobject jarg45, jobject jarg46, jshort jarg50, jdoubleArray jarg51, jshort jarg52, jint jarg53, jint jarg54, jint jarg55, jint jarg56, jint jarg57, jdouble jarg58, jdouble jarg59, jdoubleArray jarg60) {
  jshort jresult = 0 ;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  dimen arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  int arg29 ;
  vector arg30 = (vector) 0 ;
  vector arg31 = (vector) 0 ;
  int *arg32 = (int *) 0 ;
  dimen arg33 ;
  vector arg34 = (vector) 0 ;
  real arg35 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  dimen *arg39 = (dimen *) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  pUtility arg44 = (pUtility) 0 ;
  pModC arg45 = (pModC) 0 ;
  pModQ arg46 = (pModQ) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  void *arg49 = (void *) 0 ;
  short arg50 = (short) 0 ;
  vector arg51 = (vector) 0 ;
  short arg52 = (short) 1 ;
  int arg53 = (int) 0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 0 ;
  vector arg60 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  arg7 = (long)jarg7; 
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(jarg8)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      arg8=0;
      if(len)
      {
        arg8 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
          arg8[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg8[len] = 0;
      }
    }
    else{
      arg8=0;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  arg10 = (dimen)jarg10; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(jarg11)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg11=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg11 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg11[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg11=0;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  arg18 = (real)jarg18; 
  arg19 = (real)jarg19; 
  arg20 = (long)jarg20; 
  arg21 = (long)jarg21; 
  arg22 = (dimen)jarg22; 
  arg23 = (real)jarg23; 
  arg24 = (real)jarg24; 
  arg25 = (int)jarg25; 
  arg26 = (int)jarg26; 
  arg27 = (real)jarg27; 
  arg28 = (real)jarg28; 
  arg29 = (int)jarg29; 
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize sz = jenv->GetArrayLength(jarg31);
      int len = sz;
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (double*)jenv->GetDoubleArrayElements(jarg31, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    arg32=0;
    if(jarg32)
    {
      jsize len = jenv->GetArrayLength(jarg32);
      //		fprintf(stderr,"jarg32 length %d\n",len);
      if(len)
      {
        arg32= (int *)jenv->GetIntArrayElements(jarg32, 0);
      }
    }
  }
  arg33 = (dimen)jarg33; 
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  arg35 = (real)jarg35; 
  arg36 = (dimen)jarg36; 
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(jarg37)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg37);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg37=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg37 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg37[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg37=0;
    }
  }
  arg38 = (dimen)jarg38; 
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    arg39=0;
    if(jarg39)
    {
      jsize len = jenv->GetArrayLength(jarg39);
      //		fprintf(stderr,"jarg39 length %d\n",len);
      if(len)
      {
        jlong* tt=jenv->GetLongArrayElements(jarg39, 0);
        arg39 = new dimen[len];
        for(jsize i=0;i<len;++i)
        arg39[i]=tt[i];
        jenv->ReleaseLongArrayElements(jarg39, tt, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    arg40=0;
    if(jarg40)
    {
      jsize sz = jenv->GetArrayLength(jarg40);
      int len = sz;
      //		fprintf(stderr,"jarg40 length %d\n",len);
      if(len)
      {
        arg40= (double*)jenv->GetDoubleArrayElements(jarg40, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    arg41=0;
    if(jarg41)
    {
      jsize sz = jenv->GetArrayLength(jarg41);
      int len = sz;
      //		fprintf(stderr,"jarg41 length %d\n",len);
      if(len)
      {
        arg41= (double*)jenv->GetDoubleArrayElements(jarg41, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(jarg42)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg42);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg42=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg42 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg42[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg42=0;
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    arg43=0;
    if(jarg43)
    {
      jsize sz = jenv->GetArrayLength(jarg43);
      int len = sz;
      //		fprintf(stderr,"jarg43 length %d\n",len);
      if(len)
      {
        arg43= (double*)jenv->GetDoubleArrayElements(jarg43, 0);
      }
    }
  }
  {
    if(jarg44)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg44;
      info->functionName=(char*)"util";
      arg44=(pUtility)CallUtil;
      arg47=(void*)info;
    }
    else
    {
      arg44=0;
      arg47=0;
    }
  }
  {
    if(jarg45)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg45;
      info->functionName=(char*)"modc";
      arg45=(pModC)CallModC;
      arg48=(void*)info;
    }
    else
    {
      arg45=0;
      arg48=0;
    }
  }
  {
    if(jarg46)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg46;
      info->functionName=(char*)"modq";
      arg46=(pModQ)CallModQ;
      arg49=(void*)info;
    }
    else
    {
      arg46=0;
      arg49=0;
    }
  }
  arg50 = (short)jarg50; 
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    arg51=0;
    if(jarg51)
    {
      jsize sz = jenv->GetArrayLength(jarg51);
      int len = sz;
      //		fprintf(stderr,"jarg51 length %d\n",len);
      if(len)
      {
        arg51= (double*)jenv->GetDoubleArrayElements(jarg51, 0);
      }
    }
  }
  arg52 = (short)jarg52; 
  arg53 = (int)jarg53; 
  arg54 = (long)jarg54; 
  arg55 = (long)jarg55; 
  arg56 = (long)jarg56; 
  arg57 = (long)jarg57; 
  arg58 = (double)jarg58; 
  arg59 = (double)jarg59; 
  {
    //	fprintf(stderr,"jarg60 %lx\n",jarg60);
    arg60=0;
    if(jarg60)
    {
      jsize sz = jenv->GetArrayLength(jarg60);
      int len = sz;
      //		fprintf(stderr,"jarg60 length %d\n",len);
      if(len)
      {
        arg60= (double*)jenv->GetDoubleArrayElements(jarg60, 0);
      }
    }
  }
  result = (short)FrontierCVPAextcostsl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,SWIG_STD_MOVE(arg44),SWIG_STD_MOVE(arg45),SWIG_STD_MOVE(arg46),arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    char **col=arg8;
    long i=0;
    if(arg8)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg8, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg8, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg11);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg11, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg11[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg11, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31&&jarg31)
    {
      jenv->ReleaseDoubleArrayElements(jarg31, (jdouble*) arg31, 0);
      arg31=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    if(arg32 && jarg32)
    {
      jenv->ReleaseIntArrayElements(jarg32, (jint*)arg32, 0);
      arg32=0;
    } 
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg37);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg37, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg37[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg37, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg39 %lx\n",jarg39);
    if(arg39 && jarg39)
    {
      jsize len = jenv->GetArrayLength(jarg39);
      jlong* tt=jenv->GetLongArrayElements(jarg39, 0);
      for(jsize i=0;i<len;++i)
      tt[i]=arg39[i];
      jenv->ReleaseLongArrayElements(jarg39, tt, 0);
    }
  }
  {
    //	fprintf(stderr,"jarg40 %lx\n",jarg40);
    if(arg40&&jarg40)
    {
      jenv->ReleaseDoubleArrayElements(jarg40, (jdouble*) arg40, 0);
      arg40=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg41 %lx\n",jarg41);
    if(arg41&&jarg41)
    {
      jenv->ReleaseDoubleArrayElements(jarg41, (jdouble*) arg41, 0);
      arg41=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg42 %lx\n",jarg42);
    if(arg42)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg42);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg42, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg42[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg42, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg43 %lx\n",jarg43);
    if(arg43&&jarg43)
    {
      jenv->ReleaseDoubleArrayElements(jarg43, (jdouble*) arg43, 0);
      arg43=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg44)
    {
      JavaInfo* info =(JavaInfo*) arg47;
      delete info;
    }
  }
  {
    if(jarg45)
    {
      JavaInfo* info =(JavaInfo*) arg48;
      delete info;
    }
  }
  {
    if(jarg46)
    {
      JavaInfo* info =(JavaInfo*) arg49;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg51 %lx\n",jarg51);
    if(arg51&&jarg51)
    {
      jenv->ReleaseDoubleArrayElements(jarg51, (jdouble*) arg51, 0);
      arg51=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg60 %lx\n",jarg60);
    if(arg60&&jarg60)
    {
      jenv->ReleaseDoubleArrayElements(jarg60, (jdouble*) arg60, 0);
      arg60=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40){
      delete[] arg40;arg40=0;
    }
  }
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  {
    if(arg60){
      delete[] arg60;arg60=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_PropertiesC(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdoubleArray jarg21, jobjectArray jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jlong jarg25, jdoubleArray jarg26) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  dimen arg25 ;
  vector arg26 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    if(jarg17)
    {
      int len = (int)jenv->GetArrayLength(jarg17),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg17 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg17, 0);
        for(i=0; i<len; i++){
          arg17[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg17, jd, 0);
      }
      else if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
      else{
        arg17=0;
      }
    }
  }
  {
    if(jarg18)
    {
      int len = (int)jenv->GetArrayLength(jarg18),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg18 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg18, 0);
        for(i=0; i<len; i++){
          arg18[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg18, jd, 0);
      }
      else if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
      else{
        arg18=0;
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(jarg22)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg22);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg22=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg22 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg22[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg22=0;
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    arg23=0;
    if(jarg23)
    {
      jsize sz = jenv->GetArrayLength(jarg23);
      int len = sz;
      //		fprintf(stderr,"jarg23 length %d\n",len);
      if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  arg25 = (dimen)jarg25; 
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  PropertiesC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg17)
    {
      int len = (int) jenv->GetArrayLength(jarg17),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg17, 0);
        for(i=0;i < len;++i){
          jd[i] = arg17[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg17, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
        arg17=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    if(arg18)
    {
      int len = (int) jenv->GetArrayLength(jarg18),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg18, 0);
        for(i=0;i < len;++i){
          jd[i] = arg18[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg18, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
        arg18=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg22);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg22, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg22[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg22, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg23 %lx\n",jarg23);
    if(arg23&&jarg23)
    {
      jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
      arg23=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_PropertiesCA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jdoubleArray jarg21, jdoubleArray jarg22, jdoubleArray jarg23, jdoubleArray jarg24, jdoubleArray jarg25, jdoubleArray jarg26, jdoubleArray jarg27, jdoubleArray jarg28, jdoubleArray jarg29, jdoubleArray jarg30, jdoubleArray jarg31, jdoubleArray jarg32, jobjectArray jarg33, jdoubleArray jarg34, jdoubleArray jarg35, jlong jarg36, jdoubleArray jarg37) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  real *arg7 = (real *) 0 ;
  real *arg8 = (real *) 0 ;
  real *arg9 = (real *) 0 ;
  real *arg10 = (real *) 0 ;
  vector arg11 = (vector) 0 ;
  real *arg12 = (real *) 0 ;
  real *arg13 = (real *) 0 ;
  real *arg14 = (real *) 0 ;
  real *arg15 = (real *) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  vector arg31 = (vector) 0 ;
  vector arg32 = (vector) 0 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  {
    if(jarg22)
    {
      int len = (int)jenv->GetArrayLength(jarg22),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg22 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg22, 0);
        for(i=0; i<len; i++){
          arg22[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg22, jd, 0);
      }
      else if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
      else{
        arg22=0;
      }
    }
  }
  {
    if(jarg23)
    {
      int len = (int)jenv->GetArrayLength(jarg23),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg23 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg23, 0);
        for(i=0; i<len; i++){
          arg23[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg23, jd, 0);
      }
      else if(len)
      {
        arg23= (double*)jenv->GetDoubleArrayElements(jarg23, 0);
      }
      else{
        arg23=0;
      }
    }
  }
  {
    if(jarg24)
    {
      int len = (int)jenv->GetArrayLength(jarg24),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg24 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg24, 0);
        for(i=0; i<len; i++){
          arg24[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg24, jd, 0);
      }
      else if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
      else{
        arg24=0;
      }
    }
  }
  {
    if(jarg25)
    {
      int len = (int)jenv->GetArrayLength(jarg25),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg25 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg25, 0);
        for(i=0; i<len; i++){
          arg25[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg25, jd, 0);
      }
      else if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
      else{
        arg25=0;
      }
    }
  }
  {
    if(jarg26)
    {
      int len = (int)jenv->GetArrayLength(jarg26),plen=arg1+arg2;
      if(len && len < plen)
      {
        int i;
        arg26 = new double[plen];
        jdouble* jd=jenv->GetDoubleArrayElements(jarg26, 0);
        for(i=0; i<len; i++){
          arg26[i] = jd[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg26, jd, 0);
      }
      else if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
      else{
        arg26=0;
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    arg27=0;
    if(jarg27)
    {
      jsize sz = jenv->GetArrayLength(jarg27);
      int len = sz;
      //		fprintf(stderr,"jarg27 length %d\n",len);
      if(len)
      {
        arg27= (double*)jenv->GetDoubleArrayElements(jarg27, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    arg28=0;
    if(jarg28)
    {
      jsize sz = jenv->GetArrayLength(jarg28);
      int len = sz;
      //		fprintf(stderr,"jarg28 length %d\n",len);
      if(len)
      {
        arg28= (double*)jenv->GetDoubleArrayElements(jarg28, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    arg29=0;
    if(jarg29)
    {
      jsize sz = jenv->GetArrayLength(jarg29);
      int len = sz;
      //		fprintf(stderr,"jarg29 length %d\n",len);
      if(len)
      {
        arg29= (double*)jenv->GetDoubleArrayElements(jarg29, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    arg30=0;
    if(jarg30)
    {
      jsize sz = jenv->GetArrayLength(jarg30);
      int len = sz;
      //		fprintf(stderr,"jarg30 length %d\n",len);
      if(len)
      {
        arg30= (double*)jenv->GetDoubleArrayElements(jarg30, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    arg31=0;
    if(jarg31)
    {
      jsize sz = jenv->GetArrayLength(jarg31);
      int len = sz;
      //		fprintf(stderr,"jarg31 length %d\n",len);
      if(len)
      {
        arg31= (double*)jenv->GetDoubleArrayElements(jarg31, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    arg32=0;
    if(jarg32)
    {
      jsize sz = jenv->GetArrayLength(jarg32);
      int len = sz;
      //		fprintf(stderr,"jarg32 length %d\n",len);
      if(len)
      {
        arg32= (double*)jenv->GetDoubleArrayElements(jarg32, 0);
      }
    }
  }
  {
    //In CURVE FL[in][infac]; in safeqp C[in+infac*n]
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(jarg33)
    {
      jsize m,mn=0,n = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg33=0;
      if(n)
      {
        //			fprintf(stderr,"Number of stocks in JNI: %ld\n",n);
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg33 = new double[mn];
        for(i = 0;i < n;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (m=jenv->GetArrayLength(dd));++j)
          {
            arg33[n*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg33=0;
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    arg34=0;
    if(jarg34)
    {
      jsize sz = jenv->GetArrayLength(jarg34);
      int len = sz;
      //		fprintf(stderr,"jarg34 length %d\n",len);
      if(len)
      {
        arg34= (double*)jenv->GetDoubleArrayElements(jarg34, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    arg35=0;
    if(jarg35)
    {
      jsize sz = jenv->GetArrayLength(jarg35);
      int len = sz;
      //		fprintf(stderr,"jarg35 length %d\n",len);
      if(len)
      {
        arg35= (double*)jenv->GetDoubleArrayElements(jarg35, 0);
      }
    }
  }
  arg36 = (dimen)jarg36; 
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    arg37=0;
    if(jarg37)
    {
      jsize sz = jenv->GetArrayLength(jarg37);
      int len = sz;
      //		fprintf(stderr,"jarg37 length %d\n",len);
      if(len)
      {
        arg37= (double*)jenv->GetDoubleArrayElements(jarg37, 0);
      }
    }
  }
  PropertiesCA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg22)
    {
      int len = (int) jenv->GetArrayLength(jarg22),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg22, 0);
        for(i=0;i < len;++i){
          jd[i] = arg22[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg22, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
        arg22=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    if(arg23)
    {
      int len = (int) jenv->GetArrayLength(jarg23),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg23, 0);
        for(i=0;i < len;++i){
          jd[i] = arg23[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg23, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg23, (jdouble*) arg23, 0);
        arg23=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    if(arg24)
    {
      int len = (int) jenv->GetArrayLength(jarg24),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg24, 0);
        for(i=0;i < len;++i){
          jd[i] = arg24[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg24, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
        arg24=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    if(arg25)
    {
      int len = (int) jenv->GetArrayLength(jarg25),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg25, 0);
        for(i=0;i < len;++i){
          jd[i] = arg25[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg25, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
        arg25=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    if(arg26)
    {
      int len = (int) jenv->GetArrayLength(jarg26),plen=arg1+arg2;
      if(len < plen)
      {
        int i;
        jdouble* jd= jenv->GetDoubleArrayElements(jarg26, 0);
        for(i=0;i < len;++i){
          jd[i] = arg26[i];
        }
        jenv->ReleaseDoubleArrayElements(jarg26, jd, 0);
      }
      else
      {
        jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
        arg26=0;//Because we cannot delete[] it later on;
      }
    }
  }
  {
    //	fprintf(stderr,"jarg27 %lx\n",jarg27);
    if(arg27&&jarg27)
    {
      jenv->ReleaseDoubleArrayElements(jarg27, (jdouble*) arg27, 0);
      arg27=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg28 %lx\n",jarg28);
    if(arg28&&jarg28)
    {
      jenv->ReleaseDoubleArrayElements(jarg28, (jdouble*) arg28, 0);
      arg28=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg29 %lx\n",jarg29);
    if(arg29&&jarg29)
    {
      jenv->ReleaseDoubleArrayElements(jarg29, (jdouble*) arg29, 0);
      arg29=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg30 %lx\n",jarg30);
    if(arg30&&jarg30)
    {
      jenv->ReleaseDoubleArrayElements(jarg30, (jdouble*) arg30, 0);
      arg30=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg31 %lx\n",jarg31);
    if(arg31&&jarg31)
    {
      jenv->ReleaseDoubleArrayElements(jarg31, (jdouble*) arg31, 0);
      arg31=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg32 %lx\n",jarg32);
    if(arg32&&jarg32)
    {
      jenv->ReleaseDoubleArrayElements(jarg32, (jdouble*) arg32, 0);
      arg32=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg33 %lx\n",jarg33);
    if(arg33)
    {
      jsize m,mn = 0,n = jenv->GetArrayLength(jarg33);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < n;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg33, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (m = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg33[n*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray) dd, 0, m, di); 
        jenv->SetObjectArrayElement(jarg33, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg34 %lx\n",jarg34);
    if(arg34&&jarg34)
    {
      jenv->ReleaseDoubleArrayElements(jarg34, (jdouble*) arg34, 0);
      arg34=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg35 %lx\n",jarg35);
    if(arg35&&jarg35)
    {
      jenv->ReleaseDoubleArrayElements(jarg35, (jdouble*) arg35, 0);
      arg35=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg37 %lx\n",jarg37);
    if(arg37&&jarg37)
    {
      jenv->ReleaseDoubleArrayElements(jarg37, (jdouble*) arg37, 0);
      arg37=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg23){
      delete[] arg23;arg23=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
  {
    if(arg27){
      delete[] arg27;arg27=0;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg29){
      delete[] arg29;arg29=0;
    }
  }
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_GetBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jlong jarg6, jdoubleArray jarg7) {
  dimen arg1 ;
  long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (dimen)jarg6; 
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  GetBeta(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Get_1RisksC(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jlong jarg11, jdoubleArray jarg12) {
  dimen arg1 ;
  long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  dimen arg11 ;
  vector arg12 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  arg11 = (dimen)jarg11; 
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  Get_RisksC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MarginalUtility(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jlong jarg21, jdoubleArray jarg22) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (real)jarg8; 
  arg9 = (real)jarg9; 
  arg10 = (dimen)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (dimen)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  MarginalUtility(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MarginalUtilityb(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jlong jarg21, jdoubleArray jarg22, jdouble jarg23) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  double arg23 = (double) 1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (real)jarg8; 
  arg9 = (real)jarg9; 
  arg10 = (dimen)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (dimen)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  arg23 = (double)jarg23; 
  MarginalUtilityb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MarginalUtilitybSa(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jlong jarg21, jdoubleArray jarg22, jdouble jarg23, jdoubleArray jarg24) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  double arg23 = (double) 1 ;
  vector arg24 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (real)jarg8; 
  arg9 = (real)jarg9; 
  arg10 = (dimen)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (dimen)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  arg23 = (double)jarg23; 
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  MarginalUtilitybSa(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MarginalUtilitybSaQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jdoubleArray jarg14, jdoubleArray jarg15, jdoubleArray jarg16, jdoubleArray jarg17, jdoubleArray jarg18, jdoubleArray jarg19, jdoubleArray jarg20, jlong jarg21, jdoubleArray jarg22, jdouble jarg23, jdoubleArray jarg24, jdoubleArray jarg25, jdoubleArray jarg26) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  double arg23 = (double) 1 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (real)jarg8; 
  arg9 = (real)jarg9; 
  arg10 = (dimen)jarg10; 
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    arg14=0;
    if(jarg14)
    {
      jsize sz = jenv->GetArrayLength(jarg14);
      int len = sz;
      //		fprintf(stderr,"jarg14 length %d\n",len);
      if(len)
      {
        arg14= (double*)jenv->GetDoubleArrayElements(jarg14, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    arg16=0;
    if(jarg16)
    {
      jsize sz = jenv->GetArrayLength(jarg16);
      int len = sz;
      //		fprintf(stderr,"jarg16 length %d\n",len);
      if(len)
      {
        arg16= (double*)jenv->GetDoubleArrayElements(jarg16, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    arg17=0;
    if(jarg17)
    {
      jsize sz = jenv->GetArrayLength(jarg17);
      int len = sz;
      //		fprintf(stderr,"jarg17 length %d\n",len);
      if(len)
      {
        arg17= (double*)jenv->GetDoubleArrayElements(jarg17, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    arg18=0;
    if(jarg18)
    {
      jsize sz = jenv->GetArrayLength(jarg18);
      int len = sz;
      //		fprintf(stderr,"jarg18 length %d\n",len);
      if(len)
      {
        arg18= (double*)jenv->GetDoubleArrayElements(jarg18, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    arg19=0;
    if(jarg19)
    {
      jsize sz = jenv->GetArrayLength(jarg19);
      int len = sz;
      //		fprintf(stderr,"jarg19 length %d\n",len);
      if(len)
      {
        arg19= (double*)jenv->GetDoubleArrayElements(jarg19, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    arg20=0;
    if(jarg20)
    {
      jsize sz = jenv->GetArrayLength(jarg20);
      int len = sz;
      //		fprintf(stderr,"jarg20 length %d\n",len);
      if(len)
      {
        arg20= (double*)jenv->GetDoubleArrayElements(jarg20, 0);
      }
    }
  }
  arg21 = (dimen)jarg21; 
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    arg22=0;
    if(jarg22)
    {
      jsize sz = jenv->GetArrayLength(jarg22);
      int len = sz;
      //		fprintf(stderr,"jarg22 length %d\n",len);
      if(len)
      {
        arg22= (double*)jenv->GetDoubleArrayElements(jarg22, 0);
      }
    }
  }
  arg23 = (double)jarg23; 
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    arg24=0;
    if(jarg24)
    {
      jsize sz = jenv->GetArrayLength(jarg24);
      int len = sz;
      //		fprintf(stderr,"jarg24 length %d\n",len);
      if(len)
      {
        arg24= (double*)jenv->GetDoubleArrayElements(jarg24, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    arg25=0;
    if(jarg25)
    {
      jsize sz = jenv->GetArrayLength(jarg25);
      int len = sz;
      //		fprintf(stderr,"jarg25 length %d\n",len);
      if(len)
      {
        arg25= (double*)jenv->GetDoubleArrayElements(jarg25, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    arg26=0;
    if(jarg26)
    {
      jsize sz = jenv->GetArrayLength(jarg26);
      int len = sz;
      //		fprintf(stderr,"jarg26 length %d\n",len);
      if(len)
      {
        arg26= (double*)jenv->GetDoubleArrayElements(jarg26, 0);
      }
    }
  }
  MarginalUtilitybSaQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg14 %lx\n",jarg14);
    if(arg14&&jarg14)
    {
      jenv->ReleaseDoubleArrayElements(jarg14, (jdouble*) arg14, 0);
      arg14=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg16 %lx\n",jarg16);
    if(arg16&&jarg16)
    {
      jenv->ReleaseDoubleArrayElements(jarg16, (jdouble*) arg16, 0);
      arg16=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg17 %lx\n",jarg17);
    if(arg17&&jarg17)
    {
      jenv->ReleaseDoubleArrayElements(jarg17, (jdouble*) arg17, 0);
      arg17=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg18 %lx\n",jarg18);
    if(arg18&&jarg18)
    {
      jenv->ReleaseDoubleArrayElements(jarg18, (jdouble*) arg18, 0);
      arg18=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg19 %lx\n",jarg19);
    if(arg19&&jarg19)
    {
      jenv->ReleaseDoubleArrayElements(jarg19, (jdouble*) arg19, 0);
      arg19=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg20 %lx\n",jarg20);
    if(arg20&&jarg20)
    {
      jenv->ReleaseDoubleArrayElements(jarg20, (jdouble*) arg20, 0);
      arg20=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg22 %lx\n",jarg22);
    if(arg22&&jarg22)
    {
      jenv->ReleaseDoubleArrayElements(jarg22, (jdouble*) arg22, 0);
      arg22=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg24 %lx\n",jarg24);
    if(arg24&&jarg24)
    {
      jenv->ReleaseDoubleArrayElements(jarg24, (jdouble*) arg24, 0);
      arg24=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg25 %lx\n",jarg25);
    if(arg25&&jarg25)
    {
      jenv->ReleaseDoubleArrayElements(jarg25, (jdouble*) arg25, 0);
      arg25=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg26 %lx\n",jarg26);
    if(arg26&&jarg26)
    {
      jenv->ReleaseDoubleArrayElements(jarg26, (jdouble*) arg26, 0);
      arg26=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg25){
      delete[] arg25;arg25=0;
    }
  }
  {
    if(arg26){
      delete[] arg26;arg26=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_MarginalUtility_1ext(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobjectArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdouble jarg8, jdouble jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12, jdoubleArray jarg13, jlong jarg14, jdoubleArray jarg15, jdouble jarg16, jobject jarg17, jobject jarg18, jdoubleArray jarg21) {
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  vector arg10 = (vector) 0 ;
  real *arg11 = (real *) 0 ;
  real *arg12 = (real *) 0 ;
  vector arg13 = (vector) 0 ;
  dimen arg14 ;
  vector arg15 = (vector) 0 ;
  double arg16 = (double) 1 ;
  pUtility arg17 = (pUtility) 0 ;
  pModC arg18 = (pModC) 0 ;
  void *arg19 = (void *) 0 ;
  void *arg20 = (void *) 0 ;
  vector arg21 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (long)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(jarg3)
    {
      int i;
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      arg3=0;
      if(len)
      {
        arg3 = new char*[len+1];
        for(i=0; i<len; i++)
        {
          jstring js;
          char *cs;
          jboolean iscopy=0;
          
          js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
          arg3[i]=cs = (char *) jenv->GetStringUTFChars(js, &iscopy);

          jenv->DeleteLocalRef(js);
        }
        arg3[len] = 0;
      }
    }
    else{
      arg3=0;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  arg8 = (real)jarg8; 
  arg9 = (real)jarg9; 
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    arg10=0;
    if(jarg10)
    {
      jsize sz = jenv->GetArrayLength(jarg10);
      int len = sz;
      //		fprintf(stderr,"jarg10 length %d\n",len);
      if(len)
      {
        arg10= (double*)jenv->GetDoubleArrayElements(jarg10, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    arg12=0;
    if(jarg12)
    {
      jsize sz = jenv->GetArrayLength(jarg12);
      int len = sz;
      //		fprintf(stderr,"jarg12 length %d\n",len);
      if(len)
      {
        arg12= (double*)jenv->GetDoubleArrayElements(jarg12, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    arg13=0;
    if(jarg13)
    {
      jsize sz = jenv->GetArrayLength(jarg13);
      int len = sz;
      //		fprintf(stderr,"jarg13 length %d\n",len);
      if(len)
      {
        arg13= (double*)jenv->GetDoubleArrayElements(jarg13, 0);
      }
    }
  }
  arg14 = (dimen)jarg14; 
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    arg15=0;
    if(jarg15)
    {
      jsize sz = jenv->GetArrayLength(jarg15);
      int len = sz;
      //		fprintf(stderr,"jarg15 length %d\n",len);
      if(len)
      {
        arg15= (double*)jenv->GetDoubleArrayElements(jarg15, 0);
      }
    }
  }
  arg16 = (double)jarg16; 
  {
    if(jarg17)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg17;
      info->functionName=(char*)"util";
      arg17=(pUtility)CallUtil;
      arg19=(void*)info;
    }
    else
    {
      arg17=0;
      arg19=0;
    }
  }
  {
    if(jarg18)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg18;
      info->functionName=(char*)"modc";
      arg18=(pModC)CallModC;
      arg20=(void*)info;
    }
    else
    {
      arg18=0;
      arg20=0;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    arg21=0;
    if(jarg21)
    {
      jsize sz = jenv->GetArrayLength(jarg21);
      int len = sz;
      //		fprintf(stderr,"jarg21 length %d\n",len);
      if(len)
      {
        arg21= (double*)jenv->GetDoubleArrayElements(jarg21, 0);
      }
    }
  }
  MarginalUtility_ext(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,SWIG_STD_MOVE(arg17),SWIG_STD_MOVE(arg18),arg19,arg20,arg21);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    char **col=arg3;
    long i=0;
    if(arg3)
    {
      while(*col)
      {
        jstring js;
        char *cs;
        jboolean iscopy=0;
        js = (jstring) jenv->GetObjectArrayElement(jarg3, i);
        cs = (char *) jenv->GetStringUTFChars(js, &iscopy);
        if(*col != cs)
        {
          jenv->SetObjectArrayElement(jarg3, i++, jenv->NewStringUTF(*col));

        }

        col++; 
        jenv->DeleteLocalRef(js);
      } 
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg10 %lx\n",jarg10);
    if(arg10&&jarg10)
    {
      jenv->ReleaseDoubleArrayElements(jarg10, (jdouble*) arg10, 0);
      arg10=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg12 %lx\n",jarg12);
    if(arg12&&jarg12)
    {
      jenv->ReleaseDoubleArrayElements(jarg12, (jdouble*) arg12, 0);
      arg12=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg13 %lx\n",jarg13);
    if(arg13&&jarg13)
    {
      jenv->ReleaseDoubleArrayElements(jarg13, (jdouble*) arg13, 0);
      arg13=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg15 %lx\n",jarg15);
    if(arg15&&jarg15)
    {
      jenv->ReleaseDoubleArrayElements(jarg15, (jdouble*) arg15, 0);
      arg15=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg17)
    {
      JavaInfo* info =(JavaInfo*) arg19;
      delete info;
    }
  }
  {
    if(jarg18)
    {
      JavaInfo* info =(JavaInfo*) arg20;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg21 %lx\n",jarg21);
    if(arg21&&jarg21)
    {
      jenv->ReleaseDoubleArrayElements(jarg21, (jdouble*) arg21, 0);
      arg21=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    //We musn't free this arg6 input=jarg6 arg=jarg6 result=$result
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_round_1weight(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 = (double) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)round_weight(arg1,arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dsmxmulv(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  dsmxmulv(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_dsmxmulvT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  dsmxmulvT(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    //We musn't free this arg3 input=jarg3 arg=jarg3 result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_OptAdvanced(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jobjectArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jobject jarg9, jdoubleArray jarg11) {
  jshort jresult = 0 ;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pHmul arg9 ;
  void *arg10 = (void *) 0 ;
  vector arg11 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  {
    
  }
  arg1 = (dimen)jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //In CURVE C[im][in]; in safeqp C[im+in*m]
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(jarg4)
    {
      jsize n,mn=0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      arg4=0;
      if(m)
      {
        //			fprintf(stderr,"Number of constraints in JNI: %ld\n",m);
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          mn += jenv->GetArrayLength(dd);
          jenv->DeleteLocalRef(dd);
        }
        arg4 = new double[mn];
        for(i = 0;i < m;++i)
        {
          dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
          di = jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
          for(j = 0;j < (n=jenv->GetArrayLength(dd));++j)
          {
            arg4[m*j+i]=(double) di[j];
          }
          jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
          jenv->DeleteLocalRef(dd);
        }
      }
    }
    else{
      arg4=0;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    if(jarg9)
    {
      JavaInfo *info = new JavaInfo;
      info->jenv = jenv;
      info->jd=jarg9;
      info->functionName=(char*)"hmul";
      arg9=(pHmul)CallHmul;
      arg10=(void*)info;
    }
    else
    {
      arg9=0;
      arg10=0;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    arg11=0;
    if(jarg11)
    {
      jsize sz = jenv->GetArrayLength(jarg11);
      int len = sz;
      //		fprintf(stderr,"jarg11 length %d\n",len);
      if(len)
      {
        arg11= (double*)jenv->GetDoubleArrayElements(jarg11, 0);
      }
    }
  }
  result = (short)OptAdvanced(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,SWIG_STD_MOVE(arg9),arg10,arg11);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4)
    {
      jsize n,mn = 0,m = jenv->GetArrayLength(jarg4);
      jobjectArray dd;
      jdouble* di;
      int i,j;
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        mn += jenv->GetArrayLength(dd);
        jenv->DeleteLocalRef(dd);
      }
      for(i = 0;i < m;++i)
      {
        dd = (jobjectArray)jenv->GetObjectArrayElement(jarg4, i);
        di = (jdouble*) jenv->GetDoubleArrayElements((jdoubleArray) dd, 0);
        for(j = 0;j < (n = jenv->GetArrayLength(dd));++j)
        {
          di[j] = arg4[m*j+i];
        }
        jenv->SetDoubleArrayRegion((jdoubleArray)dd, 0, n, di); 
        jenv->SetObjectArrayElement(jarg4, i, dd); 
        jenv->ReleaseDoubleArrayElements((jdoubleArray) dd, di, 0);
        jenv->DeleteLocalRef(dd);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(jarg9)
    {
      JavaInfo* info =(JavaInfo*) arg10;
      delete info;
    }
  }
  {
    //	fprintf(stderr,"jarg11 %lx\n",jarg11);
    if(arg11&&jarg11)
    {
      jenv->ReleaseDoubleArrayElements(jarg11, (jdouble*) arg11, 0);
      arg11=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    //We musn't free this arg7 input=jarg7 arg=jarg7 result=$result
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1featol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->featol = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Base_1Optimise_1featol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (real) ((arg1)->featol);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Base_1Optimise_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (dimen) ((arg1)->n);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  if (arg1) (arg1)->m = arg2;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Base_1Optimise_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (dimen) ((arg1)->m);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1A_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->A = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Base_1Optimise_1A_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (vector) ((arg1)->A);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n*arg1->m;
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1lower_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->lower = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Base_1Optimise_1lower_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (vector) ((arg1)->lower);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n+arg1->m;
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1upper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->upper = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Base_1Optimise_1upper_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (vector) ((arg1)->upper);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n+arg1->m;
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1lp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->lp = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1lp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (unsigned char) ((arg1)->lp);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->c = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Base_1Optimise_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (vector) ((arg1)->c);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n;
      int i;
      jresult = jenv->NewDoubleArray(size);
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1H_1from_1higher_1terms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->H_from_higher_terms = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Base_1Optimise_1H_1from_1higher_1terms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (vector) ((arg1)->H_from_higher_terms);
  *(vector *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1scale_1utility_1external_1terms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->scale_utility_external_terms = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Base_1Optimise_1scale_1utility_1external_1terms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (double) ((arg1)->scale_utility_external_terms);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1DoExtraIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->DoExtraIterations = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1DoExtraIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (unsigned char) ((arg1)->DoExtraIterations);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1use_1higher_1H_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->use_higher_H = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1use_1higher_1H_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (unsigned char) ((arg1)->use_higher_H);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1round_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->round_result = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1round_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (short) ((arg1)->round_result);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1CONJ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->CONJ = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1CONJ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (short) ((arg1)->CONJ);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1useInteriorPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->useInteriorPoint = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1useInteriorPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (short) ((arg1)->useInteriorPoint);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->x = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Base_1Optimise_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (vector) ((arg1)->x);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n;
      int i;
      jresult = jenv->NewDoubleArray(size);
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1higher_1reset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->higher_reset = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1higher_1reset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (unsigned char) ((arg1)->higher_reset);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_delete_1Base_1Optimise(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Base_Optimise **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1hmul_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pHmul arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    if(jarg2)
    {
      JavaInfo *info;
      if(!arg1->HmulObjectInfo) info= new JavaInfo;//This doesn't get deleted
      info->jenv = jenv;
      info->jd = jarg2;
      info->functionName=(char*)"hmul";
      arg1->HmulObjectInfo=(void*)info;
      arg2 = (pHmul)CallHmul;//To prevent unused variable warning
    }
    else arg2=0;
  }
  {
    if(arg1){
      arg1->hmul = (pHmul) arg2;
    }//The default memberin typemap set it via arg2
  }
}


SWIGEXPORT jobject JNICALL Java_safejavaJNI_Base_1Optimise_1hmul_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pHmul result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result =  ((arg1)->hmul);
  *(pHmul **)&jresult = new pHmul(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1Util_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pUtility arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    JavaInfo *info;
    if(!arg1->UtilObjectInfo) info = new JavaInfo;//This doesn't get deleted
    info->jenv = jenv;
    info->jd=jarg2;
    info->functionName=(char*)"util";
    arg1->UtilObjectInfo=(void*)info;
    arg2 = (pUtility) CallUtil;
  }
  if (arg1) (arg1)->Util = arg2;
}


SWIGEXPORT jobject JNICALL Java_safejavaJNI_Base_1Optimise_1Util_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pUtility result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result =  ((arg1)->Util);
  *(pUtility **)&jresult = new pUtility(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1ModDeriv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pModC arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    JavaInfo *info;
    if(!arg1->ModCObjectInfo) info = new JavaInfo;//This doesn't get deleted
    info->jenv = jenv;
    info->jd=jarg2;
    info->functionName=(char*)"modc";
    arg1->ModCObjectInfo=(void*)info;
    arg2 = (pModC)CallModC;
  }
  if (arg1) (arg1)->ModDeriv = arg2;
}


SWIGEXPORT jobject JNICALL Java_safejavaJNI_Base_1Optimise_1ModDeriv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pModC result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result =  ((arg1)->ModDeriv);
  *(pModC **)&jresult = new pModC(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1ModHessian_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pModQ arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  {
    JavaInfo *info;
    if(!arg1->ModQObjectInfo) info = new JavaInfo;//This doesn't get deleted
    info->jenv = jenv;
    info->jd=jarg2;
    info->functionName=(char*)"modq";
    arg1->ModQObjectInfo=(void*)info;
    arg2 = (pModQ)CallModQ;
  }
  if (arg1) (arg1)->ModHessian = arg2;
}


SWIGEXPORT jobject JNICALL Java_safejavaJNI_Base_1Optimise_1ModHessian_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  pModQ result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result =  ((arg1)->ModHessian);
  *(pModQ **)&jresult = new pModQ(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1Version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->Version;
    if (arg2) {
      arg1->Version = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Version, (const char *)arg2);
    } else {
      arg1->Version = 0;
    }
  }

}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_Base_1Optimise_1Version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  result = (char *) ((arg1)->Version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Base_1Optimise_1clocker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  int arg2 = (int) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->clocker(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1SetLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  (arg1)->SetLog();
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1PrintLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  (arg1)->PrintLog();
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1AddLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->AddLog((char const *)arg2);

}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1qphess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (dimen)jarg4; 
  arg5 = (dimen)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  (arg1)->qphess(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Base_1Optimise_1utility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (real)(arg1)->utility(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1ModifyC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jshort jarg6) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned char arg6 = (unsigned char) 1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (unsigned char)jarg6; 
  (arg1)->ModifyC(arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1qphess_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (dimen)jarg4; 
  arg5 = (dimen)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  (arg1)->qphess_base(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Base_1Optimise_1utility_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (real)(arg1)->utility_base(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1Opt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  result = (short)(arg1)->Opt(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1OptInterior(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  result = (short)(arg1)->OptInterior(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Base_1Optimise_1OptAdvanced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9) {
  jshort jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    arg9=0;
    if(jarg9)
    {
      jsize sz = jenv->GetArrayLength(jarg9);
      int len = sz;
      //		fprintf(stderr,"jarg9 length %d\n",len);
      if(len)
      {
        arg9= (double*)jenv->GetDoubleArrayElements(jarg9, 0);
      }
    }
  }
  result = (short)(arg1)->OptAdvanced(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg9 %lx\n",jarg9);
    if(arg9&&jarg9)
    {
      jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, 0);
      arg9=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Base_1Optimise_1PathMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdouble jarg7) {
  jdouble jresult = 0 ;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 1.490116119384766e-008 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  arg7 = (double)jarg7; 
  result = (real)(arg1)->PathMin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Base_1Optimise_1ModifyC_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base_Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  (arg1)->ModifyC_base(arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1H_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->H = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1H_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->H);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->H_size();
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_Optimise_1OptSetup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    try
    {
      ////thread	Py_BEGIN_ALLOW_THREADS
      result = (char *)(arg1)->OptSetup(arg2);
      ////thread	Py_END_ALLOW_THREADS
    }
    catch(MemProb mess)
    {
      printf("%s\n",arg1->Version);
      printf("n=%ld. %s, cannot allocate %ld bytes\n",mess.n,mess.mess.c_str(),mess.amount);
      result= (char*)"Not enough memory for optimisation";
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_safejavaJNI_Optimise_1OptSetup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    try
    {
      ////thread	Py_BEGIN_ALLOW_THREADS
      result = (char *)(arg1)->OptSetup(arg2,arg3);
      ////thread	Py_END_ALLOW_THREADS
    }
    catch(MemProb mess)
    {
      printf("%s\n",arg1->Version);
      printf("n=%ld. %s, cannot allocate %ld bytes\n",mess.n,mess.mess.c_str(),mess.amount);
      result= (char*)"Not enough memory for optimisation";
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1GOpt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  result = (short)(arg1)->GOpt(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jshort)result; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1Drop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  result = (short)(arg1)->Drop(arg2,arg3);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1DropCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (arg1)->DropCheck();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1ThreshCheck_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  double arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->ThreshCheck(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1ThreshCheck_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  result = (arg1)->ThreshCheck(arg2);
  jresult = (jlong)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1threshvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->threshvector = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1threshvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->threshvector);
  *(vector *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1threshscalar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->threshscalar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1threshscalar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (double) ((arg1)->threshscalar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1longbasket_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->longbasket = arg2;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_Optimise_1longbasket_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (long) ((arg1)->longbasket);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1shortbasket_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->shortbasket = arg2;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_Optimise_1shortbasket_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (long) ((arg1)->shortbasket);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1tradebuy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->tradebuy = arg2;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_Optimise_1tradebuy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (long) ((arg1)->tradebuy);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1tradesell_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->tradesell = arg2;
}


SWIGEXPORT jint JNICALL Java_safejavaJNI_Optimise_1tradesell_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (long) ((arg1)->tradesell);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_new_1Optimise(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optimise *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Optimise *)new Optimise();
  *(Optimise **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_delete_1Optimise(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optimise *arg1 = (Optimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optimise **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1beta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  (arg1)->beta(arg2,arg3);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1risk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  result = (real)(arg1)->risk(arg2,arg3);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1MC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  (arg1)->MC(arg2,arg3,arg4);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1qphess_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (dimen)jarg4; 
  arg5 = (dimen)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  (arg1)->qphess_base(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1qphess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (dimen)jarg4; 
  arg5 = (dimen)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  (arg1)->qphess(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1TransformH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 = (size_t) 0 ;
  unsigned char arg3 = (unsigned char) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned char)jarg3; 
  (arg1)->TransformH(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1utility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  result = (real)(arg1)->utility(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1ModifyC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jshort jarg6) {
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned char arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  arg6 = (unsigned char)jarg6; 
  (arg1)->ModifyC(arg2,arg3,arg4,arg5,arg6);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1CompSetup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Optimise *arg1 = (Optimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  (arg1)->CompSetup();
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1H_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (arg1)->H_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1turnover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (double)(arg1)->turnover();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1ncomp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ncomp = arg2;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1ncomp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result =  ((arg1)->ncomp);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1Composites_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->Composites = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1Composites_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->Composites);
  {
    if(result)
    {
      jdouble *jfp;
      int size = (arg1->n-arg1->ncomp)*arg1->ncomp;
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1initial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->initial = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1initial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->initial);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n;
      int i;
      jresult = jenv->NewDoubleArray(size);
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1absoluteA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->absoluteA = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1absoluteA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->absoluteA);
  *(vector *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1lowerA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->lowerA = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1lowerA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->lowerA);
  *(vector *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1upperA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->upperA = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1upperA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->upperA);
  *(vector *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->mask = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->mask);
  *(vector *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1mabs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mabs = arg2;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1mabs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result =  ((arg1)->mabs);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1gross_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->gross = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1gross_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (short) ((arg1)->gross);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1SLRATmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->SLRATmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1SLRATmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (double) ((arg1)->SLRATmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1SLRATmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->SLRATmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1SLRATmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (double) ((arg1)->SLRATmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1delta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->delta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1delta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->delta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1drop_1to_1this_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->drop_to_this = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_Optimise_1drop_1to_1this_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (vector) ((arg1)->drop_to_this);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n;
      int i;
      jresult = jenv->NewDoubleArray(size);
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1hess_1choice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->hess_choice = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1hess_1choice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (short) ((arg1)->hess_choice);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1Full_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->Full = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1Full_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (short) ((arg1)->Full);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1LSValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->LSValue = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1LSValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->LSValue);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1LSValue_1Low_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->LSValue_Low = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1LSValue_1Low_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->LSValue_Low);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1dropfac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->dropfac = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1dropfac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->dropfac);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1threshfac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->threshfac = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1threshfac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->threshfac);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1equalbounds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->equalbounds = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1equalbounds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->equalbounds);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1nowTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (real)jarg2; 
  if (arg1) (arg1)->nowTime = arg2;
}


SWIGEXPORT jdouble JNICALL Java_safejavaJNI_Optimise_1nowTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (real) ((arg1)->nowTime);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1badcountlimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->badcountlimit = arg2;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1badcountlimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result =  ((arg1)->badcountlimit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1UseDiagPenalty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->UseDiagPenalty = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1UseDiagPenalty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (unsigned char) ((arg1)->UseDiagPenalty);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1back_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Optimise *arg1 = (Optimise *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->back = arg2;
}


SWIGEXPORT jshort JNICALL Java_safejavaJNI_Optimise_1back_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Optimise *arg1 = (Optimise *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  result = (short) ((arg1)->back);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_Optimise_1Rounding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  (arg1)->Rounding(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6,arg7);
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg4 input=jarg4 arg=jarg4 result=$result
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1nfac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nfac = arg2;
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_FOptimise_1nfac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FOptimise *arg1 = (FOptimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  result =  ((arg1)->nfac);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1FL_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->FL = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_FOptimise_1FL_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  result = (vector) ((arg1)->FL);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->nfac*arg1->nfac+1;
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1SV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->SV = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_FOptimise_1SV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  result = (vector) ((arg1)->SV);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->n;
      int i;
      jresult = jenv->NewDoubleArray(size);
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1FC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector arg2 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  if (arg1) (arg1)->FC = arg2;
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //We musn't free this arg2 input=jarg2 arg=jarg2 result=$result
  }
}


SWIGEXPORT jdoubleArray JNICALL Java_safejavaJNI_FOptimise_1FC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  result = (vector) ((arg1)->FC);
  {
    if(result)
    {
      jdouble *jfp;
      int size = arg1->nfac*(arg1->nfac+1)/2;
      int i;
      
      
      jresult = jenv->NewDoubleArray(size);
      
      jfp = jenv->GetDoubleArrayElements(jresult, 0);
      for(i=0; i<size; i++ )
      jfp[i] = (jdouble) result[i];
      
      jenv->ReleaseDoubleArrayElements(jresult, jfp, 0);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1facmul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  dimen arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  (arg1)->facmul(arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1factor_1model_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  (arg1)->factor_model_process();
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1FMC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    arg2=0;
    if(jarg2)
    {
      jsize sz = jenv->GetArrayLength(jarg2);
      int len = sz;
      //		fprintf(stderr,"jarg2 length %d\n",len);
      if(len)
      {
        arg2= (double*)jenv->GetDoubleArrayElements(jarg2, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    arg3=0;
    if(jarg3)
    {
      jsize sz = jenv->GetArrayLength(jarg3);
      int len = sz;
      //		fprintf(stderr,"jarg3 length %d\n",len);
      if(len)
      {
        arg3= (double*)jenv->GetDoubleArrayElements(jarg3, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    arg4=0;
    if(jarg4)
    {
      jsize sz = jenv->GetArrayLength(jarg4);
      int len = sz;
      //		fprintf(stderr,"jarg4 length %d\n",len);
      if(len)
      {
        arg4= (double*)jenv->GetDoubleArrayElements(jarg4, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    arg5=0;
    if(jarg5)
    {
      jsize sz = jenv->GetArrayLength(jarg5);
      int len = sz;
      //		fprintf(stderr,"jarg5 length %d\n",len);
      if(len)
      {
        arg5= (double*)jenv->GetDoubleArrayElements(jarg5, 0);
      }
    }
  }
  (arg1)->FMC(arg2,arg3,arg4,arg5);
  {
    //	fprintf(stderr,"jarg2 %lx\n",jarg2);
    if(arg2&&jarg2)
    {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble*) arg2, 0);
      arg2=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg3 %lx\n",jarg3);
    if(arg3&&jarg3)
    {
      jenv->ReleaseDoubleArrayElements(jarg3, (jdouble*) arg3, 0);
      arg3=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg4 %lx\n",jarg4);
    if(arg4&&jarg4)
    {
      jenv->ReleaseDoubleArrayElements(jarg4, (jdouble*) arg4, 0);
      arg4=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg5 %lx\n",jarg5);
    if(arg5&&jarg5)
    {
      jenv->ReleaseDoubleArrayElements(jarg5, (jdouble*) arg5, 0);
      arg5=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_FOptimise_1H_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FOptimise *arg1 = (FOptimise *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  result = (arg1)->H_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1CompSetup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  (arg1)->CompSetup();
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_new_1FOptimise(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FOptimise *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FOptimise *)new FOptimise();
  *(FOptimise **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_delete_1FOptimise(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FOptimise **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1qphess_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  arg2 = (dimen)jarg2; 
  arg3 = (dimen)jarg3; 
  arg4 = (dimen)jarg4; 
  arg5 = (dimen)jarg5; 
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    arg6=0;
    if(jarg6)
    {
      jsize sz = jenv->GetArrayLength(jarg6);
      int len = sz;
      //		fprintf(stderr,"jarg6 length %d\n",len);
      if(len)
      {
        arg6= (double*)jenv->GetDoubleArrayElements(jarg6, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    arg7=0;
    if(jarg7)
    {
      jsize sz = jenv->GetArrayLength(jarg7);
      int len = sz;
      //		fprintf(stderr,"jarg7 length %d\n",len);
      if(len)
      {
        arg7= (double*)jenv->GetDoubleArrayElements(jarg7, 0);
      }
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    arg8=0;
    if(jarg8)
    {
      jsize sz = jenv->GetArrayLength(jarg8);
      int len = sz;
      //		fprintf(stderr,"jarg8 length %d\n",len);
      if(len)
      {
        arg8= (double*)jenv->GetDoubleArrayElements(jarg8, 0);
      }
    }
  }
  (arg1)->qphess_base(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    //	fprintf(stderr,"jarg6 %lx\n",jarg6);
    if(arg6&&jarg6)
    {
      jenv->ReleaseDoubleArrayElements(jarg6, (jdouble*) arg6, 0);
      arg6=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg7 %lx\n",jarg7);
    if(arg7&&jarg7)
    {
      jenv->ReleaseDoubleArrayElements(jarg7, (jdouble*) arg7, 0);
      arg7=0;//Because we cannot delete[] it later on;
    }
  }
  {
    //	fprintf(stderr,"jarg8 %lx\n",jarg8);
    if(arg8&&jarg8)
    {
      jenv->ReleaseDoubleArrayElements(jarg8, (jdouble*) arg8, 0);
      arg8=0;//Because we cannot delete[] it later on;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
}


SWIGEXPORT void JNICALL Java_safejavaJNI_FOptimise_1TransformH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  FOptimise *arg1 = (FOptimise *) 0 ;
  size_t arg2 = (size_t) 0 ;
  unsigned char arg3 = (unsigned char) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FOptimise **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned char)jarg3; 
  (arg1)->TransformH(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT jlong JNICALL Java_safejavaJNI_Optimise_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Base_Optimise **)&baseptr = *(Optimise **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_safejavaJNI_FOptimise_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Optimise **)&baseptr = *(FOptimise **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

